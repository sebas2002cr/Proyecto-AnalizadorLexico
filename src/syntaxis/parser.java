
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package syntaxis;

import java_cup.runtime.*;
import lexical.CodeLexer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\004\000\002\003\004\000\002\003\003" +
    "\000\002\041\002\000\002\042\002\000\002\004\014\000" +
    "\002\043\002\000\002\005\010\000\002\007\003\000\002" +
    "\007\005\000\002\007\003\000\002\013\003\000\002\013" +
    "\005\000\002\044\002\000\002\010\006\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\006\000\002" +
    "\012\006\000\002\045\002\000\002\015\006\000\002\046" +
    "\002\000\002\016\006\000\002\014\003\000\002\014\003" +
    "\000\002\020\004\000\002\020\005\000\002\020\004\000" +
    "\002\020\005\000\002\020\003\000\002\047\002\000\002" +
    "\020\006\000\002\050\002\000\002\020\005\000\002\020" +
    "\003\000\002\020\004\000\002\051\002\000\002\020\010" +
    "\000\002\021\004\000\002\021\003\000\002\022\005\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\052\002\000\002\025\007\000\002\026\003\000" +
    "\002\026\005\000\002\026\003\000\002\027\003\000\002" +
    "\027\005\000\002\030\004\000\002\032\004\000\002\032" +
    "\003\000\002\032\003\000\002\053\002\000\002\031\010" +
    "\000\002\054\002\000\002\033\010\000\002\055\002\000" +
    "\002\034\005\000\002\056\002\000\002\035\014\000\002" +
    "\057\002\000\002\060\002\000\002\036\012\000\002\040" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\063\007\001\002\000\004\002\236\001" +
    "\002\000\006\002\uffb1\063\233\001\002\000\004\063\007" +
    "\001\002\000\006\025\011\064\012\001\002\000\004\002" +
    "\000\001\002\000\004\062\217\001\002\000\004\037\013" +
    "\001\002\000\004\040\014\001\002\000\036\025\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\043\ufff8\045\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\053\ufff8\054\ufff8\056\ufff8\057\ufff8\065\ufff8\001" +
    "\002\000\036\025\025\034\017\035\043\036\032\043\030" +
    "\045\023\046\035\047\041\050\026\053\046\054\016\056" +
    "\022\057\034\065\021\001\002\000\036\025\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\043\uffb4\045\uffb4\046\uffb4\047\uffb4\050" +
    "\uffb4\053\uffb4\054\uffb4\056\uffb4\057\uffb4\065\uffb4\001\002" +
    "\000\010\040\uffca\045\uffca\061\uffca\001\002\000\004\045" +
    "\207\001\002\000\006\025\173\045\uffb1\001\002\000\014" +
    "\025\uffdc\034\uffdc\035\uffdc\036\uffdc\047\uffdc\001\002\000" +
    "\042\002\uffd0\025\uffd0\034\uffd0\035\uffd0\036\uffd0\044\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\053\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\057\uffd0\063\uffd0\065\uffd0\001\002\000\042\002\uffd1" +
    "\025\uffd1\034\uffd1\035\uffd1\036\uffd1\044\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\063\uffd1\065\uffd1\001\002\000\010\037\uffc7\045\uffcd\060" +
    "\uffe7\001\002\000\004\037\uffbc\001\002\000\042\002\uffdd" +
    "\025\uffdd\034\uffdd\035\uffdd\036\uffdd\044\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\063\uffdd\065\uffdd\001\002\000\034\025\025\034\017\035" +
    "\043\036\032\044\uffb1\046\035\047\041\050\026\053\046" +
    "\054\016\056\022\057\034\065\021\001\002\000\042\002" +
    "\uffcf\025\uffcf\034\uffcf\035\uffcf\036\uffcf\044\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057" +
    "\uffcf\063\uffcf\065\uffcf\001\002\000\010\040\uffc8\045\uffc8" +
    "\061\uffc8\001\002\000\010\040\uffcc\045\uffcc\061\uffcc\001" +
    "\002\000\004\045\uffda\001\002\000\004\037\uffd6\001\002" +
    "\000\004\045\146\001\002\000\006\002\ufff7\063\ufff7\001" +
    "\002\000\010\040\uffce\045\uffce\061\uffce\001\002\000\004" +
    "\037\144\001\002\000\042\002\uffd8\025\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\044\uffd8\046\uffd8\047\uffd8\050\uffd8\053\uffd8" +
    "\054\uffd8\055\uffd8\056\uffd8\057\uffd8\063\uffd8\065\uffd8\001" +
    "\002\000\010\040\uffc9\045\uffc9\061\uffc9\001\002\000\004" +
    "\045\143\001\002\000\046\002\uffb1\025\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\044\uffb1\046\uffb1\047\uffb1\050\uffb1\051\126" +
    "\052\125\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\063" +
    "\uffb1\065\uffb1\001\002\000\004\037\uffb6\001\002\000\004" +
    "\037\050\001\002\000\004\025\051\001\002\000\006\060" +
    "\uffe7\062\ufff1\001\002\000\004\061\075\001\002\000\004" +
    "\060\uffe5\001\002\000\004\061\uffe2\001\002\000\004\061" +
    "\uffe3\001\002\000\004\060\057\001\002\000\014\025\061" +
    "\034\017\035\043\036\032\047\041\001\002\000\006\045" +
    "\uffe4\061\uffe4\001\002\000\012\037\uffc7\040\uffcd\045\uffcd" +
    "\061\uffcd\001\002\000\004\037\063\001\002\000\016\025" +
    "\061\034\017\035\043\036\032\040\uffb1\047\041\001\002" +
    "\000\004\040\074\001\002\000\004\040\uffc3\001\002\000" +
    "\006\040\uffc5\061\067\001\002\000\014\025\061\034\017" +
    "\035\043\036\032\047\041\001\002\000\004\040\uffc4\001" +
    "\002\000\006\040\uffc2\061\072\001\002\000\014\025\061" +
    "\034\017\035\043\036\032\047\041\001\002\000\004\040" +
    "\uffc1\001\002\000\010\040\uffc6\045\uffc6\061\uffc6\001\002" +
    "\000\014\025\061\034\017\035\043\036\032\047\041\001" +
    "\002\000\004\061\077\001\002\000\014\025\061\034\017" +
    "\035\043\036\032\047\041\001\002\000\004\040\101\001" +
    "\002\000\036\025\025\034\017\035\043\036\032\043\030" +
    "\045\023\046\035\047\041\050\026\053\046\054\016\056" +
    "\022\057\034\065\021\001\002\000\042\002\uffb5\025\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\044\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\063\uffb5" +
    "\065\uffb5\001\002\000\004\062\107\001\002\000\004\060" +
    "\105\001\002\000\014\025\061\034\017\035\043\036\032" +
    "\047\041\001\002\000\006\045\uffe6\061\uffe6\001\002\000" +
    "\014\026\115\027\112\030\116\031\113\032\110\001\002" +
    "\000\014\037\uffeb\040\uffeb\045\uffeb\060\uffeb\061\uffeb\001" +
    "\002\000\012\040\ufff0\045\ufff0\060\ufff0\061\ufff0\001\002" +
    "\000\014\037\uffee\040\uffee\045\uffee\060\uffee\061\uffee\001" +
    "\002\000\016\037\uffec\040\uffec\041\122\045\uffec\060\uffec" +
    "\061\uffec\001\002\000\014\037\uffea\040\uffea\045\uffea\060" +
    "\uffea\061\uffea\001\002\000\016\037\uffef\040\uffef\041\117" +
    "\045\uffef\060\uffef\061\uffef\001\002\000\014\037\uffed\040" +
    "\uffed\045\uffed\060\uffed\061\uffed\001\002\000\004\036\120" +
    "\001\002\000\004\042\121\001\002\000\014\037\uffe9\040" +
    "\uffe9\045\uffe9\060\uffe9\061\uffe9\001\002\000\004\036\123" +
    "\001\002\000\004\042\124\001\002\000\014\037\uffe8\040" +
    "\uffe8\045\uffe8\060\uffe8\061\uffe8\001\002\000\004\043\uffb8" +
    "\001\002\000\004\037\uffba\001\002\000\042\002\uffbe\025" +
    "\uffbe\034\uffbe\035\uffbe\036\uffbe\044\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\063" +
    "\uffbe\065\uffbe\001\002\000\046\002\uffb1\025\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\044\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\126\052\125\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\063\uffb1\065\uffb1\001\002\000\042\002\uffc0\025\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\044\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\063\uffc0\065" +
    "\uffc0\001\002\000\042\002\uffbd\025\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\044\uffbd\046\uffbd\047\uffbd\050\uffbd\053\uffbd\054" +
    "\uffbd\055\uffbd\056\uffbd\057\uffbd\063\uffbd\065\uffbd\001\002" +
    "\000\042\002\uffbf\025\uffbf\034\uffbf\035\uffbf\036\uffbf\044" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\056\uffbf\057\uffbf\063\uffbf\065\uffbf\001\002\000\004\037" +
    "\135\001\002\000\014\025\061\034\017\035\043\036\032" +
    "\047\041\001\002\000\004\040\137\001\002\000\004\043" +
    "\030\001\002\000\046\002\uffb9\025\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\044\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052" +
    "\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\063\uffb9" +
    "\065\uffb9\001\002\000\004\043\030\001\002\000\042\002" +
    "\uffb7\025\uffb7\034\uffb7\035\uffb7\036\uffb7\044\uffb7\046\uffb7" +
    "\047\uffb7\050\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\063\uffb7\065\uffb7\001\002\000\042\002\uffdf\025\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\044\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\063\uffdf" +
    "\065\uffdf\001\002\000\004\040\145\001\002\000\010\040" +
    "\uffcb\045\uffcb\061\uffcb\001\002\000\042\002\uffe1\025\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\044\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\063\uffe1" +
    "\065\uffe1\001\002\000\004\037\150\001\002\000\014\025" +
    "\061\034\017\035\043\036\032\047\041\001\002\000\004" +
    "\040\152\001\002\000\004\045\153\001\002\000\042\002" +
    "\uffd5\025\uffd5\034\uffd5\035\uffd5\036\uffd5\044\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\063\uffd5\065\uffd5\001\002\000\004\045\155\001\002" +
    "\000\042\002\uffd9\025\uffd9\034\uffd9\035\uffd9\036\uffd9\044" +
    "\uffd9\046\uffd9\047\uffd9\050\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\057\uffd9\063\uffd9\065\uffd9\001\002\000\034\025" +
    "\025\034\017\035\043\036\032\044\uffb1\046\035\047\041" +
    "\050\026\053\046\054\016\056\022\057\034\065\021\001" +
    "\002\000\004\044\161\001\002\000\004\044\uffd3\001\002" +
    "\000\046\002\uffd2\025\uffd2\034\uffd2\035\uffd2\036\uffd2\044" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\057\uffd2\063\uffd2\065\uffd2\001" +
    "\002\000\004\044\uffd4\001\002\000\004\037\164\001\002" +
    "\000\014\025\061\034\017\035\043\036\032\047\041\001" +
    "\002\000\004\040\166\001\002\000\004\043\030\001\002" +
    "\000\046\002\uffbb\025\uffbb\034\uffbb\035\uffbb\036\uffbb\044" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\057\uffbb\063\uffbb\065\uffbb\001" +
    "\002\000\014\025\061\034\017\035\043\036\032\047\041" +
    "\001\002\000\004\045\172\001\002\000\042\002\uffdb\025" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\044\uffdb\046\uffdb\047\uffdb" +
    "\050\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\063" +
    "\uffdb\065\uffdb\001\002\000\004\062\ufff1\001\002\000\004" +
    "\045\206\001\002\000\010\045\ufff6\060\uffe5\061\201\001" +
    "\002\000\006\040\ufff4\045\ufff4\001\002\000\004\045\200" +
    "\001\002\000\042\002\uffde\025\uffde\034\uffde\035\uffde\036" +
    "\uffde\044\uffde\046\uffde\047\uffde\050\uffde\053\uffde\054\uffde" +
    "\055\uffde\056\uffde\057\uffde\063\uffde\065\uffde\001\002\000" +
    "\004\025\173\001\002\000\010\040\ufff3\045\ufff3\061\204" +
    "\001\002\000\006\040\ufff5\045\ufff5\001\002\000\004\025" +
    "\173\001\002\000\006\040\ufff2\045\ufff2\001\002\000\042" +
    "\002\uffe0\025\uffe0\034\uffe0\035\uffe0\036\uffe0\044\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\063\uffe0\065\uffe0\001\002\000\042\002\uffd7\025" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\044\uffd7\046\uffd7\047\uffd7" +
    "\050\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\063" +
    "\uffd7\065\uffd7\001\002\000\036\025\025\034\017\035\043" +
    "\036\032\043\030\045\023\046\035\047\041\050\026\053" +
    "\046\054\016\056\022\057\034\065\021\001\002\000\004" +
    "\055\212\001\002\000\004\037\uffb3\001\002\000\004\037" +
    "\214\001\002\000\014\025\061\034\017\035\043\036\032" +
    "\047\041\001\002\000\004\040\216\001\002\000\004\045" +
    "\uffb2\001\002\000\014\026\115\027\112\030\116\031\113" +
    "\032\110\001\002\000\004\037\ufffb\001\002\000\004\037" +
    "\222\001\002\000\006\025\173\040\uffb1\001\002\000\004" +
    "\040\225\001\002\000\006\040\ufff6\061\201\001\002\000" +
    "\036\025\ufffa\034\ufffa\035\ufffa\036\ufffa\043\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\053\ufffa\054\ufffa\056\ufffa\057" +
    "\ufffa\065\ufffa\001\002\000\036\025\025\034\017\035\043" +
    "\036\032\043\030\045\023\046\035\047\041\050\026\053" +
    "\046\054\016\056\022\057\034\065\021\001\002\000\006" +
    "\002\ufff9\063\ufff9\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\ufffe\001\002\000\006\002\uffb1\063\233\001\002" +
    "\000\004\025\011\001\002\000\004\002\ufffc\001\002\000" +
    "\004\002\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\012\002\003\004\005\005\004\006\007\001" +
    "\001\000\002\001\001\000\010\003\230\004\231\040\233" +
    "\001\001\000\010\004\005\005\004\006\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\014\001\001\000" +
    "\030\015\043\017\036\020\023\022\030\023\035\024\037" +
    "\025\032\030\026\031\044\035\041\036\017\001\001\000" +
    "\004\057\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\173\010\174\016\176\040\175\001\001\000" +
    "\004\047\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\103\052\061\001\001\000\004\053\162\001" +
    "\001\000\002\001\001\000\030\015\043\020\155\021\156" +
    "\023\035\024\037\025\032\030\026\031\044\035\041\036" +
    "\017\040\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\153\001\001\000\004\051" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\032\130\033\127\034\126" +
    "\040\131\001\001\000\004\056\046\001\001\000\002\001" +
    "\001\000\012\010\052\014\051\015\054\016\053\001\001" +
    "\000\006\044\102\045\103\001\001\000\002\001\001\000" +
    "\004\046\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\057\024\037\025\032\001" +
    "\001\000\002\001\001\000\004\052\061\001\001\000\002" +
    "\001\001\000\014\023\065\024\037\025\032\026\063\040" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\023\070\024\037\025\032\027\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\070" +
    "\024\037\025\032\027\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\075\024\037\025\032\001\001" +
    "\000\002\001\001\000\010\023\077\024\037\025\032\001" +
    "\001\000\002\001\001\000\030\015\043\017\101\020\023" +
    "\022\030\023\035\024\037\025\032\030\026\031\044\035" +
    "\041\036\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\105\024\037\025\032\001" +
    "\001\000\002\001\001\000\006\011\110\012\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\140\001\001\000\004\054\133\001\001\000" +
    "\002\001\001\000\012\032\132\033\127\034\126\040\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\135\024\037\025\032" +
    "\001\001\000\002\001\001\000\004\022\137\001\001\000" +
    "\002\001\001\000\004\022\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\023\150\024\037" +
    "\025\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\015\043\020\155\021\161\023\035\024\037\025\032\030" +
    "\026\031\044\035\041\036\017\040\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\164\024\037\025\032" +
    "\001\001\000\002\001\001\000\004\022\166\001\001\000" +
    "\002\001\001\000\010\023\170\024\037\025\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\102\001" +
    "\001\000\002\001\001\000\004\046\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\201\013\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\201\013\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\015\043\017\210" +
    "\020\023\022\030\023\035\024\037\025\032\030\026\031" +
    "\044\035\041\036\017\001\001\000\002\001\001\000\004" +
    "\060\212\001\001\000\002\001\001\000\010\023\214\024" +
    "\037\025\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\217\012\113\001\001\000\004\041\220\001" +
    "\001\000\002\001\001\000\010\007\222\010\223\040\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\225\001\001\000\030\015\043\017\226\020\023\022\030" +
    "\023\035\024\037\025\032\030\026\031\044\035\041\036" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\234\004\231\040\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


	CodeLexer lex;

	@SuppressWarnings("deprecation")
	public parser(CodeLexer lex) {
		this.lex = lex;
		this.symbolFactory = new DefaultSymbolFactory();
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	ListaTablasSimbolos tablas = new ListaTablasSimbolos();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= inicio 
            {
              Object RESULT =null;
		 tablas.guardar("test/resultado-sintactico.txt"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= funcion inicio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= funcion_main bolsa_navidenna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bolsa_navidenna ::= funcion bolsa_navidenna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsa_navidenna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bolsa_navidenna ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsa_navidenna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.tabla(new Funcion(nf, tf)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 tablas.agregarParametros("parametro"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= FUNCTION PERSONA DOS_PUNTOS tipo NT$0 ABRECUENTO parametros CIERRECUENTO NT$1 bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
 tablas.tabla(new Funcion()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion_main ::= FUNCTION MAIN ABRECUENTO CIERRECUENTO NT$2 bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_main",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= parametro COMA mas_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // mas_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mas_parametros ::= parametro COMA mas_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = np; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro ::= PERSONA NT$3 DOS_PUNTOS tipo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tablas.simbolo(new Parametro(np, tp)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= PAPA_NOEL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= SANTA_CLAUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= SAN_NICOLAS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= NINO_JESUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= COLACHO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= array 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // array ::= PAPA_NOEL ABREEMPAQUE L_PAPA_NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // array ::= NINO_JESUS ABREEMPAQUE L_PAPA_NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Object RESULT =null;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new LexemaNombre("asignacion", nv)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignar_variable_declarada ::= PERSONA NT$4 ENTREGA regalo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable_declarada",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$5 ::= 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new LexemaNombre("declaracion_asignacion", np)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declarar_asignar_variable ::= parametro NT$5 ENTREGA regalo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_asignar_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignar_variable ::= asignar_variable_declarada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignar_variable ::= declarar_asignar_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // linea_codigo ::= regalo FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // linea_codigo ::= LOCAL parametros FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // linea_codigo ::= asignar_variable_declarada FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // linea_codigo ::= LOCAL declarar_asignar_variable FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // linea_codigo ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$6 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // linea_codigo ::= ENVIA NT$6 regalo FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$7 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // linea_codigo ::= CORTA NT$7 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // linea_codigo ::= ciclo_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // linea_codigo ::= ciclo_do_until FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$8 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // linea_codigo ::= NARRA NT$8 ABRECUENTO regalo CIERRECUENTO FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // codigo_multilinea ::= linea_codigo codigo_multilinea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_multilinea",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // codigo_multilinea ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_multilinea",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // codigo_contenido ::= ABREREGALO codigo_multilinea CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_contenido",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bloque_codigo ::= linea_codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque_codigo ::= FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque_codigo ::= codigo_contenido 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // regalo ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // regalo ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // regalo ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // regalo ::= ESCUCHA ABRECUENTO CIERRECUENTO 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literal ::= L_COLACHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literal ::= L_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= L_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$9 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new LexemaNombre("llamada_funcion", f)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // llamada_funcion ::= PERSONA NT$9 ABRECUENTO expresiones CIERRECUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresiones ::= regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresiones ::= regalo COMA mas_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresiones ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // mas_expresiones ::= regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // mas_expresiones ::= regalo COMA mas_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // condicional ::= condicional_if condicionales_elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condicionales_elif ::= condicional_elif condicionales_elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // condicionales_elif ::= condicional_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicionales_elif ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$10 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicional_if ::= ELFO NT$10 ABRECUENTO regalo CIERRECUENTO codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_if",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$11 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicional_elif ::= HADA NT$11 ABRECUENTO regalo CIERRECUENTO codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_elif",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$12 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicional_else ::= DUENDE NT$12 codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_else",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$13 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ciclo_for ::= ENVUELVE NT$13 ABRECUENTO asignar_variable COMA regalo COMA regalo CIERRECUENTO bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$14 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(u)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ciclo_do_until ::= HACE NT$14 bloque_codigo REVISA NT$15 ABRECUENTO regalo CIERRECUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_do_until",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
