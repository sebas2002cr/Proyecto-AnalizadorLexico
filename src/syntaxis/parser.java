
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package syntaxis;

import java_cup.runtime.*;
import lexical.CodeLexer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\004\000\002\003\004\000\002\003\003" +
    "\000\002\045\002\000\002\046\002\000\002\004\014\000" +
    "\002\047\002\000\002\005\010\000\002\007\003\000\002" +
    "\007\005\000\002\007\003\000\002\013\003\000\002\013" +
    "\005\000\002\010\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\006\000\002\012\006\000\002" +
    "\050\002\000\002\015\006\000\002\051\002\000\002\016" +
    "\006\000\002\014\003\000\002\014\003\000\002\020\004" +
    "\000\002\052\002\000\002\020\006\000\002\020\004\000" +
    "\002\020\005\000\002\020\003\000\002\053\002\000\002" +
    "\020\006\000\002\054\002\000\002\020\005\000\002\020" +
    "\003\000\002\020\004\000\002\055\002\000\002\020\010" +
    "\000\002\021\004\000\002\021\003\000\002\022\005\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\056\002\000\002\025\007\000" +
    "\002\032\003\000\002\032\005\000\002\032\003\000\002" +
    "\033\003\000\002\033\005\000\002\027\004\000\002\027" +
    "\004\000\002\027\006\000\002\030\004\000\002\030\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\034\004" +
    "\000\002\036\004\000\002\036\003\000\002\036\003\000" +
    "\002\057\002\000\002\035\010\000\002\060\002\000\002" +
    "\037\010\000\002\061\002\000\002\040\005\000\002\062" +
    "\002\000\002\041\014\000\002\063\002\000\002\064\002" +
    "\000\002\042\012\000\002\044\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\004\064\007\001\002\000\004\002\237\001" +
    "\002\000\006\002\uff9f\064\234\001\002\000\004\064\007" +
    "\001\002\000\006\025\011\065\012\001\002\000\004\002" +
    "\000\001\002\000\004\063\220\001\002\000\004\040\013" +
    "\001\002\000\004\041\014\001\002\000\040\025\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\044\ufff8\046\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\054\ufff8\055\ufff8\057\ufff8\060\ufff8\066" +
    "\ufff8\001\002\000\040\025\025\034\017\035\045\036\032" +
    "\037\041\044\030\046\023\047\035\050\042\051\026\054" +
    "\047\055\016\057\022\060\034\066\021\001\002\000\040" +
    "\025\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\044\uffa2\046" +
    "\uffa2\047\uffa2\050\uffa2\051\uffa2\054\uffa2\055\uffa2\057\uffa2" +
    "\060\uffa2\066\uffa2\001\002\000\010\041\uffca\046\uffca\062" +
    "\uffca\001\002\000\004\046\210\001\002\000\006\025\173" +
    "\046\uff9f\001\002\000\016\025\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\050\uffdc\001\002\000\044\002\uffd0\025\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\045\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\064\uffd0\066\uffd0\001\002\000\044\002\uffd1\025\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\045\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\064" +
    "\uffd1\066\uffd1\001\002\000\010\040\uffc6\046\uffcd\061\uffe8" +
    "\001\002\000\004\040\uffaa\001\002\000\044\002\uffdd\025" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\045\uffdd\047\uffdd" +
    "\050\uffdd\051\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060" +
    "\uffdd\064\uffdd\066\uffdd\001\002\000\036\025\025\034\017" +
    "\035\045\036\032\037\041\045\uff9f\047\035\050\042\051" +
    "\026\054\047\055\016\057\022\060\034\066\021\001\002" +
    "\000\044\002\uffcf\025\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\045\uffcf\047\uffcf\050\uffcf\051\uffcf\054\uffcf\055\uffcf" +
    "\056\uffcf\057\uffcf\060\uffcf\064\uffcf\066\uffcf\001\002\000" +
    "\010\041\uffc8\046\uffc8\062\uffc8\001\002\000\010\041\uffcc" +
    "\046\uffcc\062\uffcc\001\002\000\004\046\uffda\001\002\000" +
    "\004\040\uffd6\001\002\000\004\046\146\001\002\000\006" +
    "\002\ufff7\064\ufff7\001\002\000\010\041\uffce\046\uffce\062" +
    "\uffce\001\002\000\010\041\uffc7\046\uffc7\062\uffc7\001\002" +
    "\000\004\040\144\001\002\000\044\002\uffd8\025\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\045\uffd8\047\uffd8\050\uffd8" +
    "\051\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\064" +
    "\uffd8\066\uffd8\001\002\000\004\046\143\001\002\000\010" +
    "\041\uffc9\046\uffc9\062\uffc9\001\002\000\050\002\uff9f\025" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\045\uff9f\047\uff9f" +
    "\050\uff9f\051\uff9f\052\126\053\125\054\uff9f\055\uff9f\056" +
    "\uff9f\057\uff9f\060\uff9f\064\uff9f\066\uff9f\001\002\000\004" +
    "\040\uffa4\001\002\000\004\040\051\001\002\000\004\025" +
    "\052\001\002\000\006\061\uffe8\063\105\001\002\000\004" +
    "\062\076\001\002\000\004\061\uffe6\001\002\000\004\062" +
    "\uffe4\001\002\000\004\062\uffe3\001\002\000\004\061\060" +
    "\001\002\000\016\025\061\034\017\035\045\036\032\037" +
    "\041\050\042\001\002\000\012\040\uffc6\041\uffcd\046\uffcd" +
    "\062\uffcd\001\002\000\006\046\uffe5\062\uffe5\001\002\000" +
    "\004\040\064\001\002\000\020\025\061\034\017\035\045" +
    "\036\032\037\041\041\uff9f\050\042\001\002\000\004\041" +
    "\075\001\002\000\004\041\uffc2\001\002\000\006\041\uffc4" +
    "\062\070\001\002\000\016\025\061\034\017\035\045\036" +
    "\032\037\041\050\042\001\002\000\004\041\uffc3\001\002" +
    "\000\006\041\uffc1\062\073\001\002\000\016\025\061\034" +
    "\017\035\045\036\032\037\041\050\042\001\002\000\004" +
    "\041\uffc0\001\002\000\010\041\uffc5\046\uffc5\062\uffc5\001" +
    "\002\000\016\025\061\034\017\035\045\036\032\037\041" +
    "\050\042\001\002\000\004\062\100\001\002\000\016\025" +
    "\061\034\017\035\045\036\032\037\041\050\042\001\002" +
    "\000\004\041\102\001\002\000\040\025\025\034\017\035" +
    "\045\036\032\037\041\044\030\046\023\047\035\050\042" +
    "\051\026\054\047\055\016\057\022\060\034\066\021\001" +
    "\002\000\044\002\uffa3\025\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\037\uffa3\045\uffa3\047\uffa3\050\uffa3\051\uffa3\054\uffa3\055" +
    "\uffa3\056\uffa3\057\uffa3\060\uffa3\064\uffa3\066\uffa3\001\002" +
    "\000\004\061\123\001\002\000\014\026\114\027\110\030" +
    "\112\031\111\032\106\001\002\000\014\040\uffec\041\uffec" +
    "\046\uffec\061\uffec\062\uffec\001\002\000\012\041\ufff1\046" +
    "\ufff1\061\ufff1\062\ufff1\001\002\000\014\040\uffef\041\uffef" +
    "\046\uffef\061\uffef\062\uffef\001\002\000\016\040\uffed\041" +
    "\uffed\042\120\046\uffed\061\uffed\062\uffed\001\002\000\014" +
    "\040\uffee\041\uffee\046\uffee\061\uffee\062\uffee\001\002\000" +
    "\014\040\uffeb\041\uffeb\046\uffeb\061\uffeb\062\uffeb\001\002" +
    "\000\016\040\ufff0\041\ufff0\042\115\046\ufff0\061\ufff0\062" +
    "\ufff0\001\002\000\004\036\116\001\002\000\004\043\117" +
    "\001\002\000\014\040\uffea\041\uffea\046\uffea\061\uffea\062" +
    "\uffea\001\002\000\004\036\121\001\002\000\004\043\122" +
    "\001\002\000\014\040\uffe9\041\uffe9\046\uffe9\061\uffe9\062" +
    "\uffe9\001\002\000\016\025\061\034\017\035\045\036\032" +
    "\037\041\050\042\001\002\000\006\046\uffe7\062\uffe7\001" +
    "\002\000\004\044\uffa6\001\002\000\004\040\uffa8\001\002" +
    "\000\044\002\uffac\025\uffac\034\uffac\035\uffac\036\uffac\037" +
    "\uffac\045\uffac\047\uffac\050\uffac\051\uffac\054\uffac\055\uffac" +
    "\056\uffac\057\uffac\060\uffac\064\uffac\066\uffac\001\002\000" +
    "\050\002\uff9f\025\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f" +
    "\045\uff9f\047\uff9f\050\uff9f\051\uff9f\052\126\053\125\054" +
    "\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\064\uff9f\066\uff9f" +
    "\001\002\000\044\002\uffae\025\uffae\034\uffae\035\uffae\036" +
    "\uffae\037\uffae\045\uffae\047\uffae\050\uffae\051\uffae\054\uffae" +
    "\055\uffae\056\uffae\057\uffae\060\uffae\064\uffae\066\uffae\001" +
    "\002\000\044\002\uffab\025\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\045\uffab\047\uffab\050\uffab\051\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\060\uffab\064\uffab\066\uffab\001\002" +
    "\000\044\002\uffad\025\uffad\034\uffad\035\uffad\036\uffad\037" +
    "\uffad\045\uffad\047\uffad\050\uffad\051\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\064\uffad\066\uffad\001\002\000" +
    "\004\040\135\001\002\000\016\025\061\034\017\035\045" +
    "\036\032\037\041\050\042\001\002\000\004\041\137\001" +
    "\002\000\004\044\030\001\002\000\050\002\uffa7\025\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\045\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7" +
    "\057\uffa7\060\uffa7\064\uffa7\066\uffa7\001\002\000\004\044" +
    "\030\001\002\000\044\002\uffa5\025\uffa5\034\uffa5\035\uffa5" +
    "\036\uffa5\037\uffa5\045\uffa5\047\uffa5\050\uffa5\051\uffa5\054" +
    "\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\064\uffa5\066\uffa5" +
    "\001\002\000\044\002\uffdf\025\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\045\uffdf\047\uffdf\050\uffdf\051\uffdf\054\uffdf" +
    "\055\uffdf\056\uffdf\057\uffdf\060\uffdf\064\uffdf\066\uffdf\001" +
    "\002\000\004\041\145\001\002\000\010\041\uffcb\046\uffcb" +
    "\062\uffcb\001\002\000\044\002\uffe2\025\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\037\uffe2\045\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\064\uffe2\066" +
    "\uffe2\001\002\000\004\040\150\001\002\000\016\025\061" +
    "\034\017\035\045\036\032\037\041\050\042\001\002\000" +
    "\004\041\152\001\002\000\004\046\153\001\002\000\044" +
    "\002\uffd5\025\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\045" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\054\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\060\uffd5\064\uffd5\066\uffd5\001\002\000\004\046" +
    "\155\001\002\000\044\002\uffd9\025\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\064\uffd9\066\uffd9" +
    "\001\002\000\036\025\025\034\017\035\045\036\032\037" +
    "\041\045\uff9f\047\035\050\042\051\026\054\047\055\016" +
    "\057\022\060\034\066\021\001\002\000\004\045\161\001" +
    "\002\000\004\045\uffd3\001\002\000\050\002\uffd2\025\uffd2" +
    "\034\uffd2\035\uffd2\036\uffd2\037\uffd2\045\uffd2\047\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\060\uffd2\064\uffd2\066\uffd2\001\002\000\004\045" +
    "\uffd4\001\002\000\004\040\164\001\002\000\016\025\061" +
    "\034\017\035\045\036\032\037\041\050\042\001\002\000" +
    "\004\041\166\001\002\000\004\044\030\001\002\000\050" +
    "\002\uffa9\025\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\045" +
    "\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\056\uffa9\057\uffa9\060\uffa9\064\uffa9\066\uffa9\001" +
    "\002\000\016\025\061\034\017\035\045\036\032\037\041" +
    "\050\042\001\002\000\004\046\172\001\002\000\044\002" +
    "\uffdb\025\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\045\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\054\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\064\uffdb\066\uffdb\001\002\000\004\063\105" +
    "\001\002\000\004\046\uffe1\001\002\000\010\046\ufff6\061" +
    "\uffe6\062\201\001\002\000\006\041\ufff4\046\ufff4\001\002" +
    "\000\004\046\200\001\002\000\044\002\uffde\025\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\045\uffde\047\uffde\050\uffde" +
    "\051\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\064" +
    "\uffde\066\uffde\001\002\000\004\025\173\001\002\000\010" +
    "\041\ufff3\046\ufff3\062\204\001\002\000\006\041\ufff5\046" +
    "\ufff5\001\002\000\004\025\173\001\002\000\006\041\ufff2" +
    "\046\ufff2\001\002\000\004\046\207\001\002\000\044\002" +
    "\uffe0\025\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\045\uffe0" +
    "\047\uffe0\050\uffe0\051\uffe0\054\uffe0\055\uffe0\056\uffe0\057" +
    "\uffe0\060\uffe0\064\uffe0\066\uffe0\001\002\000\044\002\uffd7" +
    "\025\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\045\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7" +
    "\060\uffd7\064\uffd7\066\uffd7\001\002\000\040\025\025\034" +
    "\017\035\045\036\032\037\041\044\030\046\023\047\035" +
    "\050\042\051\026\054\047\055\016\057\022\060\034\066" +
    "\021\001\002\000\004\056\213\001\002\000\004\040\uffa1" +
    "\001\002\000\004\040\215\001\002\000\016\025\061\034" +
    "\017\035\045\036\032\037\041\050\042\001\002\000\004" +
    "\041\217\001\002\000\004\046\uffa0\001\002\000\014\026" +
    "\114\027\110\030\112\031\111\032\106\001\002\000\004" +
    "\040\ufffb\001\002\000\004\040\223\001\002\000\006\025" +
    "\173\041\uff9f\001\002\000\004\041\226\001\002\000\006" +
    "\041\ufff6\062\201\001\002\000\040\025\ufffa\034\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\044\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\054\ufffa\055\ufffa\057\ufffa\060\ufffa\066\ufffa\001" +
    "\002\000\040\025\025\034\017\035\045\036\032\037\041" +
    "\044\030\046\023\047\035\050\042\051\026\054\047\055" +
    "\016\057\022\060\034\066\021\001\002\000\006\002\ufff9" +
    "\064\ufff9\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\ufffe\001\002\000\006\002\uff9f\064\234\001\002\000\004" +
    "\025\011\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\235\000\012\002\003\004\005\005\004\006\007\001" +
    "\001\000\002\001\001\000\010\003\231\004\232\044\234" +
    "\001\001\000\010\004\005\005\004\006\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\014\001\001\000" +
    "\030\015\043\017\036\020\023\022\030\023\035\024\037" +
    "\025\032\034\026\035\045\041\042\042\017\001\001\000" +
    "\004\063\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\173\010\174\016\176\044\175\001\001\000" +
    "\004\053\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\103\056\062\001\001\000\004\057\162\001" +
    "\001\000\002\001\001\000\030\015\043\020\155\021\156" +
    "\023\035\024\037\025\032\034\026\035\045\041\042\042" +
    "\017\044\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\153\001\001\000\004\055" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\036\130" +
    "\037\127\040\126\044\131\001\001\000\004\062\047\001" +
    "\001\000\002\001\001\000\012\010\053\014\052\015\054" +
    "\016\055\001\001\000\004\050\103\001\001\000\002\001" +
    "\001\000\004\051\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\023\061\024\037\025" +
    "\032\001\001\000\004\056\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\023\066\024\037\025\032\032" +
    "\064\044\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\071\024\037\025\032\033" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\023\071\024\037\025\032\033\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\076\024\037\025\032" +
    "\001\001\000\002\001\001\000\010\023\100\024\037\025" +
    "\032\001\001\000\002\001\001\000\030\015\043\017\102" +
    "\020\023\022\030\023\035\024\037\025\032\034\026\035" +
    "\045\041\042\042\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\106\012\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\123\024\037\025\032\001\001\000\002\001\001\000\004" +
    "\061\140\001\001\000\004\060\133\001\001\000\002\001" +
    "\001\000\012\036\132\037\127\040\126\044\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\135\024\037\025\032\001\001" +
    "\000\002\001\001\000\004\022\137\001\001\000\002\001" +
    "\001\000\004\022\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\150\024\037\025\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\015\043" +
    "\020\155\021\161\023\035\024\037\025\032\034\026\035" +
    "\045\041\042\042\017\044\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\164\024\037\025\032\001\001" +
    "\000\002\001\001\000\004\022\166\001\001\000\002\001" +
    "\001\000\010\023\170\024\037\025\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\205\001\001\000\004\051\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\201\013" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\201\013\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\015\043" +
    "\017\211\020\023\022\030\023\035\024\037\025\032\034" +
    "\026\035\045\041\042\042\017\001\001\000\002\001\001" +
    "\000\004\064\213\001\001\000\002\001\001\000\010\023" +
    "\215\024\037\025\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\220\012\112\001\001\000\004\045" +
    "\221\001\001\000\002\001\001\000\010\007\223\010\224" +
    "\044\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\226\001\001\000\030\015\043\017\227\020\023" +
    "\022\030\023\035\024\037\025\032\034\026\035\045\041" +
    "\042\042\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\235\004\232\044\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    CodeLexer lex;

	@SuppressWarnings("deprecation")
	public parser(CodeLexer lex) {
		this.lex = lex;
		this.symbolFactory = new DefaultSymbolFactory();
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	ListaTablasSimbolos tablas = new ListaTablasSimbolos();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= inicio 
            {
              Object RESULT =null;
		 tablas.guardar("test/resultado-sintactico.txt"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= funcion inicio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= funcion_main bolsa_navidenna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bolsa_navidenna ::= funcion bolsa_navidenna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsa_navidenna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bolsa_navidenna ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsa_navidenna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.tabla(new Funcion(nf, tf)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 tablas.parametro("parametro"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= FUNCTION PERSONA DOS_PUNTOS tipo NT$0 ABRECUENTO parametros CIERRECUENTO NT$1 bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
 tablas.tabla(new Funcion()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion_main ::= FUNCTION MAIN ABRECUENTO CIERRECUENTO NT$2 bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_main",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= parametro COMA mas_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // mas_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mas_parametros ::= parametro COMA mas_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro ::= PERSONA DOS_PUNTOS tipo 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tablas.simbolo(new Parametro(np, tp)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= PAPA_NOEL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= SANTA_CLAUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= SAN_NICOLAS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= NINO_JESUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= COLACHO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= array 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // array ::= PAPA_NOEL ABREEMPAQUE L_PAPA_NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // array ::= NINO_JESUS ABREEMPAQUE L_PAPA_NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$3 ::= 
            {
              Object RESULT =null;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.parametro("asignacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignar_variable_declarada ::= PERSONA NT$3 ENTREGA regalo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable_declarada",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.parametro("declaracion_asignacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declarar_asignar_variable ::= parametro NT$4 ENTREGA regalo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_asignar_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignar_variable ::= asignar_variable_declarada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignar_variable ::= declarar_asignar_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // linea_codigo ::= regalo FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              Object RESULT =null;
 tablas.parametro("declaracion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // linea_codigo ::= LOCAL parametros NT$5 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // linea_codigo ::= asignar_variable_declarada FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // linea_codigo ::= LOCAL declarar_asignar_variable FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // linea_codigo ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$6 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // linea_codigo ::= ENVIA NT$6 regalo FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$7 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // linea_codigo ::= CORTA NT$7 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // linea_codigo ::= ciclo_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // linea_codigo ::= ciclo_do_until FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$8 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // linea_codigo ::= NARRA NT$8 ABRECUENTO regalo CIERRECUENTO FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // codigo_multilinea ::= linea_codigo codigo_multilinea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_multilinea",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // codigo_multilinea ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_multilinea",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // codigo_contenido ::= ABREREGALO codigo_multilinea CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_contenido",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bloque_codigo ::= linea_codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque_codigo ::= FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque_codigo ::= codigo_contenido 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // regalo ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // regalo ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // regalo ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // regalo ::= ESCUCHA ABRECUENTO CIERRECUENTO 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literal ::= L_COLACHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literal ::= L_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= L_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= L_SANTA_CLAUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$9 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new LexemaNombre("llamada_funcion", f)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // llamada_funcion ::= PERSONA NT$9 ABRECUENTO expresiones CIERRECUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresiones ::= regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresiones ::= regalo COMA mas_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresiones ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // mas_expresiones ::= regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_expresiones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // mas_expresiones ::= regalo COMA mas_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_expresiones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresiones_AL ::= tokens _expresiones_AL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_AL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresiones_AL ::= llamada_funcion _expresiones_AL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_AL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresiones_AL ::= ABRECUENTO expresiones_AL CIERRECUENTO _expresiones_AL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_AL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // _expresiones_AL ::= _operadores_aritmeticos expresiones_AL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_expresiones_AL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _expresiones_AL ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_expresiones_AL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // _operadores_aritmeticos ::= RUDOLPH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // _operadores_aritmeticos ::= DASHER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // _operadores_aritmeticos ::= COMET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // _operadores_aritmeticos ::= VIXEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // _operadores_aritmeticos ::= TOTIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // _operadores_aritmeticos ::= RENILLO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // _operadores_aritmeticos ::= GRINCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // _operadores_aritmeticos ::= QUIEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tokens ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tokens ::= L_COLACHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tokens ::= L_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tokens ::= L_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condicional ::= condicional_if condicionales_elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicionales_elif ::= condicional_elif condicionales_elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicionales_elif ::= condicional_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condicionales_elif ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$10 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicional_if ::= ELFO NT$10 ABRECUENTO regalo CIERRECUENTO codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_if",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$11 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // condicional_elif ::= HADA NT$11 ABRECUENTO regalo CIERRECUENTO codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_elif",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$12 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // condicional_else ::= DUENDE NT$12 codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_else",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$13 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ciclo_for ::= ENVUELVE NT$13 ABRECUENTO asignar_variable COMA regalo COMA regalo CIERRECUENTO bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$14 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(u)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ciclo_do_until ::= HACE NT$14 bloque_codigo REVISA NT$15 ABRECUENTO regalo CIERRECUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_do_until",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
