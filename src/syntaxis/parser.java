
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package syntaxis;

import java_cup.runtime.*;
import lexical.CodeLexer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\004\000\002\003\004\000\002\003\003" +
    "\000\002\045\002\000\002\046\002\000\002\004\014\000" +
    "\002\047\002\000\002\005\010\000\002\007\003\000\002" +
    "\007\005\000\002\007\003\000\002\013\003\000\002\013" +
    "\005\000\002\050\002\000\002\010\006\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\006\000\002" +
    "\012\006\000\002\051\002\000\002\015\006\000\002\052" +
    "\002\000\002\016\006\000\002\014\003\000\002\014\003" +
    "\000\002\020\004\000\002\020\005\000\002\020\004\000" +
    "\002\020\005\000\002\020\003\000\002\053\002\000\002" +
    "\020\006\000\002\054\002\000\002\020\005\000\002\020" +
    "\003\000\002\020\004\000\002\055\002\000\002\020\010" +
    "\000\002\021\004\000\002\021\003\000\002\022\005\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\032\003\000\002\032\005\000\002\032\003" +
    "\000\002\033\003\000\002\033\005\000\002\027\004\000" +
    "\002\027\004\000\002\027\006\000\002\030\004\000\002" +
    "\030\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\034\004\000\002\036\004\000\002" +
    "\036\003\000\002\036\003\000\002\056\002\000\002\035" +
    "\010\000\002\057\002\000\002\037\010\000\002\060\002" +
    "\000\002\040\005\000\002\061\002\000\002\041\014\000" +
    "\002\062\002\000\002\063\002\000\002\042\012\000\002" +
    "\044\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\063\007\001\002\000\004\002\220\001" +
    "\002\000\006\002\uffa7\063\215\001\002\000\004\063\007" +
    "\001\002\000\006\025\011\064\012\001\002\000\004\002" +
    "\000\001\002\000\004\062\201\001\002\000\004\037\013" +
    "\001\002\000\004\040\014\001\002\000\030\025\ufff8\043" +
    "\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\053\ufff8\054\ufff8" +
    "\056\ufff8\057\ufff8\065\ufff8\001\002\000\030\025\024\043" +
    "\027\045\022\046\033\047\037\050\025\053\043\054\016" +
    "\056\021\057\032\065\020\001\002\000\030\025\uffaa\043" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\053\uffaa\054\uffaa" +
    "\056\uffaa\057\uffaa\065\uffaa\001\002\000\004\045\171\001" +
    "\002\000\006\025\155\045\uffa7\001\002\000\006\025\uffdc" +
    "\047\uffdc\001\002\000\034\002\uffd0\025\uffd0\044\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0" +
    "\057\uffd0\063\uffd0\065\uffd0\001\002\000\034\002\uffd1\025" +
    "\uffd1\044\uffd1\046\uffd1\047\uffd1\050\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\056\uffd1\057\uffd1\063\uffd1\065\uffd1\001\002\000" +
    "\006\045\uffcd\060\uffe7\001\002\000\004\037\uffb2\001\002" +
    "\000\034\002\uffdd\025\uffdd\044\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\063\uffdd" +
    "\065\uffdd\001\002\000\026\025\024\044\uffa7\046\033\047" +
    "\037\050\025\053\043\054\016\056\021\057\032\065\020" +
    "\001\002\000\034\002\uffcf\025\uffcf\044\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf" +
    "\063\uffcf\065\uffcf\001\002\000\010\040\uffcc\045\uffcc\061" +
    "\uffcc\001\002\000\004\045\uffda\001\002\000\004\037\uffd6" +
    "\001\002\000\004\045\130\001\002\000\006\002\ufff7\063" +
    "\ufff7\001\002\000\010\040\uffce\045\uffce\061\uffce\001\002" +
    "\000\004\037\126\001\002\000\034\002\uffd8\025\uffd8\044" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\063\uffd8\065\uffd8\001\002\000\004\045" +
    "\125\001\002\000\040\002\uffa7\025\uffa7\044\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\051\110\052\107\053\uffa7\054\uffa7\055" +
    "\uffa7\056\uffa7\057\uffa7\063\uffa7\065\uffa7\001\002\000\004" +
    "\037\uffac\001\002\000\004\037\045\001\002\000\004\025" +
    "\046\001\002\000\006\060\uffe7\062\ufff1\001\002\000\004" +
    "\061\057\001\002\000\004\060\uffe5\001\002\000\004\061" +
    "\uffe2\001\002\000\004\061\uffe3\001\002\000\004\060\054" +
    "\001\002\000\006\025\056\047\037\001\002\000\006\045" +
    "\uffe4\061\uffe4\001\002\000\010\040\uffcd\045\uffcd\061\uffcd" +
    "\001\002\000\006\025\056\047\037\001\002\000\004\061" +
    "\061\001\002\000\006\025\056\047\037\001\002\000\004" +
    "\040\063\001\002\000\030\025\024\043\027\045\022\046" +
    "\033\047\037\050\025\053\043\054\016\056\021\057\032" +
    "\065\020\001\002\000\034\002\uffab\025\uffab\044\uffab\046" +
    "\uffab\047\uffab\050\uffab\053\uffab\054\uffab\055\uffab\056\uffab" +
    "\057\uffab\063\uffab\065\uffab\001\002\000\004\062\071\001" +
    "\002\000\004\060\067\001\002\000\006\025\056\047\037" +
    "\001\002\000\006\045\uffe6\061\uffe6\001\002\000\014\026" +
    "\077\027\074\030\100\031\075\032\072\001\002\000\014" +
    "\037\uffeb\040\uffeb\045\uffeb\060\uffeb\061\uffeb\001\002\000" +
    "\012\040\ufff0\045\ufff0\060\ufff0\061\ufff0\001\002\000\014" +
    "\037\uffee\040\uffee\045\uffee\060\uffee\061\uffee\001\002\000" +
    "\016\037\uffec\040\uffec\041\104\045\uffec\060\uffec\061\uffec" +
    "\001\002\000\014\037\uffea\040\uffea\045\uffea\060\uffea\061" +
    "\uffea\001\002\000\016\037\uffef\040\uffef\041\101\045\uffef" +
    "\060\uffef\061\uffef\001\002\000\014\037\uffed\040\uffed\045" +
    "\uffed\060\uffed\061\uffed\001\002\000\004\036\102\001\002" +
    "\000\004\042\103\001\002\000\014\037\uffe9\040\uffe9\045" +
    "\uffe9\060\uffe9\061\uffe9\001\002\000\004\036\105\001\002" +
    "\000\004\042\106\001\002\000\014\037\uffe8\040\uffe8\045" +
    "\uffe8\060\uffe8\061\uffe8\001\002\000\004\043\uffae\001\002" +
    "\000\004\037\uffb0\001\002\000\034\002\uffb4\025\uffb4\044" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\053\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\057\uffb4\063\uffb4\065\uffb4\001\002\000\040\002" +
    "\uffa7\025\uffa7\044\uffa7\046\uffa7\047\uffa7\050\uffa7\051\110" +
    "\052\107\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\063" +
    "\uffa7\065\uffa7\001\002\000\034\002\uffb6\025\uffb6\044\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\063\uffb6\065\uffb6\001\002\000\034\002\uffb3" +
    "\025\uffb3\044\uffb3\046\uffb3\047\uffb3\050\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\057\uffb3\063\uffb3\065\uffb3\001\002" +
    "\000\034\002\uffb5\025\uffb5\044\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\063\uffb5" +
    "\065\uffb5\001\002\000\004\037\117\001\002\000\006\025" +
    "\056\047\037\001\002\000\004\040\121\001\002\000\004" +
    "\043\027\001\002\000\040\002\uffaf\025\uffaf\044\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\063\uffaf\065\uffaf\001\002\000" +
    "\004\043\027\001\002\000\034\002\uffad\025\uffad\044\uffad" +
    "\046\uffad\047\uffad\050\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffad\057\uffad\063\uffad\065\uffad\001\002\000\034\002\uffdf" +
    "\025\uffdf\044\uffdf\046\uffdf\047\uffdf\050\uffdf\053\uffdf\054" +
    "\uffdf\055\uffdf\056\uffdf\057\uffdf\063\uffdf\065\uffdf\001\002" +
    "\000\004\040\127\001\002\000\010\040\uffcb\045\uffcb\061" +
    "\uffcb\001\002\000\034\002\uffe1\025\uffe1\044\uffe1\046\uffe1" +
    "\047\uffe1\050\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\063\uffe1\065\uffe1\001\002\000\004\037\132\001\002" +
    "\000\006\025\056\047\037\001\002\000\004\040\134\001" +
    "\002\000\004\045\135\001\002\000\034\002\uffd5\025\uffd5" +
    "\044\uffd5\046\uffd5\047\uffd5\050\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\057\uffd5\063\uffd5\065\uffd5\001\002\000\004" +
    "\045\137\001\002\000\034\002\uffd9\025\uffd9\044\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\063\uffd9\065\uffd9\001\002\000\026\025\024\044" +
    "\uffa7\046\033\047\037\050\025\053\043\054\016\056\021" +
    "\057\032\065\020\001\002\000\004\044\143\001\002\000" +
    "\004\044\uffd3\001\002\000\040\002\uffd2\025\uffd2\044\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054" +
    "\uffd2\055\uffd2\056\uffd2\057\uffd2\063\uffd2\065\uffd2\001\002" +
    "\000\004\044\uffd4\001\002\000\004\037\146\001\002\000" +
    "\006\025\056\047\037\001\002\000\004\040\150\001\002" +
    "\000\004\043\027\001\002\000\040\002\uffb1\025\uffb1\044" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\056\uffb1\057\uffb1\063\uffb1\065\uffb1\001" +
    "\002\000\006\025\056\047\037\001\002\000\004\045\154" +
    "\001\002\000\034\002\uffdb\025\uffdb\044\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\063\uffdb\065\uffdb\001\002\000\004\062\ufff1\001\002\000" +
    "\004\045\170\001\002\000\010\045\ufff6\060\uffe5\061\163" +
    "\001\002\000\006\040\ufff4\045\ufff4\001\002\000\004\045" +
    "\162\001\002\000\034\002\uffde\025\uffde\044\uffde\046\uffde" +
    "\047\uffde\050\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057" +
    "\uffde\063\uffde\065\uffde\001\002\000\004\025\155\001\002" +
    "\000\010\040\ufff3\045\ufff3\061\166\001\002\000\006\040" +
    "\ufff5\045\ufff5\001\002\000\004\025\155\001\002\000\006" +
    "\040\ufff2\045\ufff2\001\002\000\034\002\uffe0\025\uffe0\044" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\063\uffe0\065\uffe0\001\002\000\034\002" +
    "\uffd7\025\uffd7\044\uffd7\046\uffd7\047\uffd7\050\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\057\uffd7\063\uffd7\065\uffd7\001" +
    "\002\000\030\025\024\043\027\045\022\046\033\047\037" +
    "\050\025\053\043\054\016\056\021\057\032\065\020\001" +
    "\002\000\004\055\174\001\002\000\004\037\uffa9\001\002" +
    "\000\004\037\176\001\002\000\006\025\056\047\037\001" +
    "\002\000\004\040\200\001\002\000\004\045\uffa8\001\002" +
    "\000\014\026\077\027\074\030\100\031\075\032\072\001" +
    "\002\000\004\037\ufffb\001\002\000\004\037\204\001\002" +
    "\000\006\025\155\040\uffa7\001\002\000\004\040\207\001" +
    "\002\000\006\040\ufff6\061\163\001\002\000\030\025\ufffa" +
    "\043\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\053\ufffa\054" +
    "\ufffa\056\ufffa\057\ufffa\065\ufffa\001\002\000\030\025\024" +
    "\043\027\045\022\046\033\047\037\050\025\053\043\054" +
    "\016\056\021\057\032\065\020\001\002\000\006\002\ufff9" +
    "\063\ufff9\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\ufffe\001\002\000\006\002\uffa7\063\215\001\002\000\004" +
    "\025\011\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\012\002\003\004\005\005\004\006\007\001" +
    "\001\000\002\001\001\000\010\003\212\004\213\044\215" +
    "\001\001\000\010\004\005\005\004\006\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\014\001\001\000" +
    "\030\015\040\017\034\020\022\022\027\023\033\024\035" +
    "\025\030\034\025\035\041\041\037\042\016\001\001\000" +
    "\004\062\171\001\001\000\002\001\001\000\012\007\155" +
    "\010\156\016\160\044\157\001\001\000\004\053\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\065" +
    "\001\001\000\004\056\144\001\001\000\002\001\001\000" +
    "\030\015\040\020\137\021\140\023\033\024\035\025\030" +
    "\034\025\035\041\041\037\042\016\044\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\135\001\001" +
    "\000\004\055\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\036\112\037\111\040\110\044" +
    "\113\001\001\000\004\061\043\001\001\000\002\001\001" +
    "\000\012\010\047\014\046\015\051\016\050\001\001\000" +
    "\006\050\064\051\065\001\001\000\002\001\001\000\004" +
    "\052\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\054\024\035\025\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\023\057\024" +
    "\035\025\030\001\001\000\002\001\001\000\010\023\061" +
    "\024\035\025\030\001\001\000\002\001\001\000\030\015" +
    "\040\017\063\020\022\022\027\023\033\024\035\025\030" +
    "\034\025\035\041\041\037\042\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\023\067" +
    "\024\035\025\030\001\001\000\002\001\001\000\006\011" +
    "\072\012\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\122\001\001\000\004" +
    "\057\115\001\001\000\002\001\001\000\012\036\114\037" +
    "\111\040\110\044\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\117\024\035\025\030\001\001\000\002\001\001\000\004" +
    "\022\121\001\001\000\002\001\001\000\004\022\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\132\024\035\025\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\015\040\020\137\021\143\023\033" +
    "\024\035\025\030\034\025\035\041\041\037\042\016\044" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\146\024\035\025\030\001\001\000\002\001\001\000\004" +
    "\022\150\001\001\000\002\001\001\000\010\023\152\024" +
    "\035\025\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\064\001\001\000\002\001\001\000\004\052" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\163\013\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\163\013\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\015\040\017\172\020\022\022\027\023\033\024\035" +
    "\025\030\034\025\035\041\041\037\042\016\001\001\000" +
    "\002\001\001\000\004\063\174\001\001\000\002\001\001" +
    "\000\010\023\176\024\035\025\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\201\012\075\001\001" +
    "\000\004\045\202\001\001\000\002\001\001\000\010\007" +
    "\204\010\205\044\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\207\001\001\000\030\015\040\017" +
    "\210\020\022\022\027\023\033\024\035\025\030\034\025" +
    "\035\041\041\037\042\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\216\004\213" +
    "\044\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


	
    @Override
    protected int error_sync_size(){
        return 1;
    }

    private Symbol tokenError;

    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        try
        {
            String lexema = s.value.toString();
            int fila = s.left + 1;
            int columna = s.right;
            tokenError = s;

            //System.err.println("Error sintactico en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
        }catch(Exception e) {}
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        try
        {
            String lexema = s.value.toString();
            int fila = s.left + 1;
            int columna = s.right;

            String mensaje = "Error sintáctico irrecuperable, con el símbolo: " + lexema;
            ErrorUI(mensaje, lexema, fila, columna);

            //System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
        }catch(Exception e) {}
    }

    public void report_error(String message, Object info)
    {
        if (info instanceof String){
            System.out.println(message);
        }
        else {
            if (info instanceof Symbol){
                String m = "Error sintático en: " + message;
                Symbol s = (Symbol)info;
                m += ", con el símbolo: \"" + s.value.toString() + "\"";
                ErrorUI(m, s.value.toString(), (s.left+1), s.right);
            }else{
                System.err.println(message);
            }
        }
    }

    public void ErrorUI(String pMsg, String token, int linea, int columna)
    {
        String msg = pMsg + ". En la línea: " + (linea) + ", columna: " + (columna) + ".";

        Main.miInstancia.agregarErrorSintactico(msg);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	ListaTablasSimbolos tablas = new ListaTablasSimbolos();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= inicio 
            {
              Object RESULT =null;
		 tablas.guardar("test/resultado-sintactico.txt"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= funcion inicio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= funcion_main bolsa_navidenna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bolsa_navidenna ::= funcion bolsa_navidenna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsa_navidenna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bolsa_navidenna ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsa_navidenna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.tabla(new Funcion(nf, tf)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 tablas.agregarParametros("parametro"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= FUNCTION PERSONA DOS_PUNTOS tipo NT$0 ABRECUENTO parametros CIERRECUENTO NT$1 bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
 tablas.tabla(new Funcion()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcion_main ::= FUNCTION MAIN ABRECUENTO CIERRECUENTO NT$2 bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_main",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= parametro COMA mas_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // mas_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // mas_parametros ::= parametro COMA mas_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$3 ::= 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = np; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro ::= PERSONA NT$3 DOS_PUNTOS tipo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 tablas.simbolo(new Parametro(np, tp)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= PAPA_NOEL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= SANTA_CLAUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= SAN_NICOLAS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= NINO_JESUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= COLACHO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= array 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // array ::= PAPA_NOEL ABREEMPAQUE L_PAPA_NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // array ::= NINO_JESUS ABREEMPAQUE L_PAPA_NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Object RESULT =null;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new LexemaNombre("asignacion", nv)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignar_variable_declarada ::= PERSONA NT$4 ENTREGA regalo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable_declarada",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$5 ::= 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new LexemaNombre("declaracion_asignacion", np)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declarar_asignar_variable ::= parametro NT$5 ENTREGA regalo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_asignar_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // asignar_variable ::= asignar_variable_declarada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // asignar_variable ::= declarar_asignar_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // linea_codigo ::= regalo FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // linea_codigo ::= LOCAL parametros FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // linea_codigo ::= asignar_variable_declarada FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // linea_codigo ::= LOCAL declarar_asignar_variable FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // linea_codigo ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$6 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // linea_codigo ::= ENVIA NT$6 regalo FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$7 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // linea_codigo ::= CORTA NT$7 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // linea_codigo ::= ciclo_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // linea_codigo ::= ciclo_do_until FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$8 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // linea_codigo ::= NARRA NT$8 ABRECUENTO regalo CIERRECUENTO FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // codigo_multilinea ::= linea_codigo codigo_multilinea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_multilinea",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // codigo_multilinea ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_multilinea",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // codigo_contenido ::= ABREREGALO codigo_multilinea CIERRAREGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_contenido",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bloque_codigo ::= linea_codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque_codigo ::= FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque_codigo ::= codigo_contenido 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // regalo ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // regalo ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // regalo ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // regalo ::= ESCUCHA ABRECUENTO CIERRECUENTO 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresiones ::= regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresiones ::= regalo COMA mas_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresiones ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // mas_expresiones ::= regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_expresiones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // mas_expresiones ::= regalo COMA mas_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_expresiones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresiones_AL ::= tokens _expresiones_AL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_AL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresiones_AL ::= llamada_funcion _expresiones_AL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_AL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresiones_AL ::= ABRECUENTO expresiones_AL CIERRECUENTO _expresiones_AL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones_AL",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _expresiones_AL ::= _operadores_aritmeticos expresiones_AL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_expresiones_AL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // _expresiones_AL ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_expresiones_AL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // _operadores_aritmeticos ::= RUDOLPH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // _operadores_aritmeticos ::= DASHER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // _operadores_aritmeticos ::= COMET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // _operadores_aritmeticos ::= VIXEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // _operadores_aritmeticos ::= TOTIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _operadores_aritmeticos ::= RENILLO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tokens ::= PERSONA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tokens ::= L_COLACHO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tokens ::= L_SAN_NICOLAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tokens ::= L_PAPA_NOEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tokens",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condicional ::= condicional_if condicionales_elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condicionales_elif ::= condicional_elif condicionales_elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condicionales_elif ::= condicional_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condicionales_elif ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$9 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condicional_if ::= ELFO NT$9 ABRECUENTO regalo CIERRECUENTO codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_if",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$10 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condicional_elif ::= HADA NT$10 ABRECUENTO regalo CIERRECUENTO codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_elif",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$11 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicional_else ::= DUENDE NT$11 codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_else",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$12 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ciclo_for ::= ENVUELVE NT$12 ABRECUENTO asignar_variable COMA regalo COMA regalo CIERRECUENTO bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$13 ::= 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(d)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$14 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 tablas.simbolo(new Lexema(u)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ciclo_do_until ::= HACE NT$13 bloque_codigo REVISA NT$14 ABRECUENTO regalo CIERRECUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_do_until",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
