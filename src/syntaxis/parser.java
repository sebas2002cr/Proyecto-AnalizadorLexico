
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package syntaxis;

import java_cup.runtime.*;
import lexical.CodeLexer;
import semantic.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\004\000\002\003\004\000\002\003\003" +
    "\000\002\055\002\000\002\004\013\000\002\005\007\000" +
    "\002\007\003\000\002\007\005\000\002\007\003\000\002" +
    "\013\003\000\002\013\005\000\002\010\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\006\000" +
    "\002\012\006\000\002\056\002\000\002\015\006\000\002" +
    "\016\005\000\002\014\003\000\002\014\003\000\002\057" +
    "\002\000\002\020\005\000\002\060\002\000\002\020\006" +
    "\000\002\061\002\000\002\020\005\000\002\062\002\000" +
    "\002\020\006\000\002\020\003\000\002\063\002\000\002" +
    "\020\006\000\002\064\002\000\002\020\005\000\002\020" +
    "\003\000\002\020\004\000\002\020\007\000\002\021\004" +
    "\000\002\021\003\000\002\065\002\000\002\022\006\000" +
    "\002\066\002\000\002\017\004\000\002\067\002\000\002" +
    "\017\004\000\002\017\003\000\002\023\003\000\002\023" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\005\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\070\002\000\002\025\007\000\002\027\003\000\002\027" +
    "\005\000\002\027\003\000\002\030\003\000\002\030\005" +
    "\000\002\031\003\000\002\031\005\000\002\031\005\000" +
    "\002\031\004\000\002\033\003\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\034" +
    "\003\000\002\034\005\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\006\000\002\035\005\000\002\035\003\000\002\035\004" +
    "\000\002\040\003\000\002\040\005\000\002\040\004\000" +
    "\002\041\005\000\002\041\004\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\045\004\000\002\047\004" +
    "\000\002\047\003\000\002\047\003\000\002\071\002\000" +
    "\002\072\002\000\002\046\011\000\002\073\002\000\002" +
    "\074\002\000\002\050\011\000\002\051\004\000\002\075" +
    "\002\000\002\076\002\000\002\077\002\000\002\052\016" +
    "\000\002\053\010\000\002\054\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\004\065\007\001\002\000\004\002\344\001" +
    "\002\000\006\002\uff85\065\341\001\002\000\004\065\007" +
    "\001\002\000\006\025\011\066\012\001\002\000\004\002" +
    "\000\001\002\000\004\064\326\001\002\000\004\041\013" +
    "\001\002\000\004\042\014\001\002\000\054\005\uffd1\012" +
    "\uffd1\013\uffd1\024\uffd1\025\uffd1\034\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\045\uffd3\047\uffcf\050\uffd1\051" +
    "\uffd1\052\uffd1\055\uffd1\056\uffd1\060\uffd1\061\uffd1\067\uffd1" +
    "\001\002\000\004\047\325\001\002\000\060\002\uffcd\005" +
    "\uffcd\012\uffcd\013\uffcd\024\uffcd\025\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\040\uffcd\041\uffcd\046\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd" +
    "\065\uffcd\067\uffcd\001\002\000\050\005\052\012\042\013" +
    "\065\024\045\025\025\034\044\035\066\036\034\037\064" +
    "\040\063\041\047\050\033\051\051\052\uff91\055\040\056" +
    "\037\060\055\061\043\067\062\001\002\000\004\045\022" +
    "\001\002\000\006\002\ufff9\065\ufff9\001\002\000\052\005" +
    "\052\012\042\013\065\024\045\025\025\034\044\035\066" +
    "\036\034\037\064\040\063\041\047\046\uff85\050\033\051" +
    "\051\052\uff91\055\040\056\037\060\055\061\043\067\062" +
    "\001\002\000\004\047\uffe1\001\002\000\044\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\042" +
    "\uffc8\047\uffc8\063\uffc8\001\002\000\044\004\uffc9\005\uffc9" +
    "\006\uffc9\007\uffc9\010\uffc9\011\uffc9\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\041\111" +
    "\047\uffc9\062\uffea\001\002\000\044\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\042\uffca\047" +
    "\uffca\063\uffca\001\002\000\004\046\321\001\002\000\014" +
    "\022\uffa2\023\uffa2\042\uffa2\047\uffa2\063\uffa2\001\002\000" +
    "\004\047\320\001\002\000\044\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\014\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\042\uffb6\047\uffb6" +
    "\063\uffb6\001\002\000\004\041\314\001\002\000\044\004" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\042\uffc4\047\uffc4\063\uffc4\001\002\000\034\004\105" +
    "\005\106\014\173\015\175\016\174\017\176\020\201\021" +
    "\177\022\241\023\242\042\uffcc\047\uffcc\063\uffcc\001\002" +
    "\000\044\004\uffba\005\uffba\006\076\007\073\010\075\011" +
    "\074\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\042\uffba\047\uffba\063\uffba\001\002\000" +
    "\054\005\uffd1\012\uffd1\013\uffd1\024\uffd1\025\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\045\uffd3\047" +
    "\uffcf\050\uffd1\051\uffd1\052\uffd1\055\uffd1\056\uffd1\060\uffd1" +
    "\061\uffd1\067\uffd1\001\002\000\004\041\265\001\002\000" +
    "\004\052\257\001\002\000\022\025\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\051\uffaf\001\002\000" +
    "\004\047\uffda\001\002\000\044\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\010\uffc6\011\uffc6\014\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\042\uffc6\047\uffc6" +
    "\063\uffc6\001\002\000\032\005\052\012\042\013\065\024" +
    "\206\025\070\034\044\035\066\036\034\037\064\040\063" +
    "\041\251\051\051\001\002\000\052\005\052\012\042\013" +
    "\065\024\045\025\025\034\044\035\066\036\034\037\064" +
    "\040\063\041\047\046\uff85\050\033\051\051\052\uff91\055" +
    "\040\056\037\060\055\061\043\067\062\001\002\000\032" +
    "\005\052\012\042\013\065\024\045\025\070\034\044\035" +
    "\066\036\034\037\064\040\063\041\047\051\051\001\002" +
    "\000\044\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\042\uffb1\047\uffb1\063\uffb1\001\002\000" +
    "\004\041\235\001\002\000\022\025\uffad\034\uffad\035\uffad" +
    "\036\uffad\037\uffad\040\uffad\041\uffad\051\uffad\001\002\000" +
    "\060\002\uffdd\005\uffdd\012\uffdd\013\uffdd\024\uffdd\025\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\046" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\055\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\061\uffdd\065\uffdd\067\uffdd\001\002\000\064\002" +
    "\uff85\005\uff85\012\uff85\013\uff85\024\uff85\025\uff85\034\uff85" +
    "\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\046\uff85\050" +
    "\uff85\051\uff85\052\uff85\053\uff8e\054\217\055\uff85\056\uff85" +
    "\057\uff85\060\uff85\061\uff85\065\uff85\067\uff85\001\002\000" +
    "\032\005\052\012\042\013\065\024\045\025\070\034\044" +
    "\035\066\036\034\037\064\040\063\041\047\051\051\001" +
    "\002\000\060\002\uffd8\005\uffd8\012\uffd8\013\uffd8\024\uffd8" +
    "\025\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\046\uffd8\050\uffd8\051\uffd8\052\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\065\uffd8\067\uffd8\001\002\000" +
    "\014\022\164\023\165\042\uffcb\047\uffcb\063\uffcb\001\002" +
    "\000\004\046\uffd4\001\002\000\004\047\uffe5\001\002\000" +
    "\006\025\124\047\uff85\001\002\000\044\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\042\uffc2" +
    "\047\uffc2\063\uffc2\001\002\000\044\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\042\uffc3\047" +
    "\uffc3\063\uffc3\001\002\000\022\025\uffae\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\051\uffae\001\002\000" +
    "\044\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\042\uffc5\047\uffc5\063\uffc5\001\002\000\022" +
    "\025\070\034\044\035\066\036\034\037\064\040\063\041" +
    "\071\051\051\001\002\000\046\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\041\111\042\uffc9" +
    "\047\uffc9\063\uffc9\001\002\000\030\005\052\012\042\013" +
    "\065\025\070\034\044\035\066\036\034\037\064\040\063" +
    "\041\071\051\051\001\002\000\044\004\uffb7\005\uffb7\006" +
    "\076\007\073\010\075\011\074\014\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\042\uffb7\047" +
    "\uffb7\063\uffb7\001\002\000\022\025\070\034\044\035\066" +
    "\036\034\037\064\040\063\041\071\051\051\001\002\000" +
    "\022\025\070\034\044\035\066\036\034\037\064\040\063" +
    "\041\071\051\051\001\002\000\022\025\070\034\044\035" +
    "\066\036\034\037\064\040\063\041\071\051\051\001\002" +
    "\000\022\025\070\034\044\035\066\036\034\037\064\040" +
    "\063\041\071\051\051\001\002\000\044\004\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\011\uffb5\014\uffb5\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\042\uffb5" +
    "\047\uffb5\063\uffb5\001\002\000\044\004\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\042\uffb3\047" +
    "\uffb3\063\uffb3\001\002\000\044\004\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\042\uffb2\047\uffb2" +
    "\063\uffb2\001\002\000\044\004\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\010\uffb4\011\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\042\uffb4\047\uffb4\063" +
    "\uffb4\001\002\000\010\004\105\005\106\042\104\001\002" +
    "\000\044\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\042\uffb0\047\uffb0\063\uffb0\001\002\000" +
    "\022\025\070\034\044\035\066\036\034\037\064\040\063" +
    "\041\071\051\051\001\002\000\022\025\070\034\044\035" +
    "\066\036\034\037\064\040\063\041\071\051\051\001\002" +
    "\000\044\004\uffb8\005\uffb8\006\076\007\073\010\075\011" +
    "\074\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\042\uffb8\047\uffb8\063\uffb8\001\002\000" +
    "\044\004\uffb9\005\uffb9\006\076\007\073\010\075\011\074" +
    "\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\042\uffb9\047\uffb9\063\uffb9\001\002\000\034" +
    "\005\uffc1\012\uffc1\013\uffc1\024\uffc1\025\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\051\uffc1" +
    "\001\002\000\034\005\052\012\042\013\065\024\045\025" +
    "\070\034\044\035\066\036\034\037\064\040\063\041\047" +
    "\042\uff85\051\051\001\002\000\004\042\123\001\002\000" +
    "\006\042\uffbf\063\116\001\002\000\004\042\uffbd\001\002" +
    "\000\032\005\052\012\042\013\065\024\045\025\070\034" +
    "\044\035\066\036\034\037\064\040\063\041\047\051\051" +
    "\001\002\000\004\042\uffbe\001\002\000\006\042\uffbc\063" +
    "\121\001\002\000\032\005\052\012\042\013\065\024\045" +
    "\025\070\034\044\035\066\036\034\037\064\040\063\041" +
    "\047\051\051\001\002\000\004\042\uffbb\001\002\000\044" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\042\uffc0\047\uffc0\063\uffc0\001\002\000\004\064" +
    "\144\001\002\000\004\047\uffe3\001\002\000\010\047\ufff8" +
    "\062\133\063\134\001\002\000\006\042\ufff6\047\ufff6\001" +
    "\002\000\004\047\uffdf\001\002\000\004\047\132\001\002" +
    "\000\060\002\uffde\005\uffde\012\uffde\013\uffde\024\uffde\025" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\046\uffde\050\uffde\051\uffde\052\uffde\055\uffde\056\uffde\057" +
    "\uffde\060\uffde\061\uffde\065\uffde\067\uffde\001\002\000\032" +
    "\005\052\012\042\013\065\024\045\025\070\034\044\035" +
    "\066\036\034\037\064\040\063\041\047\051\051\001\002" +
    "\000\004\025\124\001\002\000\010\042\ufff5\047\ufff5\063" +
    "\137\001\002\000\006\042\ufff7\047\ufff7\001\002\000\004" +
    "\025\124\001\002\000\006\042\ufff4\047\ufff4\001\002\000" +
    "\006\047\uffe8\063\uffe8\001\002\000\004\047\143\001\002" +
    "\000\060\002\uffe2\005\uffe2\012\uffe2\013\uffe2\024\uffe2\025" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\046\uffe2\050\uffe2\051\uffe2\052\uffe2\055\uffe2\056\uffe2\057" +
    "\uffe2\060\uffe2\061\uffe2\065\uffe2\067\uffe2\001\002\000\014" +
    "\026\151\027\147\030\152\031\150\032\145\001\002\000" +
    "\014\041\uffee\042\uffee\047\uffee\062\uffee\063\uffee\001\002" +
    "\000\012\042\ufff3\047\ufff3\062\ufff3\063\ufff3\001\002\000" +
    "\014\041\ufff1\042\ufff1\047\ufff1\062\ufff1\063\ufff1\001\002" +
    "\000\016\041\uffef\042\uffef\043\157\047\uffef\062\uffef\063" +
    "\uffef\001\002\000\016\041\ufff2\042\ufff2\043\154\047\ufff2" +
    "\062\ufff2\063\ufff2\001\002\000\014\041\ufff0\042\ufff0\047" +
    "\ufff0\062\ufff0\063\ufff0\001\002\000\014\041\uffed\042\uffed" +
    "\047\uffed\062\uffed\063\uffed\001\002\000\004\036\155\001" +
    "\002\000\004\044\156\001\002\000\014\041\uffec\042\uffec" +
    "\047\uffec\062\uffec\063\uffec\001\002\000\004\036\160\001" +
    "\002\000\004\044\161\001\002\000\014\041\uffeb\042\uffeb" +
    "\047\uffeb\062\uffeb\063\uffeb\001\002\000\004\047\163\001" +
    "\002\000\060\002\uffe4\005\uffe4\012\uffe4\013\uffe4\024\uffe4" +
    "\025\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\046\uffe4\050\uffe4\051\uffe4\052\uffe4\055\uffe4\056\uffe4" +
    "\057\uffe4\060\uffe4\061\uffe4\065\uffe4\067\uffe4\001\002\000" +
    "\032\005\052\012\042\013\065\024\170\025\070\034\044" +
    "\035\066\036\034\037\064\040\063\041\166\051\051\001" +
    "\002\000\032\005\052\012\042\013\065\024\170\025\070" +
    "\034\044\035\066\036\034\037\064\040\063\041\166\051" +
    "\051\001\002\000\032\005\052\012\042\013\065\024\206" +
    "\025\070\034\044\035\066\036\034\037\064\040\063\041" +
    "\071\051\051\001\002\000\014\022\uffa0\023\uffa0\042\uffa0" +
    "\047\uffa0\063\uffa0\001\002\000\032\005\052\012\042\013" +
    "\065\024\170\025\070\034\044\035\066\036\034\037\064" +
    "\040\063\041\166\051\051\001\002\000\034\004\105\005" +
    "\106\014\173\015\175\016\174\017\176\020\201\021\177" +
    "\022\uffab\023\uffab\042\uffab\047\uffab\063\uffab\001\002\000" +
    "\014\022\uffac\023\uffac\042\uffac\047\uffac\063\uffac\001\002" +
    "\000\030\005\uff9b\012\uff9b\013\uff9b\025\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\051\uff9b\001\002" +
    "\000\030\005\uff99\012\uff99\013\uff99\025\uff99\034\uff99\035" +
    "\uff99\036\uff99\037\uff99\040\uff99\041\uff99\051\uff99\001\002" +
    "\000\030\005\uff9a\012\uff9a\013\uff9a\025\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\051\uff9a\001\002" +
    "\000\030\005\uff98\012\uff98\013\uff98\025\uff98\034\uff98\035" +
    "\uff98\036\uff98\037\uff98\040\uff98\041\uff98\051\uff98\001\002" +
    "\000\030\005\uff96\012\uff96\013\uff96\025\uff96\034\uff96\035" +
    "\uff96\036\uff96\037\uff96\040\uff96\041\uff96\051\uff96\001\002" +
    "\000\030\005\052\012\042\013\065\025\070\034\044\035" +
    "\066\036\034\037\064\040\063\041\071\051\051\001\002" +
    "\000\030\005\uff97\012\uff97\013\uff97\025\uff97\034\uff97\035" +
    "\uff97\036\uff97\037\uff97\040\uff97\041\uff97\051\uff97\001\002" +
    "\000\020\004\105\005\106\022\uff9d\023\uff9d\042\uff9d\047" +
    "\uff9d\063\uff9d\001\002\000\034\004\105\005\106\014\173" +
    "\015\175\016\174\017\176\020\201\021\177\022\uff9c\023" +
    "\uff9c\042\uff9c\047\uff9c\063\uff9c\001\002\000\014\022\uff9e" +
    "\023\uff9e\042\uff9e\047\uff9e\063\uff9e\001\002\000\004\042" +
    "\211\001\002\000\030\005\052\012\042\013\065\025\070" +
    "\034\044\035\066\036\034\037\064\040\063\041\071\051" +
    "\051\001\002\000\024\004\105\005\106\014\173\015\175" +
    "\016\174\017\176\020\201\021\177\042\104\001\002\000" +
    "\020\004\105\005\106\022\uff9c\023\uff9c\042\uff9c\047\uff9c" +
    "\063\uff9c\001\002\000\014\022\uff9f\023\uff9f\042\uff9f\047" +
    "\uff9f\063\uff9f\001\002\000\034\004\105\005\106\014\173" +
    "\015\175\016\174\017\176\020\201\021\177\022\uffa8\023" +
    "\uffa8\042\uffa8\047\uffa8\063\uffa8\001\002\000\014\022\uffa7" +
    "\023\uffa7\042\uffa7\047\uffa7\063\uffa7\001\002\000\004\047" +
    "\uffdc\001\002\000\004\047\216\001\002\000\060\002\uffdb" +
    "\005\uffdb\012\uffdb\013\uffdb\024\uffdb\025\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\046\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061" +
    "\uffdb\065\uffdb\067\uffdb\001\002\000\004\045\uffd3\001\002" +
    "\000\060\002\uff93\005\uff93\012\uff93\013\uff93\024\uff93\025" +
    "\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93" +
    "\046\uff93\050\uff93\051\uff93\052\uff93\055\uff93\056\uff93\057" +
    "\uff93\060\uff93\061\uff93\065\uff93\067\uff93\001\002\000\064" +
    "\002\uff85\005\uff85\012\uff85\013\uff85\024\uff85\025\uff85\034" +
    "\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85\046\uff85" +
    "\050\uff85\051\uff85\052\uff85\053\uff8e\054\217\055\uff85\056" +
    "\uff85\057\uff85\060\uff85\061\uff85\065\uff85\067\uff85\001\002" +
    "\000\060\002\uff95\005\uff95\012\uff95\013\uff95\024\uff95\025" +
    "\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95" +
    "\046\uff95\050\uff95\051\uff95\052\uff95\055\uff95\056\uff95\057" +
    "\uff95\060\uff95\061\uff95\065\uff95\067\uff95\001\002\000\004" +
    "\053\225\001\002\000\060\002\uff92\005\uff92\012\uff92\013" +
    "\uff92\024\uff92\025\uff92\034\uff92\035\uff92\036\uff92\037\uff92" +
    "\040\uff92\041\uff92\046\uff92\050\uff92\051\uff92\052\uff92\055" +
    "\uff92\056\uff92\057\uff92\060\uff92\061\uff92\065\uff92\067\uff92" +
    "\001\002\000\004\041\226\001\002\000\032\005\052\012" +
    "\042\013\065\024\045\025\070\034\044\035\066\036\034" +
    "\037\064\040\063\041\047\051\051\001\002\000\004\042" +
    "\230\001\002\000\004\045\uff8d\001\002\000\004\045\uffd3" +
    "\001\002\000\064\002\uff8c\005\uff8c\012\uff8c\013\uff8c\024" +
    "\uff8c\025\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c" +
    "\041\uff8c\046\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054" +
    "\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\065\uff8c" +
    "\067\uff8c\001\002\000\060\002\uff94\005\uff94\012\uff94\013" +
    "\uff94\024\uff94\025\uff94\034\uff94\035\uff94\036\uff94\037\uff94" +
    "\040\uff94\041\uff94\046\uff94\050\uff94\051\uff94\052\uff94\055" +
    "\uff94\056\uff94\057\uff94\060\uff94\061\uff94\065\uff94\067\uff94" +
    "\001\002\000\060\002\uff8b\005\uff8b\012\uff8b\013\uff8b\024" +
    "\uff8b\025\uff8b\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b" +
    "\041\uff8b\046\uff8b\050\uff8b\051\uff8b\052\uff8b\055\uff8b\056" +
    "\uff8b\057\uff8b\060\uff8b\061\uff8b\065\uff8b\067\uff8b\001\002" +
    "\000\004\042\236\001\002\000\044\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\011\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\042\uffc7\047" +
    "\uffc7\063\uffc7\001\002\000\010\022\164\023\165\042\247" +
    "\001\002\000\030\004\105\005\106\014\173\015\175\016" +
    "\174\017\176\020\201\021\177\022\241\023\242\042\104" +
    "\001\002\000\032\005\052\012\042\013\065\024\170\025" +
    "\070\034\044\035\066\036\034\037\064\040\063\041\166" +
    "\051\051\001\002\000\032\005\052\012\042\013\065\024" +
    "\170\025\070\034\044\035\066\036\034\037\064\040\063" +
    "\041\166\051\051\001\002\000\034\004\105\005\106\014" +
    "\173\015\175\016\174\017\176\020\201\021\177\022\uffaa" +
    "\023\uffaa\042\uffaa\047\uffaa\063\uffaa\001\002\000\014\022" +
    "\uffa9\023\uffa9\042\uffa9\047\uffa9\063\uffa9\001\002\000\034" +
    "\004\105\005\106\014\173\015\175\016\174\017\176\020" +
    "\201\021\177\022\uffa6\023\uffa6\042\uffa6\047\uffa6\063\uffa6" +
    "\001\002\000\014\022\uffa5\023\uffa5\042\uffa5\047\uffa5\063" +
    "\uffa5\001\002\000\014\022\uffa3\023\uffa3\042\uffa3\047\uffa3" +
    "\063\uffa3\001\002\000\004\046\uffd5\001\002\000\032\005" +
    "\052\012\042\013\065\024\045\025\070\034\044\035\066" +
    "\036\034\037\064\040\063\041\047\051\051\001\002\000" +
    "\014\022\uffa1\023\uffa1\042\uffa1\047\uffa1\063\uffa1\001\002" +
    "\000\010\022\164\023\165\042\254\001\002\000\014\022" +
    "\uffa4\023\uffa4\042\uffa4\047\uffa4\063\uffa4\001\002\000\004" +
    "\047\256\001\002\000\060\002\uffd9\005\uffd9\012\uffd9\013" +
    "\uffd9\024\uffd9\025\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\046\uffd9\050\uffd9\051\uffd9\052\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\065\uffd9\067\uffd9" +
    "\001\002\000\004\041\260\001\002\000\032\005\052\012" +
    "\042\013\065\024\045\025\070\034\044\035\066\036\034" +
    "\037\064\040\063\041\047\051\051\001\002\000\004\042" +
    "\262\001\002\000\004\045\uff90\001\002\000\004\045\uffd3" +
    "\001\002\000\064\002\uff8f\005\uff8f\012\uff8f\013\uff8f\024" +
    "\uff8f\025\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f" +
    "\041\uff8f\046\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054" +
    "\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\065\uff8f" +
    "\067\uff8f\001\002\000\004\025\uff8a\001\002\000\004\025" +
    "\267\001\002\000\006\062\uffea\064\144\001\002\000\004" +
    "\063\uff89\001\002\000\004\062\133\001\002\000\004\063" +
    "\uffe7\001\002\000\004\063\uffe6\001\002\000\004\063\275" +
    "\001\002\000\032\005\052\012\042\013\065\024\045\025" +
    "\070\034\044\035\066\036\034\037\064\040\063\041\047" +
    "\051\051\001\002\000\004\063\277\001\002\000\032\005" +
    "\052\012\042\013\065\024\045\025\070\034\044\035\066" +
    "\036\034\037\064\040\063\041\047\051\051\001\002\000" +
    "\004\042\uff88\001\002\000\004\042\302\001\002\000\054" +
    "\005\uffd1\012\uffd1\013\uffd1\024\uffd1\025\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\045\uffd3\047\uffcf" +
    "\050\uffd1\051\uffd1\052\uffd1\055\uffd1\056\uffd1\060\uffd1\061" +
    "\uffd1\067\uffd1\001\002\000\060\002\uff87\005\uff87\012\uff87" +
    "\013\uff87\024\uff87\025\uff87\034\uff87\035\uff87\036\uff87\037" +
    "\uff87\040\uff87\041\uff87\046\uff87\050\uff87\051\uff87\052\uff87" +
    "\055\uff87\056\uff87\057\uff87\060\uff87\061\uff87\065\uff87\067" +
    "\uff87\001\002\000\004\062\305\001\002\000\032\005\052" +
    "\012\042\013\065\024\045\025\070\034\044\035\066\036" +
    "\034\037\064\040\063\041\047\051\051\001\002\000\006" +
    "\047\uffe9\063\uffe9\001\002\000\004\057\310\001\002\000" +
    "\004\041\311\001\002\000\032\005\052\012\042\013\065" +
    "\024\045\025\070\034\044\035\066\036\034\037\064\040" +
    "\063\041\047\051\051\001\002\000\004\042\313\001\002" +
    "\000\004\047\uff86\001\002\000\032\005\052\012\042\013" +
    "\065\024\045\025\070\034\044\035\066\036\034\037\064" +
    "\040\063\041\047\051\051\001\002\000\004\042\316\001" +
    "\002\000\004\047\317\001\002\000\060\002\uffd6\005\uffd6" +
    "\012\uffd6\013\uffd6\024\uffd6\025\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\046\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\065" +
    "\uffd6\067\uffd6\001\002\000\060\002\uffd7\005\uffd7\012\uffd7" +
    "\013\uffd7\024\uffd7\025\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\041\uffd7\046\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\065\uffd7\067" +
    "\uffd7\001\002\000\064\002\uffd2\005\uffd2\012\uffd2\013\uffd2" +
    "\024\uffd2\025\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\046\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\065" +
    "\uffd2\067\uffd2\001\002\000\004\047\323\001\002\000\060" +
    "\002\uffe0\005\uffe0\012\uffe0\013\uffe0\024\uffe0\025\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\046\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\055\uffe0\056\uffe0\057\uffe0\060" +
    "\uffe0\061\uffe0\065\uffe0\067\uffe0\001\002\000\060\002\uffd0" +
    "\005\uffd0\012\uffd0\013\uffd0\024\uffd0\025\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\046\uffd0\050\uffd0" +
    "\051\uffd0\052\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\065\uffd0\067\uffd0\001\002\000\060\002\uffce\005\uffce" +
    "\012\uffce\013\uffce\024\uffce\025\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\046\uffce\050\uffce\051\uffce" +
    "\052\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\065" +
    "\uffce\067\uffce\001\002\000\014\026\151\027\147\030\152" +
    "\031\150\032\145\001\002\000\004\041\330\001\002\000" +
    "\006\025\124\042\uff85\001\002\000\004\042\333\001\002" +
    "\000\006\042\ufff8\063\134\001\002\000\054\005\ufffb\012" +
    "\ufffb\013\ufffb\024\ufffb\025\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\045\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\052\ufffb\055\ufffb\056\ufffb\060\ufffb\061\ufffb\067\ufffb" +
    "\001\002\000\054\005\uffd1\012\uffd1\013\uffd1\024\uffd1\025" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\045\uffd3\047\uffcf\050\uffd1\051\uffd1\052\uffd1\055\uffd1\056" +
    "\uffd1\060\uffd1\061\uffd1\067\uffd1\001\002\000\006\002\ufffa" +
    "\065\ufffa\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\ufffe\001\002\000\006\002\uff85\065\341\001\002\000\004" +
    "\025\011\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\012\002\003\004\005\005\004\006\007\001" +
    "\001\000\002\001\001\000\010\003\336\004\337\054\341" +
    "\001\001\000\010\004\005\005\004\006\335\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\020\022\015\065" +
    "\017\066\016\067\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\015\022\020\323\023\060\024\025\025" +
    "\023\026\047\031\034\032\066\033\035\034\031\035\056" +
    "\041\027\045\052\046\053\052\055\053\030\071\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\015\022" +
    "\020\045\021\026\023\060\024\025\025\023\026\047\031" +
    "\034\032\066\033\035\034\031\035\056\041\027\045\052" +
    "\046\053\052\055\053\030\054\057\071\040\001\001\000" +
    "\004\061\321\001\001\000\002\001\001\000\004\056\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\177\001\001\000\002\001" +
    "\001\000\014\017\306\022\015\065\017\066\016\067\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\254\001\001\000\002\001\001\000\022" +
    "\024\025\025\023\026\047\031\202\032\066\033\035\034" +
    "\031\041\251\001\001\000\050\015\022\020\045\021\247" +
    "\023\060\024\025\025\023\026\047\031\034\032\066\033" +
    "\035\034\031\035\056\041\027\045\052\046\053\052\055" +
    "\053\030\054\057\071\040\001\001\000\024\024\025\025" +
    "\023\026\047\031\237\032\066\033\035\034\031\035\236" +
    "\041\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\047\221\050\220" +
    "\051\217\054\223\073\222\001\001\000\026\023\213\024" +
    "\025\025\023\026\047\031\034\032\066\033\035\034\031" +
    "\035\056\041\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\161\001\001\000\012" +
    "\007\124\010\125\016\127\054\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\024\025\025\023\026\047\033\071\034\031\001" +
    "\001\000\002\001\001\000\020\024\025\025\023\026\047" +
    "\031\102\032\066\033\035\034\031\001\001\000\002\001" +
    "\001\000\012\024\025\025\023\026\047\034\101\001\001" +
    "\000\012\024\025\025\023\026\047\034\100\001\001\000" +
    "\012\024\025\025\023\026\047\034\077\001\001\000\012" +
    "\024\025\025\023\026\047\034\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\024\025\025" +
    "\023\026\047\033\107\034\031\001\001\000\014\024\025" +
    "\025\023\026\047\033\106\034\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\111\001\001\000\032" +
    "\023\113\024\025\025\023\026\047\027\112\031\034\032" +
    "\066\033\035\034\031\035\056\041\027\054\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\023\117\024\025\025\023\026\047\030\116\031\034" +
    "\032\066\033\035\034\031\035\056\041\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\023\117\024\025" +
    "\025\023\026\047\030\121\031\034\032\066\033\035\034" +
    "\031\035\056\041\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\023\140\024" +
    "\025\025\023\026\047\031\034\032\066\033\035\034\031" +
    "\035\056\041\027\001\001\000\006\010\134\013\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\134" +
    "\013\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\145\012\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\024" +
    "\025\025\023\026\047\031\211\032\066\033\035\034\031" +
    "\040\212\041\166\001\001\000\024\024\025\025\023\026" +
    "\047\031\170\032\066\033\035\034\031\040\171\041\166" +
    "\001\001\000\022\024\025\025\023\026\047\031\206\032" +
    "\066\033\035\034\031\041\204\001\001\000\002\001\001" +
    "\000\024\024\025\025\023\026\047\031\202\032\066\033" +
    "\035\034\031\040\203\041\166\001\001\000\004\042\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\024\025\025\023\026\047\031\201\032\066\033" +
    "\035\034\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\024\025\025\023\026\047\031\207\032\066" +
    "\033\035\034\031\001\001\000\004\042\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\177\001\001" +
    "\000\002\001\001\000\004\063\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\233\065\017\001\001" +
    "\000\002\001\001\000\014\047\232\050\220\051\217\054" +
    "\223\073\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\023\226\024" +
    "\025\025\023\026\047\031\034\032\066\033\035\034\031" +
    "\035\056\041\027\001\001\000\002\001\001\000\004\074" +
    "\230\001\001\000\006\022\231\065\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\177" +
    "\001\001\000\024\024\025\025\023\026\047\031\244\032" +
    "\066\033\035\034\031\040\245\041\166\001\001\000\024" +
    "\024\025\025\023\026\047\031\242\032\066\033\035\034" +
    "\031\040\243\041\166\001\001\000\004\042\177\001\001" +
    "\000\002\001\001\000\004\042\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\024\025" +
    "\025\023\026\047\031\237\032\066\033\035\034\031\035" +
    "\252\041\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\023\260\024\025\025\023\026\047" +
    "\031\034\032\066\033\035\034\031\035\056\041\027\001" +
    "\001\000\002\001\001\000\004\072\262\001\001\000\006" +
    "\022\263\065\017\001\001\000\002\001\001\000\004\075" +
    "\265\001\001\000\012\010\270\014\267\015\271\016\272" +
    "\001\001\000\004\056\303\001\001\000\004\076\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\023\275\024\025\025\023\026" +
    "\047\031\034\032\066\033\035\034\031\035\056\041\027" +
    "\001\001\000\002\001\001\000\026\023\277\024\025\025" +
    "\023\026\047\031\034\032\066\033\035\034\031\035\056" +
    "\041\027\001\001\000\004\077\300\001\001\000\002\001" +
    "\001\000\014\017\302\022\015\065\017\066\016\067\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\023" +
    "\305\024\025\025\023\026\047\031\034\032\066\033\035" +
    "\034\031\035\056\041\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\023\311\024\025" +
    "\025\023\026\047\031\034\032\066\033\035\034\031\035" +
    "\056\041\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\023\314\024\025\025\023\026\047\031\034\032" +
    "\066\033\035\034\031\035\056\041\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\326\012" +
    "\152\001\001\000\002\001\001\000\010\007\330\010\331" +
    "\054\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\055\333\001\001\000\014\017\334\022\015\065\017" +
    "\066\016\067\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\342\004\337\054\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    CodeLexer lex;

	@SuppressWarnings("deprecation")
	public parser(CodeLexer lex) {
		this.lex = lex;
		this.symbolFactory = new DefaultSymbolFactory();
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	ArbolSintactico arbol = new ArbolSintactico();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= inicio 
            {
              Object RESULT =null;
		 AnalisisSemantico semantica = new AnalisisSemantico(arbol); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= funcion inicio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= funcion_main bolsa_navidenna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bolsa_navidenna ::= funcion bolsa_navidenna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsa_navidenna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bolsa_navidenna ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsa_navidenna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 arbol.nuevasVariables(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= FUNCTION PERSONA DOS_PUNTOS tipo ABRECUENTO parametros CIERRECUENTO NT$0 bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 arbol.agregar(new Funcion(nf, tf, arbol.variables(true), arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion_main ::= FUNCTION MAIN ABRECUENTO CIERRECUENTO bloque_codigo 
            {
              Object RESULT =null;
		 arbol.agregar(new Funcion(arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_main",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros ::= parametro COMA mas_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // mas_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // mas_parametros ::= parametro COMA mas_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametro ::= PERSONA DOS_PUNTOS tipo 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(new Variable(np, tp)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= PAPA_NOEL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= SANTA_CLAUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= SAN_NICOLAS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= NINO_JESUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= COLACHO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= array 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // array ::= PAPA_NOEL ABREEMPAQUE L_PAPA_NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // array ::= NINO_JESUS ABREEMPAQUE L_PAPA_NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$1 ::= 
            {
              Object RESULT =null;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = nv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignar_variable_declarada ::= PERSONA NT$1 ENTREGA regalo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable_declarada",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarar_asignar_variable ::= parametro ENTREGA regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_asignar_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignar_variable ::= asignar_variable_declarada 
            {
              Object RESULT =null;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "asignar_variable_declarada|"+nv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignar_variable ::= declarar_asignar_variable 
            {
              Object RESULT =null;
		 RESULT = "declarar_asignar_variable|null"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.expresion(arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // linea_codigo ::= regalo NT$2 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.declaracionesVariables(arbol.variables())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // linea_codigo ::= LOCAL parametros NT$3 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$4 ::= 
            {
              Object RESULT =null;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 arbol.agregar(LineaCodigo.asignacionVariable(nv, arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // linea_codigo ::= asignar_variable_declarada NT$4 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$5 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.declaracionAsignacionVariable(arbol.variables(), arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // linea_codigo ::= LOCAL declarar_asignar_variable NT$5 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // linea_codigo ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$6 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.returnLine(arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // linea_codigo ::= ENVIA regalo NT$6 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$7 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.breakLine()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // linea_codigo ::= CORTA NT$7 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // linea_codigo ::= ciclo_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // linea_codigo ::= ciclo_do_until FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // linea_codigo ::= NARRA ABRECUENTO regalo CIERRECUENTO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // codigo_multilinea ::= linea_codigo codigo_multilinea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_multilinea",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // codigo_multilinea ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_multilinea",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$8 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.bloqueCodigo()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // codigo_contenido ::= NT$8 ABREREGALO codigo_multilinea CIERRAREGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_contenido",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$9 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.bloqueCodigo()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque_codigo ::= NT$9 linea_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$10 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.bloqueCodigo()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloque_codigo ::= NT$10 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque_codigo ::= codigo_contenido 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // regalo ::= expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // regalo ::= expresion_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valor ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valor ::= PERSONA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.identificador(p)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valor ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valor ::= ESCUCHA ABRECUENTO CIERRECUENTO 
            {
              Object RESULT =null;
		 arbol.agregar(Expresion.read()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= L_COLACHO 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("float", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal ::= L_SAN_NICOLAS 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("string", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literal ::= L_PAPA_NOEL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("int", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal ::= L_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("boolean", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal ::= L_NINO_JESUS 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("char", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$11 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // llamada_funcion ::= PERSONA ABRECUENTO NT$11 expresiones CIERRECUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 arbol.agregar(Expresion.llamadaFuncion(f, arbol.expresiones(false))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresiones ::= regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresiones ::= regalo COMA mas_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresiones ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // mas_expresiones ::= regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // mas_expresiones ::= regalo COMA mas_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion_aritmetica ::= termino_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion_aritmetica ::= expresion_aritmetica RUDOLPH termino_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion_aritmetica ::= expresion_aritmetica DASHER termino_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion_aritmetica ::= operador_aritmetico_unario termino_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // termino_aritmetico ::= factor_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // termino_aritmetico ::= termino_aritmetico COMET factor_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // termino_aritmetico ::= termino_aritmetico VIXEN factor_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // termino_aritmetico ::= termino_aritmetico TOTIN factor_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // termino_aritmetico ::= termino_aritmetico RENILLO factor_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // factor_aritmetico ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_aritmetico",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // factor_aritmetico ::= ABRECUENTO expresion_aritmetica CIERRECUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_aritmetico",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operador_aritmetico_unario ::= GRINCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_unario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operador_aritmetico_unario ::= QUIEN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_unario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operador_aritmetico_unario ::= DASHER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_unario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion_logica ::= expresion_logica GASPAR opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion_logica ::= expresion_logica GASPAR expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion_logica ::= expresion_aritmetica GASPAR expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion_logica ::= expresion_aritmetica GASPAR opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion_logica ::= expresion_logica MELCHOR expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion_logica ::= expresion_logica MELCHOR opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion_logica ::= expresion_aritmetica MELCHOR expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion_logica ::= expresion_aritmetica MELCHOR opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion_logica ::= BALTASAR ABRECUENTO expresion_logica CIERRECUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion_logica ::= ABRECUENTO expresion_logica CIERRECUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion_logica ::= expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion_logica ::= BALTASAR expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // opciones_expresion_relacional ::= expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_expresion_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opciones_expresion_relacional ::= ABRECUENTO expresion_relacional CIERRECUENTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_expresion_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opciones_expresion_relacional ::= BALTASAR opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_expresion_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion_relacional ::= expresion_aritmetica operador_relacional expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_relacional",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion_relacional ::= BALTASAR expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_relacional",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operador_relacional ::= KNECHT_RUPRECHT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operador_relacional ::= KRAMPUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operador_relacional ::= BELSNICKEL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operador_relacional ::= ZWARTE_PIET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operador_relacional ::= SNOWBALL_ALABASTRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operador_relacional ::= PEPPER_MINSTIX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // condicional ::= condicional_if condicionales_elif 
            {
              Object RESULT =null;
		 arbol.condicional(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // condicionales_elif ::= condicional_elif condicionales_elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // condicionales_elif ::= condicional_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // condicionales_elif ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$12 ::= 
            {
              Object RESULT =null;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // condicional_if ::= NT$12 ELFO ABRECUENTO regalo CIERRECUENTO NT$13 codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 arbol.agregar(Condicional.ifLine(arbol.expresiones(true), arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_if",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$14 ::= 
            {
              Object RESULT =null;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condicional_elif ::= NT$14 HADA ABRECUENTO regalo CIERRECUENTO NT$15 codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 arbol.agregar(Condicional.elif(arbol.expresiones(true), arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_elif",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // condicional_else ::= DUENDE codigo_contenido 
            {
              Object RESULT =null;
		 arbol.agregar(Condicional.elseCondition(arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_else",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$16 ::= 
            {
              Object RESULT =null;
 arbol.nuevasVariables();  arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 arbol.nuevasVariables(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$18 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ciclo_for ::= ENVUELVE ABRECUENTO NT$16 asignar_variable NT$17 COMA regalo COMA regalo NT$18 CIERRECUENTO bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		 arbol.agregar(LineaCodigo.forLine(av, arbol, arbol.expresiones(true), arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ciclo_do_until ::= HACE bloque_codigo REVISA ABRECUENTO regalo CIERRECUENTO 
            {
              Object RESULT =null;
		 arbol.agregar(LineaCodigo.doUntil(arbol.bloqueCodigo(), arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_do_until",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
