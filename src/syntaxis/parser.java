
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package syntaxis;

import java_cup.runtime.*;
import lexical.CodeLexer;
import semantic.*;
import compilation.Global;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\004\000\002\003\004\000\002\003\003" +
    "\000\002\055\002\000\002\004\013\000\002\005\007\000" +
    "\002\007\003\000\002\007\005\000\002\007\003\000\002" +
    "\013\003\000\002\013\005\000\002\010\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\006\000" +
    "\002\012\006\000\002\056\002\000\002\015\006\000\002" +
    "\016\005\000\002\014\003\000\002\014\003\000\002\057" +
    "\002\000\002\020\005\000\002\060\002\000\002\020\006" +
    "\000\002\061\002\000\002\020\005\000\002\062\002\000" +
    "\002\020\006\000\002\020\003\000\002\063\002\000\002" +
    "\020\006\000\002\064\002\000\002\020\005\000\002\020" +
    "\003\000\002\020\004\000\002\065\002\000\002\020\010" +
    "\000\002\021\004\000\002\021\003\000\002\066\002\000" +
    "\002\022\006\000\002\067\002\000\002\017\004\000\002" +
    "\070\002\000\002\017\004\000\002\017\003\000\002\023" +
    "\003\000\002\023\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\007\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\071\002\000\002\025\007\000\002\027" +
    "\003\000\002\027\005\000\002\027\003\000\002\030\003" +
    "\000\002\030\005\000\002\031\003\000\002\072\002\000" +
    "\002\031\006\000\002\073\002\000\002\031\006\000\002" +
    "\031\004\000\002\033\003\000\002\074\002\000\002\033" +
    "\006\000\002\075\002\000\002\033\006\000\002\076\002" +
    "\000\002\033\006\000\002\077\002\000\002\033\006\000" +
    "\002\034\003\000\002\034\005\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\035\005\000\002\035" +
    "\005\000\002\035\006\000\002\035\005\000\002\035\006" +
    "\000\002\035\004\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\003\000\002\036\005\000\002" +
    "\037\005\000\002\041\003\000\002\043\003\000\002\044" +
    "\003\000\002\042\003\000\002\042\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\045\004\000\002" +
    "\047\004\000\002\047\003\000\002\047\003\000\002\100" +
    "\002\000\002\101\002\000\002\046\011\000\002\102\002" +
    "\000\002\103\002\000\002\050\011\000\002\051\004\000" +
    "\002\104\002\000\002\105\002\000\002\106\002\000\002" +
    "\052\016\000\002\053\010\000\002\054\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\004\064\007\001\002\000\004\002\352\001" +
    "\002\000\006\002\uff7e\064\347\001\002\000\004\064\007" +
    "\001\002\000\006\025\011\065\012\001\002\000\004\002" +
    "\000\001\002\000\004\063\334\001\002\000\004\040\013" +
    "\001\002\000\004\041\014\001\002\000\054\005\uffd0\012" +
    "\uffd0\013\uffd0\024\uffd0\025\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\044\uffd2\046\uffce\047\uffd0\050" +
    "\uffd0\051\uffd0\054\uffd0\055\uffd0\057\uffd0\060\uffd0\066\uffd0" +
    "\001\002\000\050\005\056\012\044\013\071\024\047\025" +
    "\027\033\046\034\072\035\037\036\070\037\067\040\051" +
    "\047\036\050\054\051\uff8a\054\043\055\042\057\060\060" +
    "\045\066\066\001\002\000\060\002\uffcc\005\uffcc\012\uffcc" +
    "\013\uffcc\024\uffcc\025\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\045\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\064\uffcc\066" +
    "\uffcc\001\002\000\004\044\023\001\002\000\006\002\ufff9" +
    "\064\ufff9\001\002\000\004\046\022\001\002\000\060\002" +
    "\uffcd\005\uffcd\012\uffcd\013\uffcd\024\uffcd\025\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\045\uffcd\047" +
    "\uffcd\050\uffcd\051\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd" +
    "\060\uffcd\064\uffcd\066\uffcd\001\002\000\052\005\056\012" +
    "\044\013\071\024\047\025\027\033\046\034\072\035\037" +
    "\036\070\037\067\040\051\045\uff7e\047\036\050\054\051" +
    "\uff8a\054\043\055\042\057\060\060\045\066\066\001\002" +
    "\000\006\022\216\023\217\001\002\000\004\046\uffe1\001" +
    "\002\000\044\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\041\uffc7\046\uffc7\062\uffc7\001\002" +
    "\000\044\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\040\124\046\uffc8\061\uffea\001\002\000" +
    "\044\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022" +
    "\uffc9\023\uffc9\041\uffc9\046\uffc9\062\uffc9\001\002\000\004" +
    "\045\325\001\002\000\014\022\uff9c\023\uff9c\041\uff9c\046" +
    "\uff9c\062\uff9c\001\002\000\004\046\324\001\002\000\044" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\014" +
    "\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\041\uffb3\046\uffb3\062\uffb3\001\002\000\004\051" +
    "\316\001\002\000\004\040\311\001\002\000\044\004\uffc3" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\041\uffc3\046\uffc3\062\uffc3\001\002\000\034\004\115\005" +
    "\116\014\203\015\205\016\204\017\206\020\210\021\207" +
    "\022\216\023\217\041\uffcb\046\uffcb\062\uffcb\001\002\000" +
    "\044\004\uffb9\005\uffb9\006\101\007\100\010\102\011\077" +
    "\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\041\uffb9\046\uffb9\062\uffb9\001\002\000\054" +
    "\005\uffd0\012\uffd0\013\uffd0\024\uffd0\025\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\044\uffd2\046\uffce" +
    "\047\uffd0\050\uffd0\051\uffd0\054\uffd0\055\uffd0\057\uffd0\060" +
    "\uffd0\066\uffd0\001\002\000\004\040\257\001\002\000\022" +
    "\025\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\050\uffa8\001\002\000\004\046\uffda\001\002\000\044" +
    "\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\041\uffc5\046\uffc5\062\uffc5\001\002\000\004\040" +
    "\uff99\001\002\000\052\005\056\012\044\013\071\024\047" +
    "\025\027\033\046\034\072\035\037\036\070\037\067\040" +
    "\051\045\uff7e\047\036\050\054\051\uff8a\054\043\055\042" +
    "\057\060\060\045\066\066\001\002\000\030\005\uff98\012" +
    "\uff98\013\uff98\025\uff98\033\uff98\034\uff98\035\uff98\036\uff98" +
    "\037\uff98\040\uff98\050\uff98\001\002\000\030\005\056\012" +
    "\044\013\071\025\074\033\046\034\072\035\037\036\070" +
    "\037\067\040\051\050\054\001\002\000\044\004\uffaa\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\041" +
    "\uffaa\046\uffaa\062\uffaa\001\002\000\004\063\247\001\002" +
    "\000\060\002\uffdd\005\uffdd\012\uffdd\013\uffdd\024\uffdd\025" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\045\uffdd\047\uffdd\050\uffdd\051\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\064\uffdd\066\uffdd\001\002\000\022" +
    "\025\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\050\uffa6\001\002\000\064\002\uff7e\005\uff7e\012\uff7e" +
    "\013\uff7e\024\uff7e\025\uff7e\033\uff7e\034\uff7e\035\uff7e\036" +
    "\uff7e\037\uff7e\040\uff7e\045\uff7e\047\uff7e\050\uff7e\051\uff7e" +
    "\052\uff87\053\231\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060" +
    "\uff7e\064\uff7e\066\uff7e\001\002\000\032\005\056\012\044" +
    "\013\071\024\047\025\074\033\046\034\072\035\037\036" +
    "\070\037\067\040\051\050\054\001\002\000\060\002\uffd8" +
    "\005\uffd8\012\uffd8\013\uffd8\024\uffd8\025\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\045\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060" +
    "\uffd8\064\uffd8\066\uffd8\001\002\000\014\022\216\023\217" +
    "\041\uffca\046\uffca\062\uffca\001\002\000\004\045\uffd3\001" +
    "\002\000\004\040\051\001\002\000\004\046\uffe5\001\002" +
    "\000\006\025\137\046\uff7e\001\002\000\044\004\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\041" +
    "\uffc1\046\uffc1\062\uffc1\001\002\000\044\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\041\uffc2" +
    "\046\uffc2\062\uffc2\001\002\000\022\025\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\050\uffa7\001\002" +
    "\000\044\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\041\uffc4\046\uffc4\062\uffc4\001\002\000" +
    "\022\025\074\033\046\034\072\035\037\036\070\037\067" +
    "\040\051\050\054\001\002\000\046\004\uffc8\005\uffc8\006" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\040\124\041" +
    "\uffc8\046\uffc8\062\uffc8\001\002\000\030\005\056\012\044" +
    "\013\071\025\074\033\046\034\072\035\037\036\070\037" +
    "\067\040\051\050\054\001\002\000\044\004\uffb4\005\uffb4" +
    "\006\101\007\100\010\102\011\077\014\uffb4\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\041\uffb4" +
    "\046\uffb4\062\uffb4\001\002\000\022\025\uffac\033\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\050\uffac\001\002" +
    "\000\022\025\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\050\uffb0\001\002\000\022\025\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\050\uffb2\001" +
    "\002\000\022\025\uffae\033\uffae\034\uffae\035\uffae\036\uffae" +
    "\037\uffae\040\uffae\050\uffae\001\002\000\022\025\074\033" +
    "\046\034\072\035\037\036\070\037\067\040\051\050\054" +
    "\001\002\000\044\004\uffad\005\uffad\006\uffad\007\uffad\010" +
    "\uffad\011\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\041\uffad\046\uffad\062\uffad\001" +
    "\002\000\022\025\074\033\046\034\072\035\037\036\070" +
    "\037\067\040\051\050\054\001\002\000\044\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\041" +
    "\uffb1\046\uffb1\062\uffb1\001\002\000\022\025\074\033\046" +
    "\034\072\035\037\036\070\037\067\040\051\050\054\001" +
    "\002\000\044\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf" +
    "\011\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\041\uffaf\046\uffaf\062\uffaf\001\002" +
    "\000\022\025\074\033\046\034\072\035\037\036\070\037" +
    "\067\040\051\050\054\001\002\000\044\004\uffab\005\uffab" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\041\uffab" +
    "\046\uffab\062\uffab\001\002\000\010\004\115\005\116\041" +
    "\114\001\002\000\044\004\uff97\005\uff97\006\uff97\007\uff97" +
    "\010\uff97\011\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020" +
    "\uff97\021\uff97\022\uff97\023\uff97\041\uff97\046\uff97\062\uff97" +
    "\001\002\000\022\025\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\050\uffb8\001\002\000\022\025\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\050" +
    "\uffb6\001\002\000\044\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\011\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\022\uffa9\023\uffa9\041\uffa9\046\uffa9\062\uffa9" +
    "\001\002\000\022\025\074\033\046\034\072\035\037\036" +
    "\070\037\067\040\051\050\054\001\002\000\044\004\uffb5" +
    "\005\uffb5\006\101\007\100\010\102\011\077\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\041\uffb5\046\uffb5\062\uffb5\001\002\000\022\025\074\033" +
    "\046\034\072\035\037\036\070\037\067\040\051\050\054" +
    "\001\002\000\044\004\uffb7\005\uffb7\006\101\007\100\010" +
    "\102\011\077\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\041\uffb7\046\uffb7\062\uffb7\001" +
    "\002\000\034\005\uffc0\012\uffc0\013\uffc0\024\uffc0\025\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\050\uffc0\001\002\000\034\005\056\012\044\013\071" +
    "\024\047\025\074\033\046\034\072\035\037\036\070\037" +
    "\067\040\051\041\uff7e\050\054\001\002\000\004\041\136" +
    "\001\002\000\006\041\uffbe\062\131\001\002\000\004\041" +
    "\uffbc\001\002\000\032\005\056\012\044\013\071\024\047" +
    "\025\074\033\046\034\072\035\037\036\070\037\067\040" +
    "\051\050\054\001\002\000\004\041\uffbd\001\002\000\006" +
    "\041\uffbb\062\134\001\002\000\032\005\056\012\044\013" +
    "\071\024\047\025\074\033\046\034\072\035\037\036\070" +
    "\037\067\040\051\050\054\001\002\000\004\041\uffba\001" +
    "\002\000\044\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\011\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\041\uffbf\046\uffbf\062\uffbf\001\002" +
    "\000\004\063\157\001\002\000\004\046\uffe3\001\002\000" +
    "\010\046\ufff8\061\146\062\147\001\002\000\006\041\ufff6" +
    "\046\ufff6\001\002\000\004\046\uffdf\001\002\000\004\046" +
    "\145\001\002\000\060\002\uffde\005\uffde\012\uffde\013\uffde" +
    "\024\uffde\025\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\045\uffde\047\uffde\050\uffde\051\uffde\054\uffde" +
    "\055\uffde\056\uffde\057\uffde\060\uffde\064\uffde\066\uffde\001" +
    "\002\000\032\005\056\012\044\013\071\024\047\025\074" +
    "\033\046\034\072\035\037\036\070\037\067\040\051\050" +
    "\054\001\002\000\004\025\137\001\002\000\010\041\ufff5" +
    "\046\ufff5\062\152\001\002\000\006\041\ufff7\046\ufff7\001" +
    "\002\000\004\025\137\001\002\000\006\041\ufff4\046\ufff4" +
    "\001\002\000\006\046\uffe8\062\uffe8\001\002\000\004\046" +
    "\156\001\002\000\060\002\uffe2\005\uffe2\012\uffe2\013\uffe2" +
    "\024\uffe2\025\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\045\uffe2\047\uffe2\050\uffe2\051\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\060\uffe2\064\uffe2\066\uffe2\001" +
    "\002\000\014\026\164\027\162\030\165\031\163\032\160" +
    "\001\002\000\014\040\uffee\041\uffee\046\uffee\061\uffee\062" +
    "\uffee\001\002\000\012\041\ufff3\046\ufff3\061\ufff3\062\ufff3" +
    "\001\002\000\014\040\ufff1\041\ufff1\046\ufff1\061\ufff1\062" +
    "\ufff1\001\002\000\016\040\uffef\041\uffef\042\172\046\uffef" +
    "\061\uffef\062\uffef\001\002\000\016\040\ufff2\041\ufff2\042" +
    "\167\046\ufff2\061\ufff2\062\ufff2\001\002\000\014\040\ufff0" +
    "\041\ufff0\046\ufff0\061\ufff0\062\ufff0\001\002\000\014\040" +
    "\uffed\041\uffed\046\uffed\061\uffed\062\uffed\001\002\000\004" +
    "\035\170\001\002\000\004\043\171\001\002\000\014\040" +
    "\uffec\041\uffec\046\uffec\061\uffec\062\uffec\001\002\000\004" +
    "\035\173\001\002\000\004\043\174\001\002\000\014\040" +
    "\uffeb\041\uffeb\046\uffeb\061\uffeb\062\uffeb\001\002\000\004" +
    "\046\176\001\002\000\060\002\uffe4\005\uffe4\012\uffe4\013" +
    "\uffe4\024\uffe4\025\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\045\uffe4\047\uffe4\050\uffe4\051\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\064\uffe4\066\uffe4" +
    "\001\002\000\014\022\uffa0\023\uffa0\041\uffa0\046\uffa0\062" +
    "\uffa0\001\002\000\030\005\056\012\044\013\071\025\074" +
    "\033\046\034\072\035\037\036\070\037\067\040\051\050" +
    "\054\001\002\000\004\041\114\001\002\000\024\004\115" +
    "\005\116\014\203\015\205\016\204\017\206\020\210\021" +
    "\207\041\114\001\002\000\030\005\uff94\012\uff94\013\uff94" +
    "\025\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037\uff94\040" +
    "\uff94\050\uff94\001\002\000\030\005\uff92\012\uff92\013\uff92" +
    "\025\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040" +
    "\uff92\050\uff92\001\002\000\030\005\uff93\012\uff93\013\uff93" +
    "\025\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040" +
    "\uff93\050\uff93\001\002\000\030\005\uff91\012\uff91\013\uff91" +
    "\025\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040" +
    "\uff91\050\uff91\001\002\000\030\005\uff8f\012\uff8f\013\uff8f" +
    "\025\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040" +
    "\uff8f\050\uff8f\001\002\000\030\005\uff90\012\uff90\013\uff90" +
    "\025\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040" +
    "\uff90\050\uff90\001\002\000\030\005\056\012\044\013\071" +
    "\025\074\033\046\034\072\035\037\036\070\037\067\040" +
    "\051\050\054\001\002\000\014\022\uffa1\023\uffa1\041\uffa1" +
    "\046\uffa1\062\uffa1\001\002\000\020\004\115\005\116\022" +
    "\uff9a\023\uff9a\041\uff9a\046\uff9a\062\uff9a\001\002\000\014" +
    "\022\uff9b\023\uff9b\041\uff9b\046\uff9b\062\uff9b\001\002\000" +
    "\032\005\056\012\044\013\071\024\047\025\074\033\046" +
    "\034\072\035\037\036\070\037\067\040\051\050\054\001" +
    "\002\000\032\005\uff95\012\uff95\013\uff95\024\uff95\025\uff95" +
    "\033\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\050" +
    "\uff95\001\002\000\032\005\uff96\012\uff96\013\uff96\024\uff96" +
    "\025\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040" +
    "\uff96\050\uff96\001\002\000\004\040\051\001\002\000\020" +
    "\004\115\005\116\022\uffa4\023\uffa4\041\uffa4\046\uffa4\062" +
    "\uffa4\001\002\000\014\022\uffa5\023\uffa5\041\uffa5\046\uffa5" +
    "\062\uffa5\001\002\000\014\022\uffa3\023\uffa3\041\uffa3\046" +
    "\uffa3\062\uffa3\001\002\000\030\005\056\012\044\013\071" +
    "\025\074\033\046\034\072\035\037\036\070\037\067\040" +
    "\051\050\054\001\002\000\022\004\115\005\116\014\203" +
    "\015\205\016\204\017\206\020\210\021\207\001\002\000" +
    "\004\046\uffdc\001\002\000\004\046\230\001\002\000\060" +
    "\002\uffdb\005\uffdb\012\uffdb\013\uffdb\024\uffdb\025\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\045\uffdb" +
    "\047\uffdb\050\uffdb\051\uffdb\054\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\064\uffdb\066\uffdb\001\002\000\004\044\uffd2" +
    "\001\002\000\004\052\240\001\002\000\060\002\uff8c\005" +
    "\uff8c\012\uff8c\013\uff8c\024\uff8c\025\uff8c\033\uff8c\034\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\040\uff8c\045\uff8c\047\uff8c\050" +
    "\uff8c\051\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c" +
    "\064\uff8c\066\uff8c\001\002\000\064\002\uff7e\005\uff7e\012" +
    "\uff7e\013\uff7e\024\uff7e\025\uff7e\033\uff7e\034\uff7e\035\uff7e" +
    "\036\uff7e\037\uff7e\040\uff7e\045\uff7e\047\uff7e\050\uff7e\051" +
    "\uff7e\052\uff87\053\231\054\uff7e\055\uff7e\056\uff7e\057\uff7e" +
    "\060\uff7e\064\uff7e\066\uff7e\001\002\000\060\002\uff8e\005" +
    "\uff8e\012\uff8e\013\uff8e\024\uff8e\025\uff8e\033\uff8e\034\uff8e" +
    "\035\uff8e\036\uff8e\037\uff8e\040\uff8e\045\uff8e\047\uff8e\050" +
    "\uff8e\051\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e" +
    "\064\uff8e\066\uff8e\001\002\000\060\002\uff8b\005\uff8b\012" +
    "\uff8b\013\uff8b\024\uff8b\025\uff8b\033\uff8b\034\uff8b\035\uff8b" +
    "\036\uff8b\037\uff8b\040\uff8b\045\uff8b\047\uff8b\050\uff8b\051" +
    "\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\064\uff8b" +
    "\066\uff8b\001\002\000\060\002\uff8d\005\uff8d\012\uff8d\013" +
    "\uff8d\024\uff8d\025\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d" +
    "\037\uff8d\040\uff8d\045\uff8d\047\uff8d\050\uff8d\051\uff8d\054" +
    "\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\064\uff8d\066\uff8d" +
    "\001\002\000\004\040\241\001\002\000\032\005\056\012" +
    "\044\013\071\024\047\025\074\033\046\034\072\035\037" +
    "\036\070\037\067\040\051\050\054\001\002\000\004\041" +
    "\243\001\002\000\004\044\uff86\001\002\000\004\044\uffd2" +
    "\001\002\000\064\002\uff85\005\uff85\012\uff85\013\uff85\024" +
    "\uff85\025\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037\uff85" +
    "\040\uff85\045\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053" +
    "\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\064\uff85" +
    "\066\uff85\001\002\000\060\002\uff84\005\uff84\012\uff84\013" +
    "\uff84\024\uff84\025\uff84\033\uff84\034\uff84\035\uff84\036\uff84" +
    "\037\uff84\040\uff84\045\uff84\047\uff84\050\uff84\051\uff84\054" +
    "\uff84\055\uff84\056\uff84\057\uff84\060\uff84\064\uff84\066\uff84" +
    "\001\002\000\014\026\164\027\162\030\165\031\163\032" +
    "\160\001\002\000\004\040\251\001\002\000\004\041\252" +
    "\001\002\000\044\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\041\uffc6\046\uffc6\062\uffc6\001" +
    "\002\000\024\004\115\005\116\014\203\015\205\016\204" +
    "\017\206\020\210\021\207\041\114\001\002\000\004\045" +
    "\uffd4\001\002\000\004\046\256\001\002\000\060\002\uffd9" +
    "\005\uffd9\012\uffd9\013\uffd9\024\uffd9\025\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\045\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060" +
    "\uffd9\064\uffd9\066\uffd9\001\002\000\004\025\uff83\001\002" +
    "\000\004\025\261\001\002\000\006\061\uffea\063\157\001" +
    "\002\000\004\062\uff82\001\002\000\004\061\146\001\002" +
    "\000\004\062\uffe7\001\002\000\004\062\uffe6\001\002\000" +
    "\004\062\267\001\002\000\032\005\056\012\044\013\071" +
    "\024\047\025\074\033\046\034\072\035\037\036\070\037" +
    "\067\040\051\050\054\001\002\000\004\062\271\001\002" +
    "\000\032\005\056\012\044\013\071\024\047\025\074\033" +
    "\046\034\072\035\037\036\070\037\067\040\051\050\054" +
    "\001\002\000\004\041\uff81\001\002\000\004\041\274\001" +
    "\002\000\054\005\uffd0\012\uffd0\013\uffd0\024\uffd0\025\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\044" +
    "\uffd2\046\uffce\047\uffd0\050\uffd0\051\uffd0\054\uffd0\055\uffd0" +
    "\057\uffd0\060\uffd0\066\uffd0\001\002\000\060\002\uff80\005" +
    "\uff80\012\uff80\013\uff80\024\uff80\025\uff80\033\uff80\034\uff80" +
    "\035\uff80\036\uff80\037\uff80\040\uff80\045\uff80\047\uff80\050" +
    "\uff80\051\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80" +
    "\064\uff80\066\uff80\001\002\000\004\061\277\001\002\000" +
    "\032\005\056\012\044\013\071\024\047\025\074\033\046" +
    "\034\072\035\037\036\070\037\067\040\051\050\054\001" +
    "\002\000\006\046\uffe9\062\uffe9\001\002\000\004\056\302" +
    "\001\002\000\004\040\303\001\002\000\032\005\056\012" +
    "\044\013\071\024\047\025\074\033\046\034\072\035\037" +
    "\036\070\037\067\040\051\050\054\001\002\000\004\041" +
    "\305\001\002\000\004\046\uff7f\001\002\000\030\005\056" +
    "\012\044\013\071\025\074\033\046\034\072\035\037\036" +
    "\070\037\067\040\051\050\054\001\002\000\020\004\115" +
    "\005\116\022\uffa2\023\uffa2\041\uffa2\046\uffa2\062\uffa2\001" +
    "\002\000\014\022\uff9d\023\uff9d\041\uff9d\046\uff9d\062\uff9d" +
    "\001\002\000\032\005\056\012\044\013\071\024\047\025" +
    "\074\033\046\034\072\035\037\036\070\037\067\040\051" +
    "\050\054\001\002\000\004\041\313\001\002\000\004\046" +
    "\uffd6\001\002\000\004\046\315\001\002\000\060\002\uffd5" +
    "\005\uffd5\012\uffd5\013\uffd5\024\uffd5\025\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\045\uffd5\047\uffd5" +
    "\050\uffd5\051\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060" +
    "\uffd5\064\uffd5\066\uffd5\001\002\000\004\040\317\001\002" +
    "\000\032\005\056\012\044\013\071\024\047\025\074\033" +
    "\046\034\072\035\037\036\070\037\067\040\051\050\054" +
    "\001\002\000\004\041\321\001\002\000\004\044\uff89\001" +
    "\002\000\004\044\uffd2\001\002\000\064\002\uff88\005\uff88" +
    "\012\uff88\013\uff88\024\uff88\025\uff88\033\uff88\034\uff88\035" +
    "\uff88\036\uff88\037\uff88\040\uff88\045\uff88\047\uff88\050\uff88" +
    "\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057" +
    "\uff88\060\uff88\064\uff88\066\uff88\001\002\000\060\002\uffd7" +
    "\005\uffd7\012\uffd7\013\uffd7\024\uffd7\025\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\045\uffd7\047\uffd7" +
    "\050\uffd7\051\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\064\uffd7\066\uffd7\001\002\000\064\002\uffd1\005\uffd1" +
    "\012\uffd1\013\uffd1\024\uffd1\025\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\045\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\064\uffd1\066\uffd1\001\002\000\004\046\327" +
    "\001\002\000\060\002\uffe0\005\uffe0\012\uffe0\013\uffe0\024" +
    "\uffe0\025\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\045\uffe0\047\uffe0\050\uffe0\051\uffe0\054\uffe0\055" +
    "\uffe0\056\uffe0\057\uffe0\060\uffe0\064\uffe0\066\uffe0\001\002" +
    "\000\030\005\056\012\044\013\071\025\074\033\046\034" +
    "\072\035\037\036\070\037\067\040\051\050\054\001\002" +
    "\000\020\004\115\005\116\022\uff9f\023\uff9f\041\uff9f\046" +
    "\uff9f\062\uff9f\001\002\000\014\022\uff9e\023\uff9e\041\uff9e" +
    "\046\uff9e\062\uff9e\001\002\000\060\002\uffcf\005\uffcf\012" +
    "\uffcf\013\uffcf\024\uffcf\025\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\045\uffcf\047\uffcf\050\uffcf\051" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\064\uffcf" +
    "\066\uffcf\001\002\000\014\026\164\027\162\030\165\031" +
    "\163\032\160\001\002\000\004\040\336\001\002\000\006" +
    "\025\137\041\uff7e\001\002\000\004\041\341\001\002\000" +
    "\006\041\ufff8\062\147\001\002\000\054\005\ufffb\012\ufffb" +
    "\013\ufffb\024\ufffb\025\ufffb\033\ufffb\034\ufffb\035\ufffb\036" +
    "\ufffb\037\ufffb\040\ufffb\044\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\054\ufffb\055\ufffb\057\ufffb\060\ufffb\066\ufffb\001" +
    "\002\000\054\005\uffd0\012\uffd0\013\uffd0\024\uffd0\025\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\044" +
    "\uffd2\046\uffce\047\uffd0\050\uffd0\051\uffd0\054\uffd0\055\uffd0" +
    "\057\uffd0\060\uffd0\066\uffd0\001\002\000\006\002\ufffa\064" +
    "\ufffa\001\002\000\004\002\uffff\001\002\000\004\002\ufffe" +
    "\001\002\000\006\002\uff7e\064\347\001\002\000\004\025" +
    "\011\001\002\000\004\002\ufffc\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\012\002\003\004\005\005\004\006\007\001" +
    "\001\000\002\001\001\000\010\003\344\004\345\054\347" +
    "\001\001\000\010\004\005\005\004\006\343\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\017\022\015\066" +
    "\016\067\014\070\020\001\001\000\052\015\024\020\332" +
    "\023\064\024\027\025\025\026\052\031\037\032\072\033" +
    "\040\034\033\035\061\036\023\037\031\041\063\043\051" +
    "\045\054\046\056\052\060\053\032\100\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\015\024\020\047\021" +
    "\030\023\064\024\027\025\025\026\052\031\037\032\072" +
    "\033\040\034\033\035\061\036\023\037\031\041\063\043" +
    "\051\045\054\046\056\052\060\053\032\054\062\100\034" +
    "\001\001\000\004\042\327\001\001\000\004\061\325\001" +
    "\001\000\002\001\001\000\004\056\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\210\042\305\001\001\000" +
    "\002\001\001\000\014\017\300\022\015\066\016\067\014" +
    "\070\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\015\024\020\047\021\253\023\064\024\027\025" +
    "\025\026\052\031\037\032\072\033\040\034\033\035\061" +
    "\036\023\037\031\041\063\043\051\045\054\046\056\052" +
    "\060\053\032\054\062\100\034\001\001\000\002\001\001" +
    "\000\024\024\027\025\025\026\052\031\252\032\072\033" +
    "\040\034\033\037\200\043\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\047\234\050\233\051\232\054\235\102\231\001\001" +
    "\000\034\023\225\024\027\025\025\026\052\031\037\032" +
    "\072\033\040\034\033\035\061\036\023\037\031\041\063" +
    "\043\051\001\001\000\002\001\001\000\004\042\214\001" +
    "\001\000\002\001\001\000\006\036\176\043\177\001\001" +
    "\000\004\057\174\001\001\000\012\007\137\010\140\016" +
    "\142\054\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\024\027\025" +
    "\025\026\052\033\075\034\033\043\074\001\001\000\002" +
    "\001\001\000\022\024\027\025\025\026\052\031\112\032" +
    "\072\033\040\034\033\043\074\001\001\000\002\001\001" +
    "\000\004\077\110\001\001\000\004\075\106\001\001\000" +
    "\004\074\104\001\001\000\004\076\102\001\001\000\014" +
    "\024\027\025\025\026\052\034\103\043\074\001\001\000" +
    "\002\001\001\000\014\024\027\025\025\026\052\034\105" +
    "\043\074\001\001\000\002\001\001\000\014\024\027\025" +
    "\025\026\052\034\107\043\074\001\001\000\002\001\001" +
    "\000\014\024\027\025\025\026\052\034\111\043\074\001" +
    "\001\000\002\001\001\000\004\044\116\001\001\000\002" +
    "\001\001\000\004\072\121\001\001\000\004\073\117\001" +
    "\001\000\002\001\001\000\016\024\027\025\025\026\052" +
    "\033\120\034\033\043\074\001\001\000\002\001\001\000" +
    "\016\024\027\025\025\026\052\033\122\034\033\043\074" +
    "\001\001\000\002\001\001\000\004\071\124\001\001\000" +
    "\040\023\126\024\027\025\025\026\052\027\125\031\037" +
    "\032\072\033\040\034\033\035\061\036\023\037\031\041" +
    "\063\043\051\054\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\023\132\024\027\025" +
    "\025\026\052\030\131\031\037\032\072\033\040\034\033" +
    "\035\061\036\023\037\031\041\063\043\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\023\132\024\027" +
    "\025\025\026\052\030\134\031\037\032\072\033\040\034" +
    "\033\035\061\036\023\037\031\041\063\043\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\062\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\023\153\024\027\025\025\026\052\031\037" +
    "\032\072\033\040\034\033\035\061\036\023\037\031\041" +
    "\063\043\051\001\001\000\006\010\147\013\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\147\013" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\160\012\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\024\027\025\025\026\052\031\201\032\072\033" +
    "\040\034\033\037\200\043\074\001\001\000\004\044\213" +
    "\001\001\000\006\040\210\044\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\024\027\025" +
    "\025\026\052\031\212\032\072\033\040\034\033\043\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\024\027\025\025\026\052\031\220\032\072" +
    "\033\040\034\033\036\221\041\217\043\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\222\043\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\024\027\025\025\026\052\031\224\032\072" +
    "\033\040\034\033\037\200\043\074\001\001\000\004\040" +
    "\210\001\001\000\004\063\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\245\066\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\047\236\050\233" +
    "\051\232\054\235\102\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\023\241\024\027\025\025\026\052\031\037\032\072\033" +
    "\040\034\033\035\061\036\023\037\031\041\063\043\051" +
    "\001\001\000\002\001\001\000\004\103\243\001\001\000" +
    "\006\022\244\066\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\247\012\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\210" +
    "\044\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\104\257\001\001\000\012\010\262" +
    "\014\261\015\263\016\264\001\001\000\004\056\275\001" +
    "\001\000\004\105\265\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\023" +
    "\267\024\027\025\025\026\052\031\037\032\072\033\040" +
    "\034\033\035\061\036\023\037\031\041\063\043\051\001" +
    "\001\000\002\001\001\000\034\023\271\024\027\025\025" +
    "\026\052\031\037\032\072\033\040\034\033\035\061\036" +
    "\023\037\031\041\063\043\051\001\001\000\004\106\272" +
    "\001\001\000\002\001\001\000\014\017\274\022\015\066" +
    "\016\067\014\070\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\023\277\024\027\025\025\026\052\031" +
    "\037\032\072\033\040\034\033\035\061\036\023\037\031" +
    "\041\063\043\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\023\303\024\027\025\025" +
    "\026\052\031\037\032\072\033\040\034\033\035\061\036" +
    "\023\037\031\041\063\043\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\024\027\025\025\026\052\031" +
    "\306\032\072\033\040\034\033\036\307\043\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\023\311\024" +
    "\027\025\025\026\052\031\037\032\072\033\040\034\033" +
    "\035\061\036\023\037\031\041\063\043\051\001\001\000" +
    "\002\001\001\000\004\065\313\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\023\317\024" +
    "\027\025\025\026\052\031\037\032\072\033\040\034\033" +
    "\035\061\036\023\037\031\041\063\043\051\001\001\000" +
    "\002\001\001\000\004\101\321\001\001\000\006\022\322" +
    "\066\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\024\027\025\025\026\052\031\330\032\072\033\040\034" +
    "\033\036\331\043\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\334\012\165\001" +
    "\001\000\002\001\001\000\010\007\336\010\337\054\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\341\001\001\000\014\017\342\022\015\066\016\067\014" +
    "\070\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\350\004\345\054\347\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    CodeLexer lex;

	@SuppressWarnings("deprecation")
	public parser(CodeLexer lex) {
		this.lex = lex;
		this.symbolFactory = new DefaultSymbolFactory();
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	ArbolSintactico arbol = new ArbolSintactico();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= inicio 
            {
              Object RESULT =null;
		 Global.global.setArbol(arbol); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= funcion inicio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= funcion_main bolsa_navidenna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bolsa_navidenna ::= funcion bolsa_navidenna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsa_navidenna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bolsa_navidenna ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsa_navidenna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 arbol.nuevasVariables(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= FUNCTION PERSONA DOS_PUNTOS tipo ABRECUENTO parametros CIERRECUENTO NT$0 bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 arbol.agregar(new Funcion(nf, tf, arbol.variables(true), arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion_main ::= FUNCTION MAIN ABRECUENTO CIERRECUENTO bloque_codigo 
            {
              Object RESULT =null;
		 arbol.agregar(new Funcion(arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_main",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros ::= parametro COMA mas_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // mas_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // mas_parametros ::= parametro COMA mas_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametro ::= PERSONA DOS_PUNTOS tipo 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(new Variable(np, tp)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= PAPA_NOEL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= SANTA_CLAUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= SAN_NICOLAS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= NINO_JESUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= COLACHO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= array 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // array ::= PAPA_NOEL ABREEMPAQUE L_PAPA_NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // array ::= NINO_JESUS ABREEMPAQUE L_PAPA_NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$1 ::= 
            {
              Object RESULT =null;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = nv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignar_variable_declarada ::= PERSONA NT$1 ENTREGA regalo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable_declarada",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarar_asignar_variable ::= parametro ENTREGA regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_asignar_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignar_variable ::= asignar_variable_declarada 
            {
              Object RESULT =null;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "asignar_variable_declarada|"+nv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignar_variable ::= declarar_asignar_variable 
            {
              Object RESULT =null;
		 RESULT = "declarar_asignar_variable|null"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.expresion(arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // linea_codigo ::= regalo NT$2 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.declaracionesVariables(arbol.variables())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // linea_codigo ::= LOCAL parametros NT$3 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$4 ::= 
            {
              Object RESULT =null;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 arbol.agregar(LineaCodigo.asignacionVariable(nv, arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // linea_codigo ::= asignar_variable_declarada NT$4 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$5 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.declaracionAsignacionVariable(arbol.variables(), arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // linea_codigo ::= LOCAL declarar_asignar_variable NT$5 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // linea_codigo ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$6 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.returnLine(arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // linea_codigo ::= ENVIA regalo NT$6 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$7 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.breakLine()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // linea_codigo ::= CORTA NT$7 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // linea_codigo ::= ciclo_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // linea_codigo ::= ciclo_do_until FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$8 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.print(arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // linea_codigo ::= NARRA ABRECUENTO regalo CIERRECUENTO NT$8 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // codigo_multilinea ::= linea_codigo codigo_multilinea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_multilinea",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // codigo_multilinea ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_multilinea",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$9 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.bloqueCodigo()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // codigo_contenido ::= NT$9 ABREREGALO codigo_multilinea CIERRAREGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_contenido",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$10 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.bloqueCodigo()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloque_codigo ::= NT$10 linea_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$11 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.bloqueCodigo()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque_codigo ::= NT$11 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloque_codigo ::= codigo_contenido 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // regalo ::= expresion_aritmetica 
            {
              Object RESULT =null;
		 arbol.agregar(Expresion.separador()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // regalo ::= expresion_logica 
            {
              Object RESULT =null;
		 arbol.agregar(Expresion.separador()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valor ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valor ::= PERSONA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.identificador(p)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valor ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // valor ::= ESCUCHA DOS_PUNTOS tipo ABRECUENTO CIERRECUENTO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 arbol.agregar(Expresion.read(t)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal ::= L_COLACHO 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("float", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literal ::= L_SAN_NICOLAS 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("string", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal ::= L_PAPA_NOEL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("int", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal ::= L_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("boolean", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // literal ::= L_NINO_JESUS 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("char", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$12 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // llamada_funcion ::= PERSONA ABRECUENTO NT$12 expresiones CIERRECUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 arbol.agregar(Expresion.llamadaFuncion(f, arbol.expresiones(false))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresiones ::= regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresiones ::= regalo COMA mas_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresiones ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // mas_expresiones ::= regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // mas_expresiones ::= regalo COMA mas_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion_aritmetica ::= termino_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$13 ::= 
            {
              Object RESULT =null;
 arbol.agregar(Operacion.operando("SUMA")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion_aritmetica ::= expresion_aritmetica RUDOLPH NT$13 termino_aritmetico 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$14 ::= 
            {
              Object RESULT =null;
 arbol.agregar(Operacion.operando("RESTA")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion_aritmetica ::= expresion_aritmetica DASHER NT$14 termino_aritmetico 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion_aritmetica ::= operador_aritmetico_unario termino_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // termino_aritmetico ::= factor_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$15 ::= 
            {
              Object RESULT =null;
 arbol.agregar(Operacion.operando("MULTIPLICACION")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // termino_aritmetico ::= termino_aritmetico COMET NT$15 factor_aritmetico 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$16 ::= 
            {
              Object RESULT =null;
 arbol.agregar(Operacion.operando("DIVISION")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // termino_aritmetico ::= termino_aritmetico VIXEN NT$16 factor_aritmetico 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$17 ::= 
            {
              Object RESULT =null;
 arbol.agregar(Operacion.operando("MODULO")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // termino_aritmetico ::= termino_aritmetico TOTIN NT$17 factor_aritmetico 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$18 ::= 
            {
              Object RESULT =null;
 arbol.agregar(Operacion.operando("POTENCIA")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino_aritmetico ::= termino_aritmetico RENILLO NT$18 factor_aritmetico 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor_aritmetico ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_aritmetico",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // factor_aritmetico ::= parentesis_abierto expresion_aritmetica parentesis_cerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_aritmetico",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operador_aritmetico_unario ::= GRINCH 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("INCREMENTO")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_unario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operador_aritmetico_unario ::= QUIEN 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("DECREMENTO")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_unario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operador_aritmetico_unario ::= DASHER 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("NEGATIVO")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_unario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion_logica ::= expresion_logica and_or opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion_logica ::= expresion_logica and_or expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion_logica ::= expresion_logica and_or not opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion_logica ::= expresion_aritmetica and_or expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion_logica ::= not parentesis_abierto expresion_aritmetica parentesis_cerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion_logica ::= not opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion_logica ::= opciones_expresion_relacional and_or expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion_logica ::= opciones_expresion_relacional and_or opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion_logica ::= expresion_aritmetica and_or opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion_logica ::= expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // opciones_expresion_relacional ::= parentesis_abierto expresion_relacional parentesis_cerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_expresion_relacional",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion_relacional ::= expresion_aritmetica operador_relacional expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_relacional",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // not ::= BALTASAR 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("NOT")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("not",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parentesis_abierto ::= ABRECUENTO 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("PARENTESIS_ABIERTO")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis_abierto",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parentesis_cerrado ::= CIERRECUENTO 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("PARENTESIS_CERRADO")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis_cerrado",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // and_or ::= GASPAR 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("AND")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_or",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // and_or ::= MELCHOR 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("OR")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_or",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operador_relacional ::= KNECHT_RUPRECHT 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("MAYOR_IGUAL")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operador_relacional ::= KRAMPUS 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("MAYOR")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operador_relacional ::= BELSNICKEL 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("MENOR_IGUAL")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operador_relacional ::= ZWARTE_PIET 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("MENOR")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operador_relacional ::= SNOWBALL_ALABASTRO 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("DISTINTO")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operador_relacional ::= PEPPER_MINSTIX 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("IGUAL")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condicional ::= condicional_if condicionales_elif 
            {
              Object RESULT =null;
		 arbol.condicional(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // condicionales_elif ::= condicional_elif condicionales_elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condicionales_elif ::= condicional_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // condicionales_elif ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$19 ::= 
            {
              Object RESULT =null;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$20 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // condicional_if ::= NT$19 ELFO ABRECUENTO regalo CIERRECUENTO NT$20 codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 arbol.agregar(Condicional.ifLine(arbol.expresiones(true), arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_if",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$21 ::= 
            {
              Object RESULT =null;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$22 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // condicional_elif ::= NT$21 HADA ABRECUENTO regalo CIERRECUENTO NT$22 codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 arbol.agregar(Condicional.elif(arbol.expresiones(true), arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_elif",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // condicional_else ::= DUENDE codigo_contenido 
            {
              Object RESULT =null;
		 arbol.agregar(Condicional.elseCondition(arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_else",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$23 ::= 
            {
              Object RESULT =null;
 arbol.nuevasVariables();  arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 arbol.nuevasVariables(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$25",68, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ciclo_for ::= ENVUELVE ABRECUENTO NT$23 asignar_variable NT$24 COMA regalo COMA regalo NT$25 CIERRECUENTO bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		 arbol.agregar(LineaCodigo.forLine(av, arbol, arbol.expresiones(true), arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ciclo_do_until ::= HACE bloque_codigo REVISA ABRECUENTO regalo CIERRECUENTO 
            {
              Object RESULT =null;
		 arbol.agregar(LineaCodigo.doUntil(arbol.bloqueCodigo(), arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_do_until",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
