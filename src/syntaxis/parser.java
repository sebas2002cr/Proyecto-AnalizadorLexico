
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package syntaxis;

import java_cup.runtime.*;
import lexical.CodeLexer;
import semantic.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\203\000\002\002\004\000\002\002\003\000\002\006" +
    "\004\000\002\006\004\000\002\003\004\000\002\003\003" +
    "\000\002\055\002\000\002\004\013\000\002\005\007\000" +
    "\002\007\003\000\002\007\005\000\002\007\003\000\002" +
    "\013\003\000\002\013\005\000\002\010\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\006\000" +
    "\002\012\006\000\002\056\002\000\002\015\006\000\002" +
    "\016\005\000\002\014\003\000\002\014\003\000\002\057" +
    "\002\000\002\020\005\000\002\060\002\000\002\020\006" +
    "\000\002\061\002\000\002\020\005\000\002\062\002\000" +
    "\002\020\006\000\002\020\003\000\002\063\002\000\002" +
    "\020\006\000\002\064\002\000\002\020\005\000\002\020" +
    "\003\000\002\020\004\000\002\020\007\000\002\021\004" +
    "\000\002\021\003\000\002\065\002\000\002\022\006\000" +
    "\002\066\002\000\002\017\004\000\002\067\002\000\002" +
    "\017\004\000\002\017\003\000\002\023\003\000\002\023" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\005\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\070\002\000\002\025\007\000\002\027\003\000\002\027" +
    "\005\000\002\027\003\000\002\030\003\000\002\030\005" +
    "\000\002\031\003\000\002\071\002\000\002\031\006\000" +
    "\002\072\002\000\002\031\006\000\002\031\004\000\002" +
    "\033\003\000\002\073\002\000\002\033\006\000\002\074" +
    "\002\000\002\033\006\000\002\075\002\000\002\033\006" +
    "\000\002\076\002\000\002\033\006\000\002\034\003\000" +
    "\002\034\005\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\035\005\000\002\035\005\000\002\035" +
    "\006\000\002\035\005\000\002\035\006\000\002\035\004" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\003\000\002\036\005\000\002\037\005\000\002" +
    "\041\003\000\002\043\003\000\002\044\003\000\002\042" +
    "\003\000\002\042\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\045\004\000\002\047\004\000\002" +
    "\047\003\000\002\047\003\000\002\077\002\000\002\100" +
    "\002\000\002\046\011\000\002\101\002\000\002\102\002" +
    "\000\002\050\011\000\002\051\004\000\002\103\002\000" +
    "\002\104\002\000\002\105\002\000\002\052\016\000\002" +
    "\053\010\000\002\054\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\004\064\007\001\002\000\004\002\347\001" +
    "\002\000\006\002\uff7f\064\344\001\002\000\004\064\007" +
    "\001\002\000\006\025\011\065\012\001\002\000\004\002" +
    "\000\001\002\000\004\063\331\001\002\000\004\040\013" +
    "\001\002\000\004\041\014\001\002\000\054\005\uffd1\012" +
    "\uffd1\013\uffd1\024\uffd1\025\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\044\uffd3\046\uffcf\047\uffd1\050" +
    "\uffd1\051\uffd1\054\uffd1\055\uffd1\057\uffd1\060\uffd1\066\uffd1" +
    "\001\002\000\004\046\330\001\002\000\060\002\uffcd\005" +
    "\uffcd\012\uffcd\013\uffcd\024\uffcd\025\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\040\uffcd\045\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\064\uffcd\066\uffcd\001\002\000\050\005\055\012\043\013" +
    "\071\024\046\025\026\033\045\034\070\035\036\036\067" +
    "\037\066\040\050\047\035\050\053\051\uff8b\054\042\055" +
    "\041\057\057\060\044\066\065\001\002\000\004\044\022" +
    "\001\002\000\006\002\ufff9\064\ufff9\001\002\000\052\005" +
    "\055\012\043\013\071\024\046\025\026\033\045\034\070" +
    "\035\036\036\067\037\066\040\050\045\uff7f\047\035\050" +
    "\053\051\uff8b\054\042\055\041\057\057\060\044\066\065" +
    "\001\002\000\006\022\215\023\216\001\002\000\004\046" +
    "\uffe1\001\002\000\044\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\041\uffc8\046\uffc8\062\uffc8" +
    "\001\002\000\044\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\040\123\046\uffc9\061\uffea\001" +
    "\002\000\044\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\041\uffca\046\uffca\062\uffca\001\002" +
    "\000\004\045\321\001\002\000\014\022\uff9d\023\uff9d\041" +
    "\uff9d\046\uff9d\062\uff9d\001\002\000\004\046\320\001\002" +
    "\000\044\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\041\uffb4\046\uffb4\062\uffb4\001\002\000" +
    "\004\051\312\001\002\000\004\040\306\001\002\000\044" +
    "\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\041\uffc4\046\uffc4\062\uffc4\001\002\000\034\004" +
    "\114\005\115\014\202\015\204\016\203\017\205\020\210" +
    "\021\206\022\215\023\216\041\uffcc\046\uffcc\062\uffcc\001" +
    "\002\000\044\004\uffba\005\uffba\006\101\007\077\010\100" +
    "\011\076\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\041\uffba\046\uffba\062\uffba\001\002" +
    "\000\054\005\uffd1\012\uffd1\013\uffd1\024\uffd1\025\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\044\uffd3" +
    "\046\uffcf\047\uffd1\050\uffd1\051\uffd1\054\uffd1\055\uffd1\057" +
    "\uffd1\060\uffd1\066\uffd1\001\002\000\004\040\254\001\002" +
    "\000\022\025\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037" +
    "\uffa9\040\uffa9\050\uffa9\001\002\000\004\046\uffda\001\002" +
    "\000\044\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\023\uffc6\041\uffc6\046\uffc6\062\uffc6\001\002\000" +
    "\004\040\uff9a\001\002\000\052\005\055\012\043\013\071" +
    "\024\046\025\026\033\045\034\070\035\036\036\067\037" +
    "\066\040\050\045\uff7f\047\035\050\053\051\uff8b\054\042" +
    "\055\041\057\057\060\044\066\065\001\002\000\030\005" +
    "\uff99\012\uff99\013\uff99\025\uff99\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\050\uff99\001\002\000\030\005" +
    "\055\012\043\013\071\025\073\033\045\034\070\035\036" +
    "\036\067\037\066\040\050\050\053\001\002\000\044\004" +
    "\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\014\uffab" +
    "\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023" +
    "\uffab\041\uffab\046\uffab\062\uffab\001\002\000\004\040\246" +
    "\001\002\000\060\002\uffdd\005\uffdd\012\uffdd\013\uffdd\024" +
    "\uffdd\025\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\045\uffdd\047\uffdd\050\uffdd\051\uffdd\054\uffdd\055" +
    "\uffdd\056\uffdd\057\uffdd\060\uffdd\064\uffdd\066\uffdd\001\002" +
    "\000\022\025\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\050\uffa7\001\002\000\064\002\uff7f\005\uff7f" +
    "\012\uff7f\013\uff7f\024\uff7f\025\uff7f\033\uff7f\034\uff7f\035" +
    "\uff7f\036\uff7f\037\uff7f\040\uff7f\045\uff7f\047\uff7f\050\uff7f" +
    "\051\uff7f\052\uff88\053\230\054\uff7f\055\uff7f\056\uff7f\057" +
    "\uff7f\060\uff7f\064\uff7f\066\uff7f\001\002\000\032\005\055" +
    "\012\043\013\071\024\046\025\073\033\045\034\070\035" +
    "\036\036\067\037\066\040\050\050\053\001\002\000\060" +
    "\002\uffd8\005\uffd8\012\uffd8\013\uffd8\024\uffd8\025\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\045\uffd8" +
    "\047\uffd8\050\uffd8\051\uffd8\054\uffd8\055\uffd8\056\uffd8\057" +
    "\uffd8\060\uffd8\064\uffd8\066\uffd8\001\002\000\014\022\215" +
    "\023\216\041\uffcb\046\uffcb\062\uffcb\001\002\000\004\045" +
    "\uffd4\001\002\000\004\040\050\001\002\000\004\046\uffe5" +
    "\001\002\000\006\025\136\046\uff7f\001\002\000\044\004" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\041\uffc2\046\uffc2\062\uffc2\001\002\000\044\004\uffc3" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\041\uffc3\046\uffc3\062\uffc3\001\002\000\044\004\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\041" +
    "\uffc5\046\uffc5\062\uffc5\001\002\000\022\025\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\050\uffa8\001" +
    "\002\000\022\025\073\033\045\034\070\035\036\036\067" +
    "\037\066\040\050\050\053\001\002\000\046\004\uffc9\005" +
    "\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\040" +
    "\123\041\uffc9\046\uffc9\062\uffc9\001\002\000\030\005\055" +
    "\012\043\013\071\025\073\033\045\034\070\035\036\036" +
    "\067\037\066\040\050\050\053\001\002\000\044\004\uffb5" +
    "\005\uffb5\006\101\007\077\010\100\011\076\014\uffb5\015" +
    "\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5" +
    "\041\uffb5\046\uffb5\062\uffb5\001\002\000\022\025\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\050\uffad" +
    "\001\002\000\022\025\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\050\uffb1\001\002\000\022\025\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\050" +
    "\uffaf\001\002\000\022\025\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\050\uffb3\001\002\000\022\025" +
    "\073\033\045\034\070\035\036\036\067\037\066\040\050" +
    "\050\053\001\002\000\044\004\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\041\uffb2\046\uffb2\062" +
    "\uffb2\001\002\000\022\025\073\033\045\034\070\035\036" +
    "\036\067\037\066\040\050\050\053\001\002\000\044\004" +
    "\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\041\uffae\046\uffae\062\uffae\001\002\000\022\025\073" +
    "\033\045\034\070\035\036\036\067\037\066\040\050\050" +
    "\053\001\002\000\044\004\uffb0\005\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\011\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\021\uffb0\022\uffb0\023\uffb0\041\uffb0\046\uffb0\062\uffb0" +
    "\001\002\000\022\025\073\033\045\034\070\035\036\036" +
    "\067\037\066\040\050\050\053\001\002\000\044\004\uffac" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac" +
    "\041\uffac\046\uffac\062\uffac\001\002\000\010\004\114\005" +
    "\115\041\113\001\002\000\044\004\uff98\005\uff98\006\uff98" +
    "\007\uff98\010\uff98\011\uff98\014\uff98\015\uff98\016\uff98\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\023\uff98\041\uff98\046\uff98" +
    "\062\uff98\001\002\000\022\025\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\050\uffb9\001\002\000\022" +
    "\025\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040" +
    "\uffb7\050\uffb7\001\002\000\044\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\011\uffaa\014\uffaa\015\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\041\uffaa\046\uffaa" +
    "\062\uffaa\001\002\000\022\025\073\033\045\034\070\035" +
    "\036\036\067\037\066\040\050\050\053\001\002\000\044" +
    "\004\uffb6\005\uffb6\006\101\007\077\010\100\011\076\014" +
    "\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\041\uffb6\046\uffb6\062\uffb6\001\002\000\022\025" +
    "\073\033\045\034\070\035\036\036\067\037\066\040\050" +
    "\050\053\001\002\000\044\004\uffb8\005\uffb8\006\101\007" +
    "\077\010\100\011\076\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\041\uffb8\046\uffb8\062" +
    "\uffb8\001\002\000\034\005\uffc1\012\uffc1\013\uffc1\024\uffc1" +
    "\025\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\050\uffc1\001\002\000\034\005\055\012\043" +
    "\013\071\024\046\025\073\033\045\034\070\035\036\036" +
    "\067\037\066\040\050\041\uff7f\050\053\001\002\000\004" +
    "\041\135\001\002\000\006\041\uffbf\062\130\001\002\000" +
    "\004\041\uffbd\001\002\000\032\005\055\012\043\013\071" +
    "\024\046\025\073\033\045\034\070\035\036\036\067\037" +
    "\066\040\050\050\053\001\002\000\004\041\uffbe\001\002" +
    "\000\006\041\uffbc\062\133\001\002\000\032\005\055\012" +
    "\043\013\071\024\046\025\073\033\045\034\070\035\036" +
    "\036\067\037\066\040\050\050\053\001\002\000\004\041" +
    "\uffbb\001\002\000\044\004\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\041\uffc0\046\uffc0\062\uffc0" +
    "\001\002\000\004\063\156\001\002\000\004\046\uffe3\001" +
    "\002\000\010\046\ufff8\061\145\062\146\001\002\000\006" +
    "\041\ufff6\046\ufff6\001\002\000\004\046\uffdf\001\002\000" +
    "\004\046\144\001\002\000\060\002\uffde\005\uffde\012\uffde" +
    "\013\uffde\024\uffde\025\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\045\uffde\047\uffde\050\uffde\051\uffde" +
    "\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\064\uffde\066" +
    "\uffde\001\002\000\032\005\055\012\043\013\071\024\046" +
    "\025\073\033\045\034\070\035\036\036\067\037\066\040" +
    "\050\050\053\001\002\000\004\025\136\001\002\000\010" +
    "\041\ufff5\046\ufff5\062\151\001\002\000\006\041\ufff7\046" +
    "\ufff7\001\002\000\004\025\136\001\002\000\006\041\ufff4" +
    "\046\ufff4\001\002\000\006\046\uffe8\062\uffe8\001\002\000" +
    "\004\046\155\001\002\000\060\002\uffe2\005\uffe2\012\uffe2" +
    "\013\uffe2\024\uffe2\025\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\045\uffe2\047\uffe2\050\uffe2\051\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\064\uffe2\066" +
    "\uffe2\001\002\000\014\026\163\027\161\030\164\031\162" +
    "\032\157\001\002\000\014\040\uffee\041\uffee\046\uffee\061" +
    "\uffee\062\uffee\001\002\000\012\041\ufff3\046\ufff3\061\ufff3" +
    "\062\ufff3\001\002\000\014\040\ufff1\041\ufff1\046\ufff1\061" +
    "\ufff1\062\ufff1\001\002\000\016\040\uffef\041\uffef\042\171" +
    "\046\uffef\061\uffef\062\uffef\001\002\000\016\040\ufff2\041" +
    "\ufff2\042\166\046\ufff2\061\ufff2\062\ufff2\001\002\000\014" +
    "\040\ufff0\041\ufff0\046\ufff0\061\ufff0\062\ufff0\001\002\000" +
    "\014\040\uffed\041\uffed\046\uffed\061\uffed\062\uffed\001\002" +
    "\000\004\035\167\001\002\000\004\043\170\001\002\000" +
    "\014\040\uffec\041\uffec\046\uffec\061\uffec\062\uffec\001\002" +
    "\000\004\035\172\001\002\000\004\043\173\001\002\000" +
    "\014\040\uffeb\041\uffeb\046\uffeb\061\uffeb\062\uffeb\001\002" +
    "\000\004\046\175\001\002\000\060\002\uffe4\005\uffe4\012" +
    "\uffe4\013\uffe4\024\uffe4\025\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\045\uffe4\047\uffe4\050\uffe4\051" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\064\uffe4" +
    "\066\uffe4\001\002\000\014\022\uffa1\023\uffa1\041\uffa1\046" +
    "\uffa1\062\uffa1\001\002\000\030\005\055\012\043\013\071" +
    "\025\073\033\045\034\070\035\036\036\067\037\066\040" +
    "\050\050\053\001\002\000\004\041\113\001\002\000\024" +
    "\004\114\005\115\014\202\015\204\016\203\017\205\020" +
    "\210\021\206\041\113\001\002\000\030\005\uff95\012\uff95" +
    "\013\uff95\025\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\040\uff95\050\uff95\001\002\000\030\005\uff93\012\uff93" +
    "\013\uff93\025\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037" +
    "\uff93\040\uff93\050\uff93\001\002\000\030\005\uff94\012\uff94" +
    "\013\uff94\025\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037" +
    "\uff94\040\uff94\050\uff94\001\002\000\030\005\uff92\012\uff92" +
    "\013\uff92\025\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037" +
    "\uff92\040\uff92\050\uff92\001\002\000\030\005\uff90\012\uff90" +
    "\013\uff90\025\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037" +
    "\uff90\040\uff90\050\uff90\001\002\000\030\005\055\012\043" +
    "\013\071\025\073\033\045\034\070\035\036\036\067\037" +
    "\066\040\050\050\053\001\002\000\030\005\uff91\012\uff91" +
    "\013\uff91\025\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037" +
    "\uff91\040\uff91\050\uff91\001\002\000\014\022\uffa2\023\uffa2" +
    "\041\uffa2\046\uffa2\062\uffa2\001\002\000\020\004\114\005" +
    "\115\022\uff9b\023\uff9b\041\uff9b\046\uff9b\062\uff9b\001\002" +
    "\000\014\022\uff9c\023\uff9c\041\uff9c\046\uff9c\062\uff9c\001" +
    "\002\000\032\005\055\012\043\013\071\024\046\025\073" +
    "\033\045\034\070\035\036\036\067\037\066\040\050\050" +
    "\053\001\002\000\032\005\uff96\012\uff96\013\uff96\024\uff96" +
    "\025\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040" +
    "\uff96\050\uff96\001\002\000\032\005\uff97\012\uff97\013\uff97" +
    "\024\uff97\025\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037" +
    "\uff97\040\uff97\050\uff97\001\002\000\004\040\050\001\002" +
    "\000\020\004\114\005\115\022\uffa5\023\uffa5\041\uffa5\046" +
    "\uffa5\062\uffa5\001\002\000\014\022\uffa6\023\uffa6\041\uffa6" +
    "\046\uffa6\062\uffa6\001\002\000\014\022\uffa4\023\uffa4\041" +
    "\uffa4\046\uffa4\062\uffa4\001\002\000\030\005\055\012\043" +
    "\013\071\025\073\033\045\034\070\035\036\036\067\037" +
    "\066\040\050\050\053\001\002\000\022\004\114\005\115" +
    "\014\202\015\204\016\203\017\205\020\210\021\206\001" +
    "\002\000\004\046\uffdc\001\002\000\004\046\227\001\002" +
    "\000\060\002\uffdb\005\uffdb\012\uffdb\013\uffdb\024\uffdb\025" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\045\uffdb\047\uffdb\050\uffdb\051\uffdb\054\uffdb\055\uffdb\056" +
    "\uffdb\057\uffdb\060\uffdb\064\uffdb\066\uffdb\001\002\000\004" +
    "\044\uffd3\001\002\000\004\052\237\001\002\000\060\002" +
    "\uff8d\005\uff8d\012\uff8d\013\uff8d\024\uff8d\025\uff8d\033\uff8d" +
    "\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\045\uff8d\047" +
    "\uff8d\050\uff8d\051\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d" +
    "\060\uff8d\064\uff8d\066\uff8d\001\002\000\064\002\uff7f\005" +
    "\uff7f\012\uff7f\013\uff7f\024\uff7f\025\uff7f\033\uff7f\034\uff7f" +
    "\035\uff7f\036\uff7f\037\uff7f\040\uff7f\045\uff7f\047\uff7f\050" +
    "\uff7f\051\uff7f\052\uff88\053\230\054\uff7f\055\uff7f\056\uff7f" +
    "\057\uff7f\060\uff7f\064\uff7f\066\uff7f\001\002\000\060\002" +
    "\uff8f\005\uff8f\012\uff8f\013\uff8f\024\uff8f\025\uff8f\033\uff8f" +
    "\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\045\uff8f\047" +
    "\uff8f\050\uff8f\051\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f" +
    "\060\uff8f\064\uff8f\066\uff8f\001\002\000\060\002\uff8c\005" +
    "\uff8c\012\uff8c\013\uff8c\024\uff8c\025\uff8c\033\uff8c\034\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\040\uff8c\045\uff8c\047\uff8c\050" +
    "\uff8c\051\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c" +
    "\064\uff8c\066\uff8c\001\002\000\060\002\uff8e\005\uff8e\012" +
    "\uff8e\013\uff8e\024\uff8e\025\uff8e\033\uff8e\034\uff8e\035\uff8e" +
    "\036\uff8e\037\uff8e\040\uff8e\045\uff8e\047\uff8e\050\uff8e\051" +
    "\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\064\uff8e" +
    "\066\uff8e\001\002\000\004\040\240\001\002\000\032\005" +
    "\055\012\043\013\071\024\046\025\073\033\045\034\070" +
    "\035\036\036\067\037\066\040\050\050\053\001\002\000" +
    "\004\041\242\001\002\000\004\044\uff87\001\002\000\004" +
    "\044\uffd3\001\002\000\064\002\uff86\005\uff86\012\uff86\013" +
    "\uff86\024\uff86\025\uff86\033\uff86\034\uff86\035\uff86\036\uff86" +
    "\037\uff86\040\uff86\045\uff86\047\uff86\050\uff86\051\uff86\052" +
    "\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057\uff86\060\uff86" +
    "\064\uff86\066\uff86\001\002\000\060\002\uff85\005\uff85\012" +
    "\uff85\013\uff85\024\uff85\025\uff85\033\uff85\034\uff85\035\uff85" +
    "\036\uff85\037\uff85\040\uff85\045\uff85\047\uff85\050\uff85\051" +
    "\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\064\uff85" +
    "\066\uff85\001\002\000\004\041\247\001\002\000\044\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\041\uffc7\046\uffc7\062\uffc7\001\002\000\024\004\114" +
    "\005\115\014\202\015\204\016\203\017\205\020\210\021" +
    "\206\041\113\001\002\000\004\045\uffd5\001\002\000\004" +
    "\046\253\001\002\000\060\002\uffd9\005\uffd9\012\uffd9\013" +
    "\uffd9\024\uffd9\025\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\045\uffd9\047\uffd9\050\uffd9\051\uffd9\054" +
    "\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\064\uffd9\066\uffd9" +
    "\001\002\000\004\025\uff84\001\002\000\004\025\256\001" +
    "\002\000\006\061\uffea\063\156\001\002\000\004\062\uff83" +
    "\001\002\000\004\061\145\001\002\000\004\062\uffe7\001" +
    "\002\000\004\062\uffe6\001\002\000\004\062\264\001\002" +
    "\000\032\005\055\012\043\013\071\024\046\025\073\033" +
    "\045\034\070\035\036\036\067\037\066\040\050\050\053" +
    "\001\002\000\004\062\266\001\002\000\032\005\055\012" +
    "\043\013\071\024\046\025\073\033\045\034\070\035\036" +
    "\036\067\037\066\040\050\050\053\001\002\000\004\041" +
    "\uff82\001\002\000\004\041\271\001\002\000\054\005\uffd1" +
    "\012\uffd1\013\uffd1\024\uffd1\025\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\037\uffd1\040\uffd1\044\uffd3\046\uffcf\047\uffd1" +
    "\050\uffd1\051\uffd1\054\uffd1\055\uffd1\057\uffd1\060\uffd1\066" +
    "\uffd1\001\002\000\060\002\uff81\005\uff81\012\uff81\013\uff81" +
    "\024\uff81\025\uff81\033\uff81\034\uff81\035\uff81\036\uff81\037" +
    "\uff81\040\uff81\045\uff81\047\uff81\050\uff81\051\uff81\054\uff81" +
    "\055\uff81\056\uff81\057\uff81\060\uff81\064\uff81\066\uff81\001" +
    "\002\000\004\061\274\001\002\000\032\005\055\012\043" +
    "\013\071\024\046\025\073\033\045\034\070\035\036\036" +
    "\067\037\066\040\050\050\053\001\002\000\006\046\uffe9" +
    "\062\uffe9\001\002\000\004\056\277\001\002\000\004\040" +
    "\300\001\002\000\032\005\055\012\043\013\071\024\046" +
    "\025\073\033\045\034\070\035\036\036\067\037\066\040" +
    "\050\050\053\001\002\000\004\041\302\001\002\000\004" +
    "\046\uff80\001\002\000\030\005\055\012\043\013\071\025" +
    "\073\033\045\034\070\035\036\036\067\037\066\040\050" +
    "\050\053\001\002\000\020\004\114\005\115\022\uffa3\023" +
    "\uffa3\041\uffa3\046\uffa3\062\uffa3\001\002\000\014\022\uff9e" +
    "\023\uff9e\041\uff9e\046\uff9e\062\uff9e\001\002\000\032\005" +
    "\055\012\043\013\071\024\046\025\073\033\045\034\070" +
    "\035\036\036\067\037\066\040\050\050\053\001\002\000" +
    "\004\041\310\001\002\000\004\046\311\001\002\000\060" +
    "\002\uffd6\005\uffd6\012\uffd6\013\uffd6\024\uffd6\025\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\045\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\054\uffd6\055\uffd6\056\uffd6\057" +
    "\uffd6\060\uffd6\064\uffd6\066\uffd6\001\002\000\004\040\313" +
    "\001\002\000\032\005\055\012\043\013\071\024\046\025" +
    "\073\033\045\034\070\035\036\036\067\037\066\040\050" +
    "\050\053\001\002\000\004\041\315\001\002\000\004\044" +
    "\uff8a\001\002\000\004\044\uffd3\001\002\000\064\002\uff89" +
    "\005\uff89\012\uff89\013\uff89\024\uff89\025\uff89\033\uff89\034" +
    "\uff89\035\uff89\036\uff89\037\uff89\040\uff89\045\uff89\047\uff89" +
    "\050\uff89\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056" +
    "\uff89\057\uff89\060\uff89\064\uff89\066\uff89\001\002\000\060" +
    "\002\uffd7\005\uffd7\012\uffd7\013\uffd7\024\uffd7\025\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\045\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\054\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\060\uffd7\064\uffd7\066\uffd7\001\002\000\064\002\uffd2" +
    "\005\uffd2\012\uffd2\013\uffd2\024\uffd2\025\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\045\uffd2\047\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056" +
    "\uffd2\057\uffd2\060\uffd2\064\uffd2\066\uffd2\001\002\000\004" +
    "\046\323\001\002\000\060\002\uffe0\005\uffe0\012\uffe0\013" +
    "\uffe0\024\uffe0\025\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\045\uffe0\047\uffe0\050\uffe0\051\uffe0\054" +
    "\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\064\uffe0\066\uffe0" +
    "\001\002\000\030\005\055\012\043\013\071\025\073\033" +
    "\045\034\070\035\036\036\067\037\066\040\050\050\053" +
    "\001\002\000\020\004\114\005\115\022\uffa0\023\uffa0\041" +
    "\uffa0\046\uffa0\062\uffa0\001\002\000\014\022\uff9f\023\uff9f" +
    "\041\uff9f\046\uff9f\062\uff9f\001\002\000\060\002\uffd0\005" +
    "\uffd0\012\uffd0\013\uffd0\024\uffd0\025\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\037\uffd0\040\uffd0\045\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\064\uffd0\066\uffd0\001\002\000\060\002\uffce\005\uffce\012" +
    "\uffce\013\uffce\024\uffce\025\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\045\uffce\047\uffce\050\uffce\051" +
    "\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\064\uffce" +
    "\066\uffce\001\002\000\014\026\163\027\161\030\164\031" +
    "\162\032\157\001\002\000\004\040\333\001\002\000\006" +
    "\025\136\041\uff7f\001\002\000\004\041\336\001\002\000" +
    "\006\041\ufff8\062\146\001\002\000\054\005\ufffb\012\ufffb" +
    "\013\ufffb\024\ufffb\025\ufffb\033\ufffb\034\ufffb\035\ufffb\036" +
    "\ufffb\037\ufffb\040\ufffb\044\ufffb\046\ufffb\047\ufffb\050\ufffb" +
    "\051\ufffb\054\ufffb\055\ufffb\057\ufffb\060\ufffb\066\ufffb\001" +
    "\002\000\054\005\uffd1\012\uffd1\013\uffd1\024\uffd1\025\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\044" +
    "\uffd3\046\uffcf\047\uffd1\050\uffd1\051\uffd1\054\uffd1\055\uffd1" +
    "\057\uffd1\060\uffd1\066\uffd1\001\002\000\006\002\ufffa\064" +
    "\ufffa\001\002\000\004\002\uffff\001\002\000\004\002\ufffe" +
    "\001\002\000\006\002\uff7f\064\344\001\002\000\004\025" +
    "\011\001\002\000\004\002\ufffc\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\012\002\003\004\005\005\004\006\007\001" +
    "\001\000\002\001\001\000\010\003\341\004\342\054\344" +
    "\001\001\000\010\004\005\005\004\006\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\020\022\015\065" +
    "\017\066\016\067\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\015\023\020\326\023\063\024\026\025" +
    "\024\026\051\031\036\032\071\033\037\034\032\035\060" +
    "\036\022\037\030\041\062\043\050\045\053\046\055\052" +
    "\057\053\031\077\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\015\023\020\046\021\027\023\063\024" +
    "\026\025\024\026\051\031\036\032\071\033\037\034\032" +
    "\035\060\036\022\037\030\041\062\043\050\045\053\046" +
    "\055\052\057\053\031\054\061\077\033\001\001\000\004" +
    "\042\323\001\001\000\004\061\321\001\001\000\002\001" +
    "\001\000\004\056\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\040\206\042\302\001\001\000\002\001\001\000" +
    "\014\017\275\022\015\065\017\066\016\067\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\064\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\015\023" +
    "\020\046\021\250\023\063\024\026\025\024\026\051\031" +
    "\036\032\071\033\037\034\032\035\060\036\022\037\030" +
    "\041\062\043\050\045\053\046\055\052\057\053\031\054" +
    "\061\077\033\001\001\000\002\001\001\000\024\024\026" +
    "\025\024\026\051\031\247\032\071\033\037\034\032\037" +
    "\177\043\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\047\233\050" +
    "\232\051\231\054\234\101\230\001\001\000\034\023\224" +
    "\024\026\025\024\026\051\031\036\032\071\033\037\034" +
    "\032\035\060\036\022\037\030\041\062\043\050\001\001" +
    "\000\002\001\001\000\004\042\213\001\001\000\002\001" +
    "\001\000\006\036\175\043\176\001\001\000\004\057\173" +
    "\001\001\000\012\007\136\010\137\016\141\054\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\024\026\025\024\026\051\033" +
    "\074\034\032\043\073\001\001\000\002\001\001\000\022" +
    "\024\026\025\024\026\051\031\111\032\071\033\037\034" +
    "\032\043\073\001\001\000\002\001\001\000\004\076\107" +
    "\001\001\000\004\074\105\001\001\000\004\075\103\001" +
    "\001\000\004\073\101\001\001\000\014\024\026\025\024" +
    "\026\051\034\102\043\073\001\001\000\002\001\001\000" +
    "\014\024\026\025\024\026\051\034\104\043\073\001\001" +
    "\000\002\001\001\000\014\024\026\025\024\026\051\034" +
    "\106\043\073\001\001\000\002\001\001\000\014\024\026" +
    "\025\024\026\051\034\110\043\073\001\001\000\002\001" +
    "\001\000\004\044\115\001\001\000\002\001\001\000\004" +
    "\071\120\001\001\000\004\072\116\001\001\000\002\001" +
    "\001\000\016\024\026\025\024\026\051\033\117\034\032" +
    "\043\073\001\001\000\002\001\001\000\016\024\026\025" +
    "\024\026\051\033\121\034\032\043\073\001\001\000\002" +
    "\001\001\000\004\070\123\001\001\000\040\023\125\024" +
    "\026\025\024\026\051\027\124\031\036\032\071\033\037" +
    "\034\032\035\060\036\022\037\030\041\062\043\050\054" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\023\131\024\026\025\024\026\051\030" +
    "\130\031\036\032\071\033\037\034\032\035\060\036\022" +
    "\037\030\041\062\043\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\023\131\024\026\025\024\026\051" +
    "\030\133\031\036\032\071\033\037\034\032\035\060\036" +
    "\022\037\030\041\062\043\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\062\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\023" +
    "\152\024\026\025\024\026\051\031\036\032\071\033\037" +
    "\034\032\035\060\036\022\037\030\041\062\043\050\001" +
    "\001\000\006\010\146\013\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\146\013\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\157\012\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\024\026" +
    "\025\024\026\051\031\200\032\071\033\037\034\032\037" +
    "\177\043\073\001\001\000\004\044\212\001\001\000\006" +
    "\040\206\044\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\024\026\025\024\026\051\031\211\032\071\033" +
    "\037\034\032\043\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\024" +
    "\026\025\024\026\051\031\217\032\071\033\037\034\032" +
    "\036\220\041\216\043\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\036\221\043\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\024" +
    "\026\025\024\026\051\031\223\032\071\033\037\034\032" +
    "\037\177\043\073\001\001\000\004\040\206\001\001\000" +
    "\004\063\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\244\065\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\047\235\050\232\051\231\054\234" +
    "\101\230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\023\240\024\026" +
    "\025\024\026\051\031\036\032\071\033\037\034\032\035" +
    "\060\036\022\037\030\041\062\043\050\001\001\000\002" +
    "\001\001\000\004\102\242\001\001\000\006\022\243\065" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\040\206\044\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\103\254\001\001\000\012\010\257\014\256\015" +
    "\260\016\261\001\001\000\004\056\272\001\001\000\004" +
    "\104\262\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\023\264\024\026" +
    "\025\024\026\051\031\036\032\071\033\037\034\032\035" +
    "\060\036\022\037\030\041\062\043\050\001\001\000\002" +
    "\001\001\000\034\023\266\024\026\025\024\026\051\031" +
    "\036\032\071\033\037\034\032\035\060\036\022\037\030" +
    "\041\062\043\050\001\001\000\004\105\267\001\001\000" +
    "\002\001\001\000\014\017\271\022\015\065\017\066\016" +
    "\067\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\023\274\024\026\025\024\026\051\031\036\032\071" +
    "\033\037\034\032\035\060\036\022\037\030\041\062\043" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\023\300\024\026\025\024\026\051\031" +
    "\036\032\071\033\037\034\032\035\060\036\022\037\030" +
    "\041\062\043\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\024\026\025\024\026\051\031\303\032\071" +
    "\033\037\034\032\036\304\043\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\023\306\024\026\025\024" +
    "\026\051\031\036\032\071\033\037\034\032\035\060\036" +
    "\022\037\030\041\062\043\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\023\313\024\026\025\024\026\051\031\036\032\071" +
    "\033\037\034\032\035\060\036\022\037\030\041\062\043" +
    "\050\001\001\000\002\001\001\000\004\100\315\001\001" +
    "\000\006\022\316\065\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\024\026\025\024\026\051\031\324\032" +
    "\071\033\037\034\032\036\325\043\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\331\012\164\001\001\000\002\001\001" +
    "\000\010\007\333\010\334\054\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\336\001\001\000\014" +
    "\017\337\022\015\065\017\066\016\067\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\345\004\342\054\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lex.next_token(); 
    }


    CodeLexer lex;

	@SuppressWarnings("deprecation")
	public parser(CodeLexer lex) {
		this.lex = lex;
		this.symbolFactory = new DefaultSymbolFactory();
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	ArbolSintactico arbol = new ArbolSintactico();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= navidad EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // navidad ::= inicio 
            {
              Object RESULT =null;
		 AnalisisSemantico semantica = new AnalisisSemantico(arbol); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("navidad",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= funcion inicio 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= funcion_main bolsa_navidenna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bolsa_navidenna ::= funcion bolsa_navidenna 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsa_navidenna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bolsa_navidenna ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bolsa_navidenna",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 arbol.nuevasVariables(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= FUNCTION PERSONA DOS_PUNTOS tipo ABRECUENTO parametros CIERRECUENTO NT$0 bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object nf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tf = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 arbol.agregar(new Funcion(nf, tf, arbol.variables(true), arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion_main ::= FUNCTION MAIN ABRECUENTO CIERRECUENTO bloque_codigo 
            {
              Object RESULT =null;
		 arbol.agregar(new Funcion(arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion_main",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parametros ::= parametro COMA mas_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parametros ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // mas_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // mas_parametros ::= parametro COMA mas_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametro ::= PERSONA DOS_PUNTOS tipo 
            {
              Object RESULT =null;
		int npleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int npright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object np = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(new Variable(np, tp)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= PAPA_NOEL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= SANTA_CLAUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= SAN_NICOLAS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= NINO_JESUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= COLACHO 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= array 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // array ::= PAPA_NOEL ABREEMPAQUE L_PAPA_NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // array ::= NINO_JESUS ABREEMPAQUE L_PAPA_NOEL CIERRAEMPAQUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = t + "[" + n + "]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("array",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$1 ::= 
            {
              Object RESULT =null;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT = nv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignar_variable_declarada ::= PERSONA NT$1 ENTREGA regalo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable_declarada",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarar_asignar_variable ::= parametro ENTREGA regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar_asignar_variable",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // asignar_variable ::= asignar_variable_declarada 
            {
              Object RESULT =null;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "asignar_variable_declarada|"+nv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignar_variable ::= declarar_asignar_variable 
            {
              Object RESULT =null;
		 RESULT = "declarar_asignar_variable|null"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignar_variable",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.expresion(arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // linea_codigo ::= regalo NT$2 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.declaracionesVariables(arbol.variables())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // linea_codigo ::= LOCAL parametros NT$3 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$4 ::= 
            {
              Object RESULT =null;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 arbol.agregar(LineaCodigo.asignacionVariable(nv, arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // linea_codigo ::= asignar_variable_declarada NT$4 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$5 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.declaracionAsignacionVariable(arbol.variables(), arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // linea_codigo ::= LOCAL declarar_asignar_variable NT$5 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // linea_codigo ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$6 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.returnLine(arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // linea_codigo ::= ENVIA regalo NT$6 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$7 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.breakLine()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // linea_codigo ::= CORTA NT$7 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // linea_codigo ::= ciclo_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // linea_codigo ::= ciclo_do_until FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // linea_codigo ::= NARRA ABRECUENTO regalo CIERRECUENTO FIN_REGALO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea_codigo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // codigo_multilinea ::= linea_codigo codigo_multilinea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_multilinea",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // codigo_multilinea ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_multilinea",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$8 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.bloqueCodigo()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // codigo_contenido ::= NT$8 ABREREGALO codigo_multilinea CIERRAREGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_contenido",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$9 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.bloqueCodigo()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloque_codigo ::= NT$9 linea_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$10 ::= 
            {
              Object RESULT =null;
 arbol.agregar(LineaCodigo.bloqueCodigo()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloque_codigo ::= NT$10 FIN_REGALO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque_codigo ::= codigo_contenido 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_codigo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // regalo ::= expresion_aritmetica 
            {
              Object RESULT =null;
		 arbol.agregar(Expresion.separador()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // regalo ::= expresion_logica 
            {
              Object RESULT =null;
		 arbol.agregar(Expresion.separador()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("regalo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valor ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // valor ::= PERSONA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.identificador(p)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // valor ::= llamada_funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valor ::= ESCUCHA ABRECUENTO CIERRECUENTO 
            {
              Object RESULT =null;
		 arbol.agregar(Expresion.read()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= L_COLACHO 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("float", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal ::= L_SAN_NICOLAS 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("string", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literal ::= L_PAPA_NOEL 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("int", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal ::= L_SANTA_CLAUS 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("boolean", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // literal ::= L_NINO_JESUS 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 arbol.agregar(Expresion.literal("char", l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$11 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // llamada_funcion ::= PERSONA ABRECUENTO NT$11 expresiones CIERRECUENTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 arbol.agregar(Expresion.llamadaFuncion(f, arbol.expresiones(false))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresiones ::= regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresiones ::= regalo COMA mas_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresiones ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // mas_expresiones ::= regalo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // mas_expresiones ::= regalo COMA mas_expresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mas_expresiones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion_aritmetica ::= termino_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$12 ::= 
            {
              Object RESULT =null;
 arbol.agregar(Operacion.operando("SUMA")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion_aritmetica ::= expresion_aritmetica RUDOLPH NT$12 termino_aritmetico 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$13 ::= 
            {
              Object RESULT =null;
 arbol.agregar(Operacion.operando("RESTA")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion_aritmetica ::= expresion_aritmetica DASHER NT$13 termino_aritmetico 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion_aritmetica ::= operador_aritmetico_unario termino_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_aritmetica",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // termino_aritmetico ::= factor_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$14 ::= 
            {
              Object RESULT =null;
 arbol.agregar(Operacion.operando("MULTIPLICACION")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // termino_aritmetico ::= termino_aritmetico COMET NT$14 factor_aritmetico 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$15 ::= 
            {
              Object RESULT =null;
 arbol.agregar(Operacion.operando("DIVISION")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // termino_aritmetico ::= termino_aritmetico VIXEN NT$15 factor_aritmetico 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$16 ::= 
            {
              Object RESULT =null;
 arbol.agregar(Operacion.operando("MODULO")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // termino_aritmetico ::= termino_aritmetico TOTIN NT$16 factor_aritmetico 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$17 ::= 
            {
              Object RESULT =null;
 arbol.agregar(Operacion.operando("POTENCIA")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$17",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // termino_aritmetico ::= termino_aritmetico RENILLO NT$17 factor_aritmetico 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino_aritmetico",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // factor_aritmetico ::= valor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_aritmetico",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor_aritmetico ::= parentesis_abierto expresion_aritmetica parentesis_cerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_aritmetico",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operador_aritmetico_unario ::= GRINCH 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("INCREMENTO")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_unario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operador_aritmetico_unario ::= QUIEN 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("DECREMENTO")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_unario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operador_aritmetico_unario ::= DASHER 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("NEGATIVO")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico_unario",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion_logica ::= expresion_logica and_or opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion_logica ::= expresion_logica and_or expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion_logica ::= expresion_logica and_or not opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion_logica ::= expresion_aritmetica and_or expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion_logica ::= not parentesis_abierto expresion_aritmetica parentesis_cerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion_logica ::= not opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion_logica ::= opciones_expresion_relacional and_or expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion_logica ::= opciones_expresion_relacional and_or opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion_logica ::= expresion_aritmetica and_or opciones_expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expresion_logica ::= expresion_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_logica",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opciones_expresion_relacional ::= parentesis_abierto expresion_relacional parentesis_cerrado 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones_expresion_relacional",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion_relacional ::= expresion_aritmetica operador_relacional expresion_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_relacional",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // not ::= BALTASAR 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("NOT")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("not",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parentesis_abierto ::= ABRECUENTO 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("PARENTESIS_ABIERTO")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis_abierto",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parentesis_cerrado ::= CIERRECUENTO 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("PARENTESIS_CERRADO")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parentesis_cerrado",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // and_or ::= GASPAR 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("AND")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_or",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // and_or ::= MELCHOR 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("OR")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("and_or",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operador_relacional ::= KNECHT_RUPRECHT 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("MAYOR_IGUAL")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operador_relacional ::= KRAMPUS 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("MAYOR")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operador_relacional ::= BELSNICKEL 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("MENOR_IGUAL")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operador_relacional ::= ZWARTE_PIET 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("MENOR")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operador_relacional ::= SNOWBALL_ALABASTRO 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("DISTINTO")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operador_relacional ::= PEPPER_MINSTIX 
            {
              Object RESULT =null;
		 arbol.agregar(Operacion.operando("IGUAL")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // condicional ::= condicional_if condicionales_elif 
            {
              Object RESULT =null;
		 arbol.condicional(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // condicionales_elif ::= condicional_elif condicionales_elif 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // condicionales_elif ::= condicional_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // condicionales_elif ::= epsilon 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicionales_elif",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$18 ::= 
            {
              Object RESULT =null;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$18",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$19",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // condicional_if ::= NT$18 ELFO ABRECUENTO regalo CIERRECUENTO NT$19 codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 arbol.agregar(Condicional.ifLine(arbol.expresiones(true), arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_if",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$20 ::= 
            {
              Object RESULT =null;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$20",63, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$21",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // condicional_elif ::= NT$20 HADA ABRECUENTO regalo CIERRECUENTO NT$21 codigo_contenido 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 arbol.agregar(Condicional.elif(arbol.expresiones(true), arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_elif",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // condicional_else ::= DUENDE codigo_contenido 
            {
              Object RESULT =null;
		 arbol.agregar(Condicional.elseCondition(arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_else",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$22 ::= 
            {
              Object RESULT =null;
 arbol.nuevasVariables();  arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$22",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 arbol.nuevasVariables(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$23",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$24 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 arbol.nuevasExpresiones(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$24",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ciclo_for ::= ENVUELVE ABRECUENTO NT$22 asignar_variable NT$23 COMA regalo COMA regalo NT$24 CIERRECUENTO bloque_codigo 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int avleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int avright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object av = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		 arbol.agregar(LineaCodigo.forLine(av, arbol, arbol.expresiones(true), arbol.bloqueCodigo())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_for",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ciclo_do_until ::= HACE bloque_codigo REVISA ABRECUENTO regalo CIERRECUENTO 
            {
              Object RESULT =null;
		 arbol.agregar(LineaCodigo.doUntil(arbol.bloqueCodigo(), arbol.expresiones())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_do_until",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("epsilon",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
