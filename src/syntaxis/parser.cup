package syntaxis;

import java_cup.runtime.*;
import lexical.CodeLexer;

action code {:
	ListaTablasSimbolos tablas = new ListaTablasSimbolos();
:}

parser code {:
    CodeLexer lex;

	@SuppressWarnings("deprecation")
	public parser(CodeLexer lex) {
		this.lex = lex;
		this.symbolFactory = new DefaultSymbolFactory();
	}
:}

init with {: :};

scan with {: return lex.next_token(); :};
// operadores
terminal RUDOLPH,      // Operador de suma
        DASHER,       // Operador de resta
        COMET,        // Operador de multiplicación
        VIXEN,        // Operador de división
        TOTIN,        // Operador de módulo
        RENILLO,      // Operador de potencia
		GRINCH,       // Operador de incremento unario
        QUIEN,        // Operador de decremento unario
        KNECHT_RUPRECHT, // Operador relacional mayor o igual
        KRAMPUS,      // Operador relacional mayor
        BELSNICKEL,   // Operador relacional menor o igual
        ZWARTE_PIET,  // Operador relacional menor
        SNOWBALL_ALABASTRO, // Operador relacional diferente
        PEPPER_MINSTIX,     // Operador relacional igual
        MELCHOR,      // Operador lógico de conjunción
        GASPAR,       // Operador lógico de disyunción
        BALTASAR;     // Operador lógico de negación

// tipos
terminal PERSONA,       // Identificador
        PAPA_NOEL,      // Tipo INT
        SANTA_CLAUS,    // Tipo BOOLEAN
        SAN_NICOLAS,    // Tipo STRING
        NINO_JESUS,     // Tipo CHAR
		COLACHO,        // Tipo FLOAT
		SANTA;          // Tipo ARRAY

// literales
terminal L_COLACHO,      // Literal FLOAT
		 L_SAN_NICOLAS,  // Literal STRING
		 L_PAPA_NOEL,    // Literal INT
         L_SANTA_CLAUS; // Literal BOOLEAN

// símbolos
terminal ABRECUENTO,     // Símbolo "("
		CIERRECUENTO,   // Símbolo ")"
		ABREEMPAQUE,    // Símbolo "["
		CIERRAEMPAQUE,  // Símbolo "]"
		ABREREGALO,     // Símbolo "{"
		CIERRAREGALO,   // Símbolo "}"
		FIN_REGALO;     // Símbolo "|"

// PRINT - READ
terminal NARRA,           // Palabra clave PRINT
        ESCUCHA;         // Palabra clave READ

// estructuras
terminal ELFO,            // Palabra clave IF
        HADA,             // Palabra clave ELIF
        DUENDE,           // Palabra clave ELSE
        ENVUELVE,         // Palabra clave FOR
        HACE,             // Palabra clave DO
        REVISA,           // Palabra clave UNTIL
        ENVIA,            // Palabra clave RETURN
        CORTA;            // Palabra clave BREAK
terminal ENTREGA,         // Operador de asignación ":="
        COMA,             // Símbolo ","
        DOS_PUNTOS;       // Símbolo ":"
terminal FUNCTION,        // Palabra clave FUNCTION
        MAIN,            // Palabra clave MAIN
        LOCAL;           // Palabra clave LOCAL

terminal ERROR_IDENTIFICADOR,  // Terminal para errores en identificadores
        ERROR_LITERAL;        // Terminal para errores en literales



// no terminales
non terminal navidad, bolsa_navidenna, funcion, funcion_main, inicio;
non terminal parametros, parametro, tipo, array, mas_parametros;
non terminal asignar_variable, asignar_variable_declarada, declarar_asignar_variable;
non terminal bloque_codigo, linea_codigo, codigo_multilinea, codigo_contenido;
non terminal regalo, literal, llamada_funcion;
non terminal tokens, expresiones_AL, _expresiones_AL, _operadores_aritmeticos ;
non terminal expresiones, mas_expresiones;
non terminal condicional, condicional_if, condicionales_elif, condicional_elif, condicional_else;
non terminal ciclo_for, ciclo_do_until;
non terminal prueba;
non terminal Symbol epsilon;


// ------------------------------ Start --------------------------------------------------------------------------------

start with navidad;

navidad ::= inicio {: tablas.guardar("test/resultado-sintactico.txt"); :};

inicio ::= funcion inicio | funcion_main bolsa_navidenna;

bolsa_navidenna ::= funcion bolsa_navidenna | epsilon;
funcion ::=
	FUNCTION PERSONA:nf DOS_PUNTOS tipo:tf {: tablas.tabla(new Funcion(nf, tf)); :}
	ABRECUENTO parametros CIERRECUENTO {: tablas.parametro("parametro"); :}
	bloque_codigo;
funcion_main ::= FUNCTION MAIN ABRECUENTO CIERRECUENTO {: tablas.tabla(new Funcion()); :} bloque_codigo;

parametros ::= parametro | parametro COMA mas_parametros | epsilon;
mas_parametros ::= parametro | parametro COMA mas_parametros;
parametro ::= PERSONA:np DOS_PUNTOS tipo:tp {: tablas.simbolo(new Parametro(np, tp)); :};

tipo ::=
	PAPA_NOEL:t {: RESULT = t; :} |
	SANTA_CLAUS:t {: RESULT = t; :} |
	SAN_NICOLAS:t {: RESULT = t; :} |
	NINO_JESUS:t {: RESULT = t; :} |
	COLACHO:t {: RESULT = t; :} |
	array:t {: RESULT = t; :};
array ::=
	PAPA_NOEL:t ABREEMPAQUE L_PAPA_NOEL:n CIERRAEMPAQUE {: RESULT = t + "[" + n + "]"; :} |
	NINO_JESUS:t ABREEMPAQUE L_PAPA_NOEL:n CIERRAEMPAQUE {: RESULT = t + "[" + n + "]"; :};

asignar_variable_declarada ::=
	PERSONA:nv {: tablas.parametro("asignacion"); :}
	ENTREGA regalo;
declarar_asignar_variable ::=
	parametro:p {: tablas.parametro("declaracion_asignacion"); :}
	ENTREGA regalo;
asignar_variable ::= asignar_variable_declarada | declarar_asignar_variable;

linea_codigo ::=
	regalo FIN_REGALO | // expresión
	LOCAL parametros {: tablas.parametro("declaracion"); :} FIN_REGALO | // declaración de una o varias variables
	asignar_variable_declarada FIN_REGALO | // asignación de variable ya declarada
	LOCAL declarar_asignar_variable FIN_REGALO | // se declara y asigna variable
	condicional | // condicionales
	ENVIA:l {: tablas.simbolo(new Lexema(l)); :} regalo FIN_REGALO | // return
	CORTA:l {: tablas.simbolo(new Lexema(l)); :} FIN_REGALO | // break
	ciclo_for |
	ciclo_do_until FIN_REGALO |
	NARRA:l {: tablas.simbolo(new Lexema(l)); :} ABRECUENTO regalo CIERRECUENTO FIN_REGALO; // print

codigo_multilinea ::= linea_codigo codigo_multilinea | epsilon;
codigo_contenido ::= ABREREGALO codigo_multilinea CIERRAREGALO;
bloque_codigo ::= linea_codigo | FIN_REGALO | codigo_contenido;

// ------------------------------ EXPRESIONES --------------------------------------------------------------------------------

regalo ::=
    literal |
    PERSONA |
    llamada_funcion |
    ESCUCHA:l ABRECUENTO CIERRECUENTO {: tablas.simbolo(new Lexema(l)); :};

literal ::= L_COLACHO | L_SAN_NICOLAS | L_PAPA_NOEL | L_SANTA_CLAUS;
llamada_funcion ::=
	PERSONA:f {: tablas.simbolo(new LexemaNombre("llamada_funcion", f)); :}
	ABRECUENTO expresiones CIERRECUENTO;

expresiones ::= regalo | regalo COMA mas_expresiones | epsilon;
mas_expresiones ::= regalo | regalo COMA mas_expresiones;

// ------------------------------ EXPRESIONES NUEVA --------------------------------------------------------------------------------
expresiones_AL ::= tokens _expresiones_AL
                    | llamada_funcion _expresiones_AL
                    | ABRECUENTO expresiones_AL CIERRECUENTO _expresiones_AL;

_expresiones_AL ::= _operadores_aritmeticos expresiones_AL | epsilon;


// ------------------------------ Símbolos -----------------------------------------------------------------------------
_operadores_aritmeticos ::= RUDOLPH | DASHER | COMET | VIXEN | TOTIN | RENILLO | GRINCH | QUIEN;

tokens ::=  PERSONA | L_COLACHO | L_SAN_NICOLAS | L_PAPA_NOEL ;

// ------------------------------ CONDICIONALES --------------------------------------------------------------------------------

// Añadir que se puedan declarar condicionales con solo una línea de código, no funciona con la línea de código por el for y por las condicionales, que son las producciones que no terminan con FIN_REGALO
condicional ::= condicional_if condicionales_elif;
condicionales_elif ::= condicional_elif condicionales_elif | condicional_else | epsilon;
condicional_if ::= ELFO:l {: tablas.simbolo(new Lexema(l)); :} ABRECUENTO regalo CIERRECUENTO codigo_contenido;
condicional_elif ::= HADA:l {: tablas.simbolo(new Lexema(l)); :} ABRECUENTO regalo CIERRECUENTO codigo_contenido;
condicional_else ::= DUENDE:l {: tablas.simbolo(new Lexema(l)); :} codigo_contenido;

// sustituir el primer regalo por una expresión lógica
// sustituir el segundo regalo por una acción cómo una operación aritmética o una llamada a función
ciclo_for ::=
	ENVUELVE:l {: tablas.simbolo(new Lexema(l)); :}
	ABRECUENTO asignar_variable COMA regalo COMA regalo CIERRECUENTO bloque_codigo;

// sustituir el regalo por una expresión lógica
ciclo_do_until ::=
	HACE:d {: tablas.simbolo(new Lexema(d)); :}
	bloque_codigo REVISA:u {: tablas.simbolo(new Lexema(u)); :}
	ABRECUENTO regalo CIERRECUENTO;

epsilon ::= {: RESULT = new Symbol(-1); :};
