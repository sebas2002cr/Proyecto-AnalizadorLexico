package syntaxis;

import java_cup.runtime.*;
import lexical.CodeLexer;

action code {: :}

parser code {:
	CodeLexer lex;

	@SuppressWarnings("deprecation")
	public parser(CodeLexer lex) {
		this.lex = lex;
		this.symbolFactory = new DefaultSymbolFactory();
	}
:}

init with {: :};

scan with {: return lex.next_token(); :};

// operadores
terminal RUDOLPH, DASHER, COMET, VIXEN, TOTIN, RENILLO,
		GRINCH,
        QUIEN,
        KNECHT_RUPRECHT,
        KRAMPUS,
        BELSNICKEL,
        ZWARTE_PIET,
        SNOWBALL_ALABASTRO,
        PEPPER_MINSTIX,
        MELCHOR,
        GASPAR,
        BALTASAR;

// tipos
terminal PERSONA,
        PAPA_NOEL,
        SANTA_CLAUS,
        SAN_NICOLAS,
        NINO_JESUS,
		COLACHO,
		SANTA;

// literales
terminal L_COLACHO,
		L_SAN_NICOLAS,
		L_PAPA_NOEL;

// s√≠mbolos
terminal ABRECUENTO,
		CIERRECUENTO,
		ABREEMPAQUE,
		CIERRAEMPAQUE,
		ABREREGALO,
		CIERRAREGALO;

// PRINT - READ
terminal NARRA, ESCUCHA;

// estructuras
terminal ELFO, HADA, DUENDE, ENVUELVE, HACE, REVISA, ENVIA, CORTA;
terminal ENTREGA, COMA;
terminal FUNCTION, MAIN;

// no terminales
non terminal navidad, bolsa_navidenna, funcion, funcion_main;
non terminal Symbol epsilon;

//produccion de inicio
start with navidad;

navidad ::= epsilon;

// funcion_main ::= FUNCTION MAIN ABRECUENTO CIERRECUENTO;

// bolsa_navidenna ::= bolsa_navidenna | epsilon;

// funcion ::= FUNCTION PERSONA ABRECUENTO CIERRECUENTO;

epsilon ::= {: RESULT = new Symbol(-1); :};