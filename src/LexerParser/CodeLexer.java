// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/LexerParser/lexer.jflex

package LexerParser;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class CodeLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\37\u0200\1\u0300\u10de\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\4\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\12\17\1\20\1\0\1\21"+
    "\1\22\1\23\2\0\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\35"+
    "\1\40\1\41\1\42\1\35\1\43\1\44\1\45\1\46"+
    "\3\35\1\47\1\35\1\50\1\0\1\51\1\52\1\35"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\35\1\40\1\41"+
    "\1\42\1\35\1\43\1\44\1\45\1\46\3\35\1\47"+
    "\1\35\1\53\1\0\1\54\1\55\261\0\2\56\115\0"+
    "\1\57\u01aa\0\1\60\325\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\1\16\1\17\14\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\1\1\0\2\27\1\0\1\30\1\31\1\32"+
    "\1\0\1\2\1\0\1\14\1\33\1\34\1\35\1\36"+
    "\5\20\1\37\4\20\1\40\5\20\1\40\5\0\1\41"+
    "\1\0\7\20\2\0\1\42\1\20\1\43\1\44\1\20"+
    "\1\0\4\20\1\44\1\0\1\14\1\0\1\2\1\0"+
    "\1\41\4\20\1\45\1\46\1\47\1\46\1\47\2\20"+
    "\1\0\1\50\2\20\1\0\1\20\1\0\1\20\1\51"+
    "\1\20\2\52\1\53\2\54\2\20\1\0\2\55\2\20"+
    "\1\56\2\57\1\20\1\60\170\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\142\0\223\0\142\0\304\0\365"+
    "\0\u0126\0\142\0\u0157\0\u0188\0\142\0\u01b9\0\u01ea\0\u021b"+
    "\0\u024c\0\u027d\0\142\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372"+
    "\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa"+
    "\0\142\0\142\0\142\0\142\0\142\0\142\0\u052b\0\u055c"+
    "\0\304\0\142\0\365\0\u058d\0\142\0\142\0\142\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\142\0\142\0\142\0\142\0\u0682"+
    "\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0682\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u0682\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\142"+
    "\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87"+
    "\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f"+
    "\0\u0a87\0\u0c40\0\u0a87\0\u0a87\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\142\0\u0d97\0\142\0\u0dc8\0\u09c3\0\u0df9"+
    "\0\u0a56\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0e2a\0\u0e2a\0\u0e2a"+
    "\0\142\0\142\0\u0eee\0\u0f1f\0\u0f50\0\u0e2a\0\u0f81\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u1076\0\u10a7\0\u1076\0\142"+
    "\0\u1076\0\u1076\0\142\0\u10d8\0\u1109\0\u113a\0\u1076\0\142"+
    "\0\u116b\0\u119c\0\u116b\0\u116b\0\142\0\u11cd\0\u11cd\0\u11fe"+
    "\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386"+
    "\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e"+
    "\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696"+
    "\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e"+
    "\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6"+
    "\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e"+
    "\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6"+
    "\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e"+
    "\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6"+
    "\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e"+
    "\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6"+
    "\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e"+
    "\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6"+
    "\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e"+
    "\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\142";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\3\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\2\33\1\34\5\33\1\35\1\36\1\37\1\33"+
    "\1\40\1\33\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\62\3\63\0\1\4\56\0\5\51\1\52"+
    "\53\51\17\0\1\53\55\0\1\54\55\0\1\55\61\0"+
    "\1\56\62\0\1\57\55\0\1\60\4\0\1\61\57\0"+
    "\1\62\1\0\1\63\63\0\1\64\60\0\1\65\1\66"+
    "\57\0\1\67\55\0\1\70\4\0\17\70\1\71\4\70"+
    "\30\0\1\70\4\0\15\70\1\72\1\70\1\73\4\70"+
    "\30\0\1\70\4\0\7\70\1\74\14\70\30\0\1\70"+
    "\4\0\15\70\1\75\6\70\30\0\1\70\4\0\13\70"+
    "\1\76\1\77\7\70\30\0\1\70\4\0\13\70\1\100"+
    "\1\70\1\101\6\70\30\0\1\70\4\0\24\70\30\0"+
    "\1\70\4\0\5\70\1\102\6\70\1\103\7\70\30\0"+
    "\1\70\4\0\17\70\1\104\4\70\30\0\1\70\4\0"+
    "\4\70\1\105\17\70\30\0\1\70\4\0\21\70\1\106"+
    "\2\70\30\0\1\70\4\0\14\70\1\107\7\70\42\0"+
    "\1\110\6\0\1\111\65\0\1\112\32\0\1\113\41\0"+
    "\11\114\1\115\47\114\2\61\1\4\1\5\55\61\17\0"+
    "\1\116\56\0\1\117\1\0\1\63\60\0\1\120\4\0"+
    "\24\120\30\0\1\120\4\0\17\120\1\121\4\120\30\0"+
    "\1\120\4\0\15\120\1\122\6\120\30\0\1\120\4\0"+
    "\4\120\1\123\17\120\30\0\1\120\4\0\1\124\23\120"+
    "\30\0\1\120\4\0\10\120\1\125\7\120\1\126\3\120"+
    "\6\0\1\127\1\130\20\0\1\120\4\0\3\120\1\131"+
    "\20\120\30\0\1\120\4\0\15\120\1\132\6\120\30\0"+
    "\1\120\4\0\17\120\1\133\4\120\30\0\1\120\4\0"+
    "\21\120\1\134\2\120\30\0\1\120\4\0\10\120\1\135"+
    "\13\120\6\0\1\136\21\0\1\120\4\0\1\137\20\120"+
    "\1\140\2\120\30\0\1\120\4\0\17\120\1\141\4\120"+
    "\30\0\1\120\4\0\21\120\1\142\2\120\56\0\1\143"+
    "\56\0\1\144\25\0\1\145\6\0\1\113\41\0\11\114"+
    "\1\146\60\114\1\146\4\114\1\147\42\114\17\0\1\116"+
    "\10\0\1\150\47\0\1\151\60\0\1\152\4\0\24\152"+
    "\30\0\1\152\4\0\1\153\23\152\30\0\1\152\4\0"+
    "\13\152\1\154\10\152\30\0\1\152\4\0\1\155\23\152"+
    "\30\0\1\152\4\0\17\152\1\156\4\152\30\0\1\152"+
    "\4\0\5\152\1\157\16\152\30\0\1\152\4\0\4\152"+
    "\1\160\17\152\42\0\1\161\57\0\1\162\47\0\1\152"+
    "\4\0\1\163\23\152\30\0\1\152\4\0\14\152\1\164"+
    "\7\152\51\0\1\165\37\0\1\152\4\0\3\152\1\166"+
    "\20\152\30\0\1\152\4\0\22\152\1\167\1\152\30\0"+
    "\1\152\4\0\10\152\1\170\13\152\6\0\1\171\21\0"+
    "\1\152\4\0\10\152\1\172\13\152\6\0\1\173\36\0"+
    "\1\171\21\0\1\171\2\0\11\114\1\146\4\114\1\4"+
    "\42\114\14\0\1\117\2\0\1\151\60\0\1\174\4\0"+
    "\24\174\30\0\1\174\4\0\23\174\1\175\30\0\1\174"+
    "\4\0\4\174\1\176\17\174\30\0\1\174\4\0\12\174"+
    "\1\177\11\174\10\0\1\200\17\0\1\174\4\0\21\174"+
    "\1\201\2\174\30\0\1\174\4\0\21\174\1\202\2\174"+
    "\56\0\1\203\32\0\1\174\4\0\17\174\1\204\4\174"+
    "\30\0\1\174\4\0\14\174\1\205\7\174\51\0\1\206"+
    "\37\0\1\174\4\0\13\174\1\207\10\174\50\0\1\210"+
    "\40\0\1\211\4\0\24\211\30\0\1\211\4\0\1\212"+
    "\23\211\30\0\1\211\4\0\14\211\1\213\7\211\30\0"+
    "\1\211\4\0\6\211\1\214\15\211\43\0\1\215\45\0"+
    "\1\216\4\0\24\216\30\0\1\216\4\0\14\216\1\217"+
    "\7\216\30\0\1\220\4\0\24\220\30\0\1\221\4\0"+
    "\24\221\30\0\1\222\4\0\24\222\30\0\1\223\4\0"+
    "\24\223\30\0\1\224\4\0\24\224\30\0\1\225\4\0"+
    "\24\225\30\0\1\226\4\0\24\226\30\0\1\227\4\0"+
    "\24\227\30\0\1\230\4\0\24\230\30\0\1\231\4\0"+
    "\24\231\30\0\1\232\4\0\24\232\30\0\1\233\4\0"+
    "\24\233\30\0\1\234\4\0\24\234\30\0\1\235\4\0"+
    "\24\235\30\0\1\236\4\0\24\236\30\0\1\237\4\0"+
    "\24\237\30\0\1\240\4\0\24\240\30\0\1\241\4\0"+
    "\24\241\30\0\1\242\4\0\24\242\30\0\1\243\4\0"+
    "\24\243\30\0\1\244\4\0\24\244\30\0\1\245\4\0"+
    "\24\245\30\0\1\246\4\0\24\246\30\0\1\247\4\0"+
    "\24\247\30\0\1\250\4\0\24\250\30\0\1\251\4\0"+
    "\24\251\30\0\1\252\4\0\24\252\30\0\1\253\4\0"+
    "\24\253\30\0\1\254\4\0\24\254\30\0\1\255\4\0"+
    "\24\255\30\0\1\256\4\0\24\256\30\0\1\257\4\0"+
    "\24\257\30\0\1\260\4\0\24\260\30\0\1\261\4\0"+
    "\24\261\30\0\1\262\4\0\24\262\30\0\1\263\4\0"+
    "\24\263\30\0\1\264\4\0\24\264\30\0\1\265\4\0"+
    "\24\265\30\0\1\266\4\0\24\266\30\0\1\267\4\0"+
    "\24\267\30\0\1\270\4\0\24\270\30\0\1\271\4\0"+
    "\24\271\30\0\1\272\4\0\24\272\30\0\1\273\4\0"+
    "\24\273\30\0\1\274\4\0\24\274\30\0\1\275\4\0"+
    "\24\275\30\0\1\276\4\0\24\276\30\0\1\277\4\0"+
    "\24\277\30\0\1\300\4\0\24\300\30\0\1\301\4\0"+
    "\24\301\30\0\1\302\4\0\24\302\30\0\1\303\4\0"+
    "\24\303\30\0\1\304\4\0\24\304\30\0\1\305\4\0"+
    "\24\305\30\0\1\306\4\0\24\306\30\0\1\307\4\0"+
    "\24\307\30\0\1\310\4\0\24\310\30\0\1\311\4\0"+
    "\24\311\30\0\1\312\4\0\24\312\30\0\1\313\4\0"+
    "\24\313\30\0\1\314\4\0\24\314\30\0\1\315\4\0"+
    "\24\315\30\0\1\316\4\0\24\316\30\0\1\317\4\0"+
    "\24\317\30\0\1\320\4\0\24\320\30\0\1\321\4\0"+
    "\24\321\30\0\1\322\4\0\24\322\30\0\1\323\4\0"+
    "\24\323\30\0\1\324\4\0\24\324\30\0\1\325\4\0"+
    "\24\325\30\0\1\326\4\0\24\326\30\0\1\327\4\0"+
    "\24\327\30\0\1\330\4\0\24\330\30\0\1\331\4\0"+
    "\24\331\30\0\1\332\4\0\24\332\30\0\1\333\4\0"+
    "\24\333\30\0\1\334\4\0\24\334\30\0\1\335\4\0"+
    "\24\335\30\0\1\336\4\0\24\336\30\0\1\337\4\0"+
    "\24\337\30\0\1\340\4\0\24\340\30\0\1\341\4\0"+
    "\24\341\30\0\1\342\4\0\24\342\30\0\1\343\4\0"+
    "\24\343\30\0\1\344\4\0\24\344\30\0\1\345\4\0"+
    "\24\345\30\0\1\346\4\0\24\346\30\0\1\347\4\0"+
    "\24\347\30\0\1\350\4\0\24\350\30\0\1\351\4\0"+
    "\24\351\30\0\1\352\4\0\24\352\30\0\1\353\4\0"+
    "\24\353\30\0\1\354\4\0\24\354\30\0\1\355\4\0"+
    "\24\355\30\0\1\356\4\0\24\356\30\0\1\357\4\0"+
    "\24\357\30\0\1\360\4\0\24\360\30\0\1\361\4\0"+
    "\24\361\30\0\1\362\4\0\24\362\30\0\1\363\4\0"+
    "\24\363\30\0\1\364\4\0\24\364\30\0\1\365\4\0"+
    "\24\365\30\0\1\366\4\0\24\366\30\0\1\367\4\0"+
    "\24\367\30\0\1\370\4\0\24\370\30\0\1\371\4\0"+
    "\24\371\30\0\1\372\4\0\24\372\30\0\1\373\4\0"+
    "\24\373\30\0\1\374\4\0\24\374\30\0\1\375\4\0"+
    "\24\375\30\0\1\376\4\0\24\376\30\0\1\377\4\0"+
    "\24\377\30\0\1\u0100\4\0\24\u0100\30\0\1\u0101\4\0"+
    "\24\u0101\30\0\1\u0102\4\0\24\u0102\30\0\1\u0103\4\0"+
    "\24\u0103\30\0\1\u0104\4\0\24\u0104\30\0\1\u0105\4\0"+
    "\24\u0105\30\0\1\u0106\4\0\24\u0106\30\0\1\u0107\4\0"+
    "\24\u0107\11\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10437];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\3\1\1\11\2\1\1\11"+
    "\5\1\1\11\15\1\6\11\2\1\1\0\1\11\1\1"+
    "\1\0\3\11\1\0\1\1\1\0\1\1\4\11\20\1"+
    "\1\11\5\0\1\1\1\0\7\1\2\0\5\1\1\0"+
    "\4\1\1\11\1\0\1\11\1\0\1\1\1\0\10\1"+
    "\2\11\2\1\1\0\3\1\1\0\1\1\1\0\4\1"+
    "\1\11\2\1\1\11\2\1\1\0\1\1\1\11\4\1"+
    "\1\11\171\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[263];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CodeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println(
		"Token no reconocido: " +
		yytext()+ ", en la linea: " + 
		yyline + ", columna:  " +
		yycolumn 
	);
            }
          // fall through
          case 49: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 50: break;
          case 3:
            { return new Symbol(sym.BALTASAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 51: break;
          case 4:
            { return new Symbol(sym.GASPAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 52: break;
          case 5:
            { return new Symbol(sym.ABRECUENTO, yyline, yycolumn, yytext());
            }
          // fall through
          case 53: break;
          case 6:
            { return new Symbol(sym.CIERRECUENTO, yyline, yycolumn, yytext());
            }
          // fall through
          case 54: break;
          case 7:
            { return new Symbol(sym.COMET, yyline, yycolumn, yytext());
            }
          // fall through
          case 55: break;
          case 8:
            { return new Symbol(sym.RUDOLPH, yyline, yycolumn, yytext());
            }
          // fall through
          case 56: break;
          case 9:
            { return new Symbol(sym.COMA, yyline, yycolumn, yytext());
            }
          // fall through
          case 57: break;
          case 10:
            { return new Symbol(sym.DASHER, yyline, yycolumn, yytext());
            }
          // fall through
          case 58: break;
          case 11:
            { return new Symbol(sym.VIXEN, yyline, yycolumn, yytext());
            }
          // fall through
          case 59: break;
          case 12:
            { return new Symbol(sym.L_PAPA_NOEL, yyline, yycolumn, yytext());
            }
          // fall through
          case 60: break;
          case 13:
            { return new Symbol(sym.ZWARTE_PIET, yyline, yycolumn, yytext());
            }
          // fall through
          case 61: break;
          case 14:
            { return new Symbol(sym.PEPPER_MINSTIX, yyline, yycolumn, yytext());
            }
          // fall through
          case 62: break;
          case 15:
            { return new Symbol(sym.KRAMPUS, yyline, yycolumn, yytext());
            }
          // fall through
          case 63: break;
          case 16:
            { return new Symbol(sym.PERSONA, yyline, yycolumn, yytext());
            }
          // fall through
          case 64: break;
          case 17:
            { return new Symbol(sym.ABREEMPAQUE, yyline, yycolumn, yytext());
            }
          // fall through
          case 65: break;
          case 18:
            { return new Symbol(sym.CIERRAEMPAQUE, yyline, yycolumn, yytext());
            }
          // fall through
          case 66: break;
          case 19:
            { return new Symbol(sym.MELCHOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 67: break;
          case 20:
            { return new Symbol(sym.ABREREGALO, yyline, yycolumn, yytext());
            }
          // fall through
          case 68: break;
          case 21:
            { return new Symbol(sym.CIERRAREGALO, yyline, yycolumn, yytext());
            }
          // fall through
          case 69: break;
          case 22:
            { return new Symbol(sym.TOTIN, yyline, yycolumn, yytext());
            }
          // fall through
          case 70: break;
          case 23:
            { return new Symbol(sym.L_SAN_NICOLAS, yyline, yycolumn, yytext());
            }
          // fall through
          case 71: break;
          case 24:
            { return new Symbol(sym.RENILLO, yyline, yycolumn, yytext());
            }
          // fall through
          case 72: break;
          case 25:
            { return new Symbol(sym.GRINCH, yyline, yycolumn, yytext());
            }
          // fall through
          case 73: break;
          case 26:
            { return new Symbol(sym.QUIEN, yyline, yycolumn, yytext());
            }
          // fall through
          case 74: break;
          case 27:
            { return new Symbol(sym.ENTREGA, yyline, yycolumn, yytext());
            }
          // fall through
          case 75: break;
          case 28:
            { return new Symbol(sym.BELSNICKEL, yyline, yycolumn, yytext());
            }
          // fall through
          case 76: break;
          case 29:
            { return new Symbol(sym.SNOWBALL_ALABASTRO, yyline, yycolumn, yytext());
            }
          // fall through
          case 77: break;
          case 30:
            { return new Symbol(sym.KNECHT_RUPRECHT, yyline, yycolumn, yytext());
            }
          // fall through
          case 78: break;
          case 31:
            { return new Symbol(sym.HACE, yyline, yycolumn, yytext());
            }
          // fall through
          case 79: break;
          case 32:
            { return new Symbol(sym.ELFO, yyline, yycolumn, yytext());
            }
          // fall through
          case 80: break;
          case 33:
            { return new Symbol(sym.L_COLACHO, yyline, yycolumn, yytext());
            }
          // fall through
          case 81: break;
          case 34:
            { return new Symbol(sym.FINREGALO, yyline, yycolumn, yytext());
            }
          // fall through
          case 82: break;
          case 35:
            { return new Symbol(sym.ENVUELVE, yyline, yycolumn, yytext());
            }
          // fall through
          case 83: break;
          case 36:
            { return new Symbol(sym.PAPA_NOEL, yyline, yycolumn, yytext());
            }
          // fall through
          case 84: break;
          case 37:
            { return new Symbol(sym.NINO_JESUS, yyline, yycolumn, yytext());
            }
          // fall through
          case 85: break;
          case 38:
            { return new Symbol(sym.HADA, yyline, yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 39:
            { return new Symbol(sym.DUENDE, yyline, yycolumn, yytext());
            }
          // fall through
          case 87: break;
          case 40:
            { return new Symbol(sym.ESCUCHA, yyline, yycolumn, yytext());
            }
          // fall through
          case 88: break;
          case 41:
            { return new Symbol(sym.SANTA, yyline, yycolumn, yytext());
            }
          // fall through
          case 89: break;
          case 42:
            { return new Symbol(sym.CORTA, yyline, yycolumn, yytext());
            }
          // fall through
          case 90: break;
          case 43:
            { return new Symbol(sym.COLACHO, yyline, yycolumn, yytext());
            }
          // fall through
          case 91: break;
          case 44:
            { return new Symbol(sym.NARRA, yyline, yycolumn, yytext());
            }
          // fall through
          case 92: break;
          case 45:
            { return new Symbol(sym.REVISA, yyline, yycolumn, yytext());
            }
          // fall through
          case 93: break;
          case 46:
            { return new Symbol(sym.ENVIA, yyline, yycolumn, yytext());
            }
          // fall through
          case 94: break;
          case 47:
            { return new Symbol(sym.SAN_NICOLAS, yyline, yycolumn, yytext());
            }
          // fall through
          case 95: break;
          case 48:
            { return new Symbol(sym.SANTA_CLAUS, yyline, yycolumn, yytext());
            }
          // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
