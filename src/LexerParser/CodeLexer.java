// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/LexerParser/lexer.jflex

package LexerParser;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class CodeLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\22\0\1\1"+
    "\1\5\1\6\1\7\3\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\0"+
    "\1\24\1\25\1\26\1\10\1\27\4\30\1\31\25\30"+
    "\1\32\1\33\1\34\1\35\1\30\1\0\4\30\1\31"+
    "\10\30\1\36\3\30\1\37\1\30\1\40\6\30\1\41"+
    "\1\0\1\42\1\43\6\0\1\3\33\0\1\10\37\0"+
    "\1\44\7\0\1\44\3\0\1\44\3\0\1\44\1\0"+
    "\1\44\6\0\1\44\6\0\1\44\7\0\1\44\3\0"+
    "\1\44\3\0\1\44\1\0\1\44\6\0\1\44\u012d\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\1\3\1\4\1\5\1\6\2\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\2\1\15\1\16"+
    "\1\2\1\17\1\20\1\21\1\3\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\3\1\4\1\32"+
    "\1\6\1\31\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\31\1\17\1\20\1\21\1\3\1\22"+
    "\1\23\1\33\1\24\1\25\1\26\1\27\1\30\1\34"+
    "\2\35\1\0\1\36\1\0\1\37\1\40\1\41\1\1"+
    "\2\0\1\42\1\16\1\34\1\43\1\44\1\45\1\46"+
    "\1\0\2\22\1\47\1\35\2\31\1\37\1\40\1\41"+
    "\2\31\1\16\1\43\1\44\1\45\1\46\1\22\1\50"+
    "\1\51\1\52\1\53\1\31\1\54\1\0\1\1\1\55"+
    "\1\56\1\0\2\42\3\0\3\22\1\31\1\56\1\31"+
    "\1\22\1\16\1\1\1\57\3\60\1\56\1\61\2\62"+
    "\3\22\1\16\1\31\1\56\1\22\1\0\1\1\1\56"+
    "\1\60\4\22\1\1\1\0\4\22\1\0\4\22\1\0"+
    "\4\22\1\0\u01dc\22\2\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[637];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\112\0\157\0\224\0\271\0\157"+
    "\0\336\0\u0103\0\112\0\u0128\0\u014d\0\112\0\u0172\0\u0197"+
    "\0\u01bc\0\u01e1\0\u0206\0\u022b\0\112\0\u0250\0\u0275\0\u029a"+
    "\0\112\0\112\0\112\0\u02bf\0\112\0\112\0\u02e4\0\u02e4"+
    "\0\u02e4\0\224\0\u0309\0\u032e\0\u0353\0\u02e4\0\u0378\0\u039d"+
    "\0\u02e4\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456\0\u02e4\0\u047b"+
    "\0\u04a0\0\u04c5\0\u02e4\0\u04ea\0\u02e4\0\u02e4\0\u050f\0\u02e4"+
    "\0\u02e4\0\157\0\112\0\271\0\u0534\0\u0559\0\u057e\0\112"+
    "\0\112\0\112\0\u05a3\0\u01bc\0\u05c8\0\u05ed\0\u0612\0\u0637"+
    "\0\112\0\112\0\112\0\112\0\u065c\0\u0681\0\u06a6\0\u02bf"+
    "\0\u0309\0\u06cb\0\u06f0\0\u02e4\0\u02e4\0\u02e4\0\u03e7\0\u0715"+
    "\0\u073a\0\u02e4\0\u02e4\0\u02e4\0\u02e4\0\u075f\0\112\0\112"+
    "\0\112\0\112\0\u050f\0\112\0\u0784\0\u07a9\0\u05c8\0\u07ce"+
    "\0\u07f3\0\u0818\0\u083d\0\u0862\0\u0887\0\u083d\0\u08ac\0\u08d1"+
    "\0\u08f6\0\u091b\0\u0940\0\u0965\0\u098a\0\112\0\u09af\0\u09d4"+
    "\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u083d\0\u0a8d\0\u0ab2\0\u0ad7"+
    "\0\u0afc\0\u0b21\0\u02e4\0\u0b46\0\u0965\0\u0b6b\0\u0b90\0\u0bb5"+
    "\0\u0b90\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8"+
    "\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb\0\u0de0"+
    "\0\u0e05\0\u0e2a\0\u0e4f\0\u0e74\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08"+
    "\0\u0f2d\0\u0f52\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b\0\u1030"+
    "\0\u1055\0\u107a\0\u109f\0\u10c4\0\u10e9\0\u110e\0\u1133\0\u1158"+
    "\0\u117d\0\u11a2\0\u11c7\0\u11ec\0\u1211\0\u1236\0\u125b\0\u1280"+
    "\0\u12a5\0\u12ca\0\u12ef\0\u1314\0\u1339\0\u135e\0\u1383\0\u13a8"+
    "\0\u13cd\0\u13f2\0\u1417\0\u143c\0\u1461\0\u1486\0\u14ab\0\u14d0"+
    "\0\u14f5\0\u151a\0\u153f\0\u1564\0\u1589\0\u15ae\0\u15d3\0\u15f8"+
    "\0\u161d\0\u1642\0\u1667\0\u168c\0\u16b1\0\u16d6\0\u16fb\0\u1720"+
    "\0\u1745\0\u176a\0\u178f\0\u17b4\0\u17d9\0\u17fe\0\u1823\0\u1848"+
    "\0\u186d\0\u1892\0\u18b7\0\u18dc\0\u1901\0\u1926\0\u194b\0\u1970"+
    "\0\u1995\0\u19ba\0\u19df\0\u1a04\0\u1a29\0\u1a4e\0\u1a73\0\u1a98"+
    "\0\u1abd\0\u1ae2\0\u1b07\0\u1b2c\0\u1b51\0\u1b76\0\u1b9b\0\u1bc0"+
    "\0\u1be5\0\u1c0a\0\u1c2f\0\u1c54\0\u1c79\0\u1c9e\0\u1cc3\0\u1ce8"+
    "\0\u1d0d\0\u1d32\0\u1d57\0\u1d7c\0\u1da1\0\u1dc6\0\u1deb\0\u1e10"+
    "\0\u1e35\0\u1e5a\0\u1e7f\0\u1ea4\0\u1ec9\0\u1eee\0\u1f13\0\u1f38"+
    "\0\u1f5d\0\u1f82\0\u1fa7\0\u1fcc\0\u1ff1\0\u2016\0\u203b\0\u2060"+
    "\0\u2085\0\u20aa\0\u20cf\0\u20f4\0\u2119\0\u213e\0\u2163\0\u2188"+
    "\0\u21ad\0\u21d2\0\u21f7\0\u221c\0\u2241\0\u2266\0\u228b\0\u22b0"+
    "\0\u22d5\0\u22fa\0\u231f\0\u2344\0\u2369\0\u238e\0\u23b3\0\u23d8"+
    "\0\u23fd\0\u2422\0\u2447\0\u246c\0\u2491\0\u24b6\0\u24db\0\u2500"+
    "\0\u2525\0\u254a\0\u256f\0\u2594\0\u25b9\0\u25de\0\u2603\0\u2628"+
    "\0\u264d\0\u2672\0\u2697\0\u26bc\0\u26e1\0\u2706\0\u272b\0\u2750"+
    "\0\u2775\0\u279a\0\u27bf\0\u27e4\0\u2809\0\u282e\0\u2853\0\u2878"+
    "\0\u289d\0\u28c2\0\u28e7\0\u290c\0\u2931\0\u2956\0\u297b\0\u29a0"+
    "\0\u29c5\0\u29ea\0\u2a0f\0\u2a34\0\u2a59\0\u2a7e\0\u2aa3\0\u2ac8"+
    "\0\u2aed\0\u2b12\0\u2b37\0\u2b5c\0\u2b81\0\u2ba6\0\u2bcb\0\u2bf0"+
    "\0\u2c15\0\u2c3a\0\u2c5f\0\u2c84\0\u2ca9\0\u2cce\0\u2cf3\0\u2d18"+
    "\0\u2d3d\0\u2d62\0\u2d87\0\u2dac\0\u2dd1\0\u2df6\0\u2e1b\0\u2e40"+
    "\0\u2e65\0\u2e8a\0\u2eaf\0\u2ed4\0\u2ef9\0\u2f1e\0\u2f43\0\u2f68"+
    "\0\u2f8d\0\u2fb2\0\u2fd7\0\u2ffc\0\u3021\0\u3046\0\u306b\0\u3090"+
    "\0\u30b5\0\u30da\0\u30ff\0\u3124\0\u3149\0\u316e\0\u3193\0\u31b8"+
    "\0\u31dd\0\u3202\0\u3227\0\u324c\0\u3271\0\u3296\0\u32bb\0\u32e0"+
    "\0\u3305\0\u332a\0\u334f\0\u3374\0\u3399\0\u33be\0\u33e3\0\u3408"+
    "\0\u342d\0\u3452\0\u3477\0\u349c\0\u34c1\0\u34e6\0\u350b\0\u3530"+
    "\0\u3555\0\u357a\0\u359f\0\u35c4\0\u35e9\0\u360e\0\u3633\0\u3658"+
    "\0\u367d\0\u36a2\0\u36c7\0\u36ec\0\u3711\0\u3736\0\u375b\0\u3780"+
    "\0\u37a5\0\u37ca\0\u37ef\0\u3814\0\u3839\0\u385e\0\u3883\0\u38a8"+
    "\0\u38cd\0\u38f2\0\u3917\0\u393c\0\u3961\0\u3986\0\u39ab\0\u39d0"+
    "\0\u39f5\0\u3a1a\0\u3a3f\0\u3a64\0\u3a89\0\u3aae\0\u3ad3\0\u3af8"+
    "\0\u3b1d\0\u3b42\0\u3b67\0\u3b8c\0\u3bb1\0\u3bd6\0\u3bfb\0\u3c20"+
    "\0\u3c45\0\u3c6a\0\u3c8f\0\u3cb4\0\u3cd9\0\u3cfe\0\u3d23\0\u3d48"+
    "\0\u3d6d\0\u3d92\0\u3db7\0\u3ddc\0\u3e01\0\u3e26\0\u3e4b\0\u3e70"+
    "\0\u3e95\0\u3eba\0\u3edf\0\u3f04\0\u3f29\0\u3f4e\0\u3f73\0\u3f98"+
    "\0\u3fbd\0\u3fe2\0\u4007\0\u402c\0\u4051\0\u4076\0\u409b\0\u40c0"+
    "\0\u40e5\0\u410a\0\u412f\0\u4154\0\u4179\0\u419e\0\u41c3\0\u41e8"+
    "\0\u420d\0\u4232\0\u4257\0\u427c\0\u42a1\0\u42c6\0\u42eb\0\u4310"+
    "\0\u4335\0\u435a\0\u437f\0\u43a4\0\u43c9\0\u43ee\0\u4413\0\u4438"+
    "\0\u445d\0\u4482\0\u44a7\0\u44cc\0\u44f1\0\u4516\0\u453b\0\u4560"+
    "\0\u4585\0\u45aa\0\u45cf\0\u45f4\0\u4619\0\u463e\0\u4663\0\u4688"+
    "\0\u46ad\0\u46d2\0\u46f7\0\u471c\0\u4741\0\u4766\0\u478b\0\u47b0"+
    "\0\u47d5\0\u47fa\0\u481f\0\u4844\0\u4869\0\u488e\0\u48b3\0\u48d8"+
    "\0\u48fd\0\u4922\0\u4947\0\u496c\0\u4991\0\u49b6\0\u49db\0\u4a00"+
    "\0\u4a25\0\u4a4a\0\u4a6f\0\u4a94\0\u4ab9\0\u4ade\0\u4b03\0\u4b28"+
    "\0\u4b4d\0\u4b72\0\u4b97\0\u4bbc\0\u4be1\0\u4c06\0\u4c2b\0\u4c50"+
    "\0\u4c75\0\u4c9a\0\u4cbf\0\u4ce4\0\u4d09\0\u4d2e\0\u4d53\0\u4d78"+
    "\0\u4d9d\0\u4dc2\0\u4de7\0\u4e0c\0\u4e31\0\u4e56\0\u4e7b\0\u4ea0"+
    "\0\u4ec5\0\u4eea\0\u4f0f\0\u4f34\0\u4f59\0\u4f7e\0\u4fa3\0\u4fc8"+
    "\0\u4fed\0\u5012\0\u5037\0\u505c\0\u5081\0\u50a6\0\u50cb\0\u50f0"+
    "\0\u5115\0\u513a\0\u515f\0\u5184\0\u51a9\0\u51ce\0\u51f3\0\u5218"+
    "\0\u523d\0\u5262\0\u5287\0\u52ac\0\u52d1\0\u52f6\0\u531b\0\u5340"+
    "\0\157\0\u5365\0\u02e4\0\u5340\0\u5365";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[637];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\2\30"+
    "\1\31\1\3\1\32\1\33\3\30\1\34\1\35\1\36"+
    "\1\10\1\37\1\40\1\4\1\37\1\40\1\41\1\42"+
    "\1\43\1\37\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\37\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\2\62\1\63\1\64\1\65\1\66\3\62\1\67"+
    "\1\70\1\71\1\37\52\0\1\72\1\0\2\72\11\0"+
    "\1\72\5\0\2\72\4\0\3\72\3\0\1\72\6\6"+
    "\1\73\36\6\5\0\1\72\1\0\2\72\11\0\1\74"+
    "\5\0\2\72\4\0\3\72\3\0\1\72\11\75\1\0"+
    "\33\75\14\0\1\76\2\0\1\77\41\0\1\100\45\0"+
    "\1\101\46\0\1\102\47\0\1\103\22\0\21\104\1\4"+
    "\23\104\16\0\1\105\1\0\1\106\1\0\1\107\5\0"+
    "\2\110\4\0\3\110\3\0\1\72\25\0\1\111\44\0"+
    "\1\112\1\113\43\0\1\114\17\0\2\27\3\0\40\27"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\116"+
    "\5\0\2\117\4\0\3\117\3\0\1\72\42\120\1\0"+
    "\2\120\2\37\1\0\3\37\1\0\24\37\1\0\13\37"+
    "\1\0\3\37\1\0\13\37\1\121\10\37\1\0\11\37"+
    "\2\44\1\75\3\44\1\75\2\44\1\37\21\44\1\75"+
    "\11\44\2\37\1\0\3\37\1\0\5\37\1\122\2\37"+
    "\1\123\13\37\1\0\13\37\1\0\3\37\1\0\5\37"+
    "\1\124\16\37\1\0\13\37\1\0\3\37\1\0\6\37"+
    "\1\125\15\37\1\0\13\37\1\0\3\37\1\0\10\37"+
    "\1\126\13\37\1\0\11\37\2\127\1\104\3\127\1\104"+
    "\12\127\1\40\11\127\1\104\11\127\2\37\1\0\3\37"+
    "\1\0\11\37\1\130\1\37\1\131\10\37\1\0\13\37"+
    "\1\0\3\37\1\0\16\37\1\132\5\37\1\0\13\37"+
    "\1\0\3\37\1\0\16\37\1\133\1\134\4\37\1\0"+
    "\13\37\1\0\3\37\1\0\16\37\1\135\5\37\1\0"+
    "\11\37\2\61\1\0\2\37\1\61\1\27\24\61\1\27"+
    "\11\61\2\37\1\0\3\37\1\0\13\37\1\136\5\37"+
    "\2\136\1\37\1\0\2\37\3\136\4\37\6\0\1\137"+
    "\27\0\1\140\1\141\1\142\4\0\2\143\1\120\3\143"+
    "\1\120\24\143\1\120\6\143\1\37\2\143\11\75\1\144"+
    "\33\75\13\76\2\0\30\76\22\0\1\145\44\0\1\103"+
    "\6\0\1\146\35\0\1\147\44\0\1\150\5\0\2\151"+
    "\4\0\3\151\22\0\1\105\1\0\1\152\1\0\1\107"+
    "\5\0\2\110\4\0\3\110\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\153\1\0\1\72\5\0\2\110"+
    "\4\0\3\110\3\0\1\72\22\0\1\154\5\0\2\155"+
    "\4\0\3\155\11\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\157\5\0\2\160\4\0\3\160\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\157"+
    "\5\0\2\161\4\0\3\161\3\0\1\72\2\122\1\76"+
    "\3\122\1\76\4\122\2\37\16\122\1\76\11\122\2\37"+
    "\1\0\3\37\1\0\13\37\1\162\10\37\1\0\13\37"+
    "\1\0\3\37\1\0\13\37\1\163\10\37\1\0\13\37"+
    "\1\0\3\37\1\0\11\37\1\164\1\37\1\131\10\37"+
    "\1\0\13\37\1\0\3\37\1\0\13\37\1\165\5\37"+
    "\2\165\1\37\1\0\2\37\3\165\4\37\13\0\1\166"+
    "\6\0\1\145\41\0\1\167\2\0\1\167\42\0\1\170"+
    "\1\0\1\150\5\0\1\171\1\172\4\0\3\171\26\0"+
    "\1\173\5\0\2\151\4\0\3\151\26\0\1\174\5\0"+
    "\2\151\4\0\3\151\26\0\1\175\44\0\1\154\5\0"+
    "\2\176\4\0\3\176\26\0\1\177\5\0\2\155\4\0"+
    "\3\155\11\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\200\5\0\2\201\4\0\3\201\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\201\5\0\2\201\4\0"+
    "\3\201\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\200\5\0\2\202\4\0\3\202\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\4\37\1\203\6\37"+
    "\1\162\10\37\1\0\13\37\1\0\3\37\1\0\13\37"+
    "\1\163\6\37\1\204\1\37\1\0\13\37\1\0\3\37"+
    "\1\0\13\37\1\205\10\37\1\0\13\37\1\0\3\37"+
    "\1\0\13\37\1\206\5\37\2\206\1\37\1\0\2\37"+
    "\3\206\4\37\22\0\1\167\42\0\1\170\1\0\1\170"+
    "\52\0\2\171\4\0\3\171\23\0\1\207\1\210\1\0"+
    "\1\211\5\0\2\171\4\0\3\171\26\0\1\173\42\0"+
    "\1\170\1\0\1\174\5\0\1\171\1\212\4\0\3\171"+
    "\34\0\2\176\4\0\3\176\26\0\1\177\27\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\213\5\0\2\214"+
    "\4\0\3\214\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\214\5\0\2\214\4\0\3\214\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\213"+
    "\5\0\2\215\4\0\3\215\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\10\37\1\164\2\37\1\205\10\37\1\0"+
    "\13\37\1\0\3\37\1\0\13\37\1\216\5\37\2\216"+
    "\1\37\1\0\2\37\3\216\4\37\20\0\1\210\1\0"+
    "\1\211\44\0\1\217\41\0\1\220\1\210\1\0\1\220"+
    "\5\0\2\171\4\0\3\171\11\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\221\5\0\2\222\4\0\3\222"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\222"+
    "\5\0\2\222\4\0\3\222\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\221\5\0\2\223"+
    "\4\0\3\223\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\224\5\37\2\224\1\37\1\0\2\37\3\224"+
    "\4\37\20\0\1\225\1\0\1\217\42\0\1\210\1\0"+
    "\1\220\27\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\226\5\0\2\227\4\0\3\227\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\227\5\0\2\227\4\0"+
    "\3\227\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\226\5\0\2\230\4\0\3\230\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\231\5\37"+
    "\2\231\1\37\1\0\2\37\3\231\4\37\22\0\1\232"+
    "\27\0\1\72\1\0\2\72\7\0\1\156\1\0\1\233"+
    "\5\0\2\234\4\0\3\234\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\234\5\0\2\234\4\0\3\234"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\233\5\0\2\235\4\0\3\235\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\236\5\37\2\236"+
    "\1\37\1\0\2\37\3\236\4\37\22\0\1\232\6\0"+
    "\1\237\20\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\240\5\0\2\241\4\0\3\241\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\241\5\0\2\241\4\0"+
    "\3\241\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\240\5\0\2\242\4\0\3\242\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\243\5\37"+
    "\2\243\1\37\1\0\2\37\3\243\4\37\17\0\1\220"+
    "\1\210\1\0\1\220\27\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\244\5\0\2\245\4\0\3\245\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\245\5\0"+
    "\2\245\4\0\3\245\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\244\5\0\2\246\4\0"+
    "\3\246\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\247\5\37\2\247\1\37\1\0\2\37\3\247\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\250"+
    "\5\0\2\251\4\0\3\251\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\251\5\0\2\251\4\0\3\251"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\250\5\0\2\252\4\0\3\252\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\253\5\37\2\253"+
    "\1\37\1\0\2\37\3\253\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\254\5\0\2\255\4\0"+
    "\3\255\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\255\5\0\2\255\4\0\3\255\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\254\5\0"+
    "\2\256\4\0\3\256\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\257\5\37\2\257\1\37\1\0\2\37"+
    "\3\257\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\260\5\0\2\261\4\0\3\261\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\261\5\0\2\261"+
    "\4\0\3\261\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\260\5\0\2\262\4\0\3\262"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\263"+
    "\5\37\2\263\1\37\1\0\2\37\3\263\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\264\5\0"+
    "\2\265\4\0\3\265\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\265\5\0\2\265\4\0\3\265\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\264\5\0\2\266\4\0\3\266\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\267\5\37\2\267\1\37"+
    "\1\0\2\37\3\267\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\270\5\0\2\271\4\0\3\271"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\271"+
    "\5\0\2\271\4\0\3\271\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\270\5\0\2\272"+
    "\4\0\3\272\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\273\5\37\2\273\1\37\1\0\2\37\3\273"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\274\5\0\2\275\4\0\3\275\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\275\5\0\2\275\4\0"+
    "\3\275\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\274\5\0\2\276\4\0\3\276\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\277\5\37"+
    "\2\277\1\37\1\0\2\37\3\277\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\300\5\0\2\301"+
    "\4\0\3\301\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\301\5\0\2\301\4\0\3\301\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\300"+
    "\5\0\2\302\4\0\3\302\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\303\5\37\2\303\1\37\1\0"+
    "\2\37\3\303\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\304\5\0\2\305\4\0\3\305\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\305\5\0"+
    "\2\305\4\0\3\305\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\304\5\0\2\306\4\0"+
    "\3\306\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\307\5\37\2\307\1\37\1\0\2\37\3\307\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\310"+
    "\5\0\2\311\4\0\3\311\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\311\5\0\2\311\4\0\3\311"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\310\5\0\2\312\4\0\3\312\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\313\5\37\2\313"+
    "\1\37\1\0\2\37\3\313\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\314\5\0\2\315\4\0"+
    "\3\315\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\315\5\0\2\315\4\0\3\315\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\314\5\0"+
    "\2\316\4\0\3\316\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\317\5\37\2\317\1\37\1\0\2\37"+
    "\3\317\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\320\5\0\2\321\4\0\3\321\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\321\5\0\2\321"+
    "\4\0\3\321\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\320\5\0\2\322\4\0\3\322"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\323"+
    "\5\37\2\323\1\37\1\0\2\37\3\323\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\324\5\0"+
    "\2\325\4\0\3\325\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\325\5\0\2\325\4\0\3\325\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\324\5\0\2\326\4\0\3\326\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\327\5\37\2\327\1\37"+
    "\1\0\2\37\3\327\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\330\5\0\2\331\4\0\3\331"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\331"+
    "\5\0\2\331\4\0\3\331\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\330\5\0\2\332"+
    "\4\0\3\332\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\333\5\37\2\333\1\37\1\0\2\37\3\333"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\334\5\0\2\335\4\0\3\335\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\335\5\0\2\335\4\0"+
    "\3\335\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\334\5\0\2\336\4\0\3\336\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\337\5\37"+
    "\2\337\1\37\1\0\2\37\3\337\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\340\5\0\2\341"+
    "\4\0\3\341\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\341\5\0\2\341\4\0\3\341\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\340"+
    "\5\0\2\342\4\0\3\342\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\343\5\37\2\343\1\37\1\0"+
    "\2\37\3\343\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\344\5\0\2\345\4\0\3\345\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\345\5\0"+
    "\2\345\4\0\3\345\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\344\5\0\2\346\4\0"+
    "\3\346\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\347\5\37\2\347\1\37\1\0\2\37\3\347\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\350"+
    "\5\0\2\351\4\0\3\351\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\351\5\0\2\351\4\0\3\351"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\350\5\0\2\352\4\0\3\352\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\353\5\37\2\353"+
    "\1\37\1\0\2\37\3\353\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\354\5\0\2\355\4\0"+
    "\3\355\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\355\5\0\2\355\4\0\3\355\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\354\5\0"+
    "\2\356\4\0\3\356\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\357\5\37\2\357\1\37\1\0\2\37"+
    "\3\357\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\360\5\0\2\361\4\0\3\361\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\361\5\0\2\361"+
    "\4\0\3\361\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\360\5\0\2\362\4\0\3\362"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\363"+
    "\5\37\2\363\1\37\1\0\2\37\3\363\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\364\5\0"+
    "\2\365\4\0\3\365\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\365\5\0\2\365\4\0\3\365\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\364\5\0\2\366\4\0\3\366\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\367\5\37\2\367\1\37"+
    "\1\0\2\37\3\367\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\370\5\0\2\371\4\0\3\371"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\371"+
    "\5\0\2\371\4\0\3\371\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\370\5\0\2\372"+
    "\4\0\3\372\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\373\5\37\2\373\1\37\1\0\2\37\3\373"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\374\5\0\2\375\4\0\3\375\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\375\5\0\2\375\4\0"+
    "\3\375\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\374\5\0\2\376\4\0\3\376\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\377\5\37"+
    "\2\377\1\37\1\0\2\37\3\377\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\u0100\5\0\2\u0101"+
    "\4\0\3\u0101\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0101\5\0\2\u0101\4\0\3\u0101\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\u0100"+
    "\5\0\2\u0102\4\0\3\u0102\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0103\5\37\2\u0103\1\37\1\0"+
    "\2\37\3\u0103\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\u0104\5\0\2\u0105\4\0\3\u0105\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0105\5\0"+
    "\2\u0105\4\0\3\u0105\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\u0104\5\0\2\u0106\4\0"+
    "\3\u0106\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u0107\5\37\2\u0107\1\37\1\0\2\37\3\u0107\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\u0108"+
    "\5\0\2\u0109\4\0\3\u0109\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u0109\5\0\2\u0109\4\0\3\u0109"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\u0108\5\0\2\u010a\4\0\3\u010a\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u010b\5\37\2\u010b"+
    "\1\37\1\0\2\37\3\u010b\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\u010c\5\0\2\u010d\4\0"+
    "\3\u010d\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u010d\5\0\2\u010d\4\0\3\u010d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\u010c\5\0"+
    "\2\u010e\4\0\3\u010e\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u010f\5\37\2\u010f\1\37\1\0\2\37"+
    "\3\u010f\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\u0110\5\0\2\u0111\4\0\3\u0111\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0111\5\0\2\u0111"+
    "\4\0\3\u0111\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\u0110\5\0\2\u0112\4\0\3\u0112"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0113"+
    "\5\37\2\u0113\1\37\1\0\2\37\3\u0113\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\u0114\5\0"+
    "\2\u0115\4\0\3\u0115\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0115\5\0\2\u0115\4\0\3\u0115\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\u0114\5\0\2\u0116\4\0\3\u0116\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u0117\5\37\2\u0117\1\37"+
    "\1\0\2\37\3\u0117\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\u0118\5\0\2\u0119\4\0\3\u0119"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u0119"+
    "\5\0\2\u0119\4\0\3\u0119\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\u0118\5\0\2\u011a"+
    "\4\0\3\u011a\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u011b\5\37\2\u011b\1\37\1\0\2\37\3\u011b"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\u011c\5\0\2\u011d\4\0\3\u011d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u011d\5\0\2\u011d\4\0"+
    "\3\u011d\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\u011c\5\0\2\u011e\4\0\3\u011e\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u011f\5\37"+
    "\2\u011f\1\37\1\0\2\37\3\u011f\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\u0120\5\0\2\u0121"+
    "\4\0\3\u0121\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0121\5\0\2\u0121\4\0\3\u0121\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\u0120"+
    "\5\0\2\u0122\4\0\3\u0122\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0123\5\37\2\u0123\1\37\1\0"+
    "\2\37\3\u0123\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\u0124\5\0\2\u0125\4\0\3\u0125\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0125\5\0"+
    "\2\u0125\4\0\3\u0125\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\u0124\5\0\2\u0126\4\0"+
    "\3\u0126\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u0127\5\37\2\u0127\1\37\1\0\2\37\3\u0127\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\u0128"+
    "\5\0\2\u0129\4\0\3\u0129\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u0129\5\0\2\u0129\4\0\3\u0129"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\u0128\5\0\2\u012a\4\0\3\u012a\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u012b\5\37\2\u012b"+
    "\1\37\1\0\2\37\3\u012b\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\u012c\5\0\2\u012d\4\0"+
    "\3\u012d\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u012d\5\0\2\u012d\4\0\3\u012d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\u012c\5\0"+
    "\2\u012e\4\0\3\u012e\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u012f\5\37\2\u012f\1\37\1\0\2\37"+
    "\3\u012f\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\u0130\5\0\2\u0131\4\0\3\u0131\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0131\5\0\2\u0131"+
    "\4\0\3\u0131\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\u0130\5\0\2\u0132\4\0\3\u0132"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0133"+
    "\5\37\2\u0133\1\37\1\0\2\37\3\u0133\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\u0134\5\0"+
    "\2\u0135\4\0\3\u0135\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0135\5\0\2\u0135\4\0\3\u0135\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\u0134\5\0\2\u0136\4\0\3\u0136\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u0137\5\37\2\u0137\1\37"+
    "\1\0\2\37\3\u0137\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\u0138\5\0\2\u0139\4\0\3\u0139"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u0139"+
    "\5\0\2\u0139\4\0\3\u0139\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\u0138\5\0\2\u013a"+
    "\4\0\3\u013a\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u013b\5\37\2\u013b\1\37\1\0\2\37\3\u013b"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\u013c\5\0\2\u013d\4\0\3\u013d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u013d\5\0\2\u013d\4\0"+
    "\3\u013d\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\u013c\5\0\2\u013e\4\0\3\u013e\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u013f\5\37"+
    "\2\u013f\1\37\1\0\2\37\3\u013f\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\u0140\5\0\2\u0141"+
    "\4\0\3\u0141\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0141\5\0\2\u0141\4\0\3\u0141\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\u0140"+
    "\5\0\2\u0142\4\0\3\u0142\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0143\5\37\2\u0143\1\37\1\0"+
    "\2\37\3\u0143\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\u0144\5\0\2\u0145\4\0\3\u0145\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0145\5\0"+
    "\2\u0145\4\0\3\u0145\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\u0144\5\0\2\u0146\4\0"+
    "\3\u0146\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u0147\5\37\2\u0147\1\37\1\0\2\37\3\u0147\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\u0148"+
    "\5\0\2\u0149\4\0\3\u0149\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u0149\5\0\2\u0149\4\0\3\u0149"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\u0148\5\0\2\u014a\4\0\3\u014a\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u014b\5\37\2\u014b"+
    "\1\37\1\0\2\37\3\u014b\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\u014c\5\0\2\u014d\4\0"+
    "\3\u014d\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u014d\5\0\2\u014d\4\0\3\u014d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\u014c\5\0"+
    "\2\u014e\4\0\3\u014e\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u014f\5\37\2\u014f\1\37\1\0\2\37"+
    "\3\u014f\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\u0150\5\0\2\u0151\4\0\3\u0151\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0151\5\0\2\u0151"+
    "\4\0\3\u0151\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\u0150\5\0\2\u0152\4\0\3\u0152"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0153"+
    "\5\37\2\u0153\1\37\1\0\2\37\3\u0153\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\u0154\5\0"+
    "\2\u0155\4\0\3\u0155\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0155\5\0\2\u0155\4\0\3\u0155\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\u0154\5\0\2\u0156\4\0\3\u0156\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u0157\5\37\2\u0157\1\37"+
    "\1\0\2\37\3\u0157\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\u0158\5\0\2\u0159\4\0\3\u0159"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u0159"+
    "\5\0\2\u0159\4\0\3\u0159\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\u0158\5\0\2\u015a"+
    "\4\0\3\u015a\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u015b\5\37\2\u015b\1\37\1\0\2\37\3\u015b"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\u015c\5\0\2\u015d\4\0\3\u015d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u015d\5\0\2\u015d\4\0"+
    "\3\u015d\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\u015c\5\0\2\u015e\4\0\3\u015e\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u015f\5\37"+
    "\2\u015f\1\37\1\0\2\37\3\u015f\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\u0160\5\0\2\u0161"+
    "\4\0\3\u0161\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0161\5\0\2\u0161\4\0\3\u0161\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\u0160"+
    "\5\0\2\u0162\4\0\3\u0162\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0163\5\37\2\u0163\1\37\1\0"+
    "\2\37\3\u0163\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\u0164\5\0\2\u0165\4\0\3\u0165\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0165\5\0"+
    "\2\u0165\4\0\3\u0165\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\u0164\5\0\2\u0166\4\0"+
    "\3\u0166\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u0167\5\37\2\u0167\1\37\1\0\2\37\3\u0167\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\u0168"+
    "\5\0\2\u0169\4\0\3\u0169\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u0169\5\0\2\u0169\4\0\3\u0169"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\u0168\5\0\2\u016a\4\0\3\u016a\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u016b\5\37\2\u016b"+
    "\1\37\1\0\2\37\3\u016b\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\u016c\5\0\2\u016d\4\0"+
    "\3\u016d\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u016d\5\0\2\u016d\4\0\3\u016d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\u016c\5\0"+
    "\2\u016e\4\0\3\u016e\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u016f\5\37\2\u016f\1\37\1\0\2\37"+
    "\3\u016f\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\u0170\5\0\2\u0171\4\0\3\u0171\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0171\5\0\2\u0171"+
    "\4\0\3\u0171\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\u0170\5\0\2\u0172\4\0\3\u0172"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0173"+
    "\5\37\2\u0173\1\37\1\0\2\37\3\u0173\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\u0174\5\0"+
    "\2\u0175\4\0\3\u0175\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0175\5\0\2\u0175\4\0\3\u0175\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\u0174\5\0\2\u0176\4\0\3\u0176\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u0177\5\37\2\u0177\1\37"+
    "\1\0\2\37\3\u0177\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\u0178\5\0\2\u0179\4\0\3\u0179"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u0179"+
    "\5\0\2\u0179\4\0\3\u0179\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\u0178\5\0\2\u017a"+
    "\4\0\3\u017a\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u017b\5\37\2\u017b\1\37\1\0\2\37\3\u017b"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\u017c\5\0\2\u017d\4\0\3\u017d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u017d\5\0\2\u017d\4\0"+
    "\3\u017d\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\u017c\5\0\2\u017e\4\0\3\u017e\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u017f\5\37"+
    "\2\u017f\1\37\1\0\2\37\3\u017f\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\u0180\5\0\2\u0181"+
    "\4\0\3\u0181\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0181\5\0\2\u0181\4\0\3\u0181\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\u0180"+
    "\5\0\2\u0182\4\0\3\u0182\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0183\5\37\2\u0183\1\37\1\0"+
    "\2\37\3\u0183\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\u0184\5\0\2\u0185\4\0\3\u0185\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0185\5\0"+
    "\2\u0185\4\0\3\u0185\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\u0184\5\0\2\u0186\4\0"+
    "\3\u0186\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u0187\5\37\2\u0187\1\37\1\0\2\37\3\u0187\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\u0188"+
    "\5\0\2\u0189\4\0\3\u0189\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u0189\5\0\2\u0189\4\0\3\u0189"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\u0188\5\0\2\u018a\4\0\3\u018a\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u018b\5\37\2\u018b"+
    "\1\37\1\0\2\37\3\u018b\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\u018c\5\0\2\u018d\4\0"+
    "\3\u018d\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u018d\5\0\2\u018d\4\0\3\u018d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\u018c\5\0"+
    "\2\u018e\4\0\3\u018e\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u018f\5\37\2\u018f\1\37\1\0\2\37"+
    "\3\u018f\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\u0190\5\0\2\u0191\4\0\3\u0191\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0191\5\0\2\u0191"+
    "\4\0\3\u0191\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\u0190\5\0\2\u0192\4\0\3\u0192"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0193"+
    "\5\37\2\u0193\1\37\1\0\2\37\3\u0193\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\u0194\5\0"+
    "\2\u0195\4\0\3\u0195\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0195\5\0\2\u0195\4\0\3\u0195\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\u0194\5\0\2\u0196\4\0\3\u0196\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u0197\5\37\2\u0197\1\37"+
    "\1\0\2\37\3\u0197\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\u0198\5\0\2\u0199\4\0\3\u0199"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u0199"+
    "\5\0\2\u0199\4\0\3\u0199\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\u0198\5\0\2\u019a"+
    "\4\0\3\u019a\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u019b\5\37\2\u019b\1\37\1\0\2\37\3\u019b"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\u019c\5\0\2\u019d\4\0\3\u019d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u019d\5\0\2\u019d\4\0"+
    "\3\u019d\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\u019c\5\0\2\u019e\4\0\3\u019e\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u019f\5\37"+
    "\2\u019f\1\37\1\0\2\37\3\u019f\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\u01a0\5\0\2\u01a1"+
    "\4\0\3\u01a1\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u01a1\5\0\2\u01a1\4\0\3\u01a1\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\u01a0"+
    "\5\0\2\u01a2\4\0\3\u01a2\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u01a3\5\37\2\u01a3\1\37\1\0"+
    "\2\37\3\u01a3\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\u01a4\5\0\2\u01a5\4\0\3\u01a5\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u01a5\5\0"+
    "\2\u01a5\4\0\3\u01a5\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\u01a4\5\0\2\u01a6\4\0"+
    "\3\u01a6\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u01a7\5\37\2\u01a7\1\37\1\0\2\37\3\u01a7\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\u01a8"+
    "\5\0\2\u01a9\4\0\3\u01a9\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u01a9\5\0\2\u01a9\4\0\3\u01a9"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\u01a8\5\0\2\u01aa\4\0\3\u01aa\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u01ab\5\37\2\u01ab"+
    "\1\37\1\0\2\37\3\u01ab\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\u01ac\5\0\2\u01ad\4\0"+
    "\3\u01ad\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u01ad\5\0\2\u01ad\4\0\3\u01ad\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\u01ac\5\0"+
    "\2\u01ae\4\0\3\u01ae\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u01af\5\37\2\u01af\1\37\1\0\2\37"+
    "\3\u01af\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\u01b0\5\0\2\u01b1\4\0\3\u01b1\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u01b1\5\0\2\u01b1"+
    "\4\0\3\u01b1\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\u01b0\5\0\2\u01b2\4\0\3\u01b2"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u01b3"+
    "\5\37\2\u01b3\1\37\1\0\2\37\3\u01b3\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\u01b4\5\0"+
    "\2\u01b5\4\0\3\u01b5\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u01b5\5\0\2\u01b5\4\0\3\u01b5\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\u01b4\5\0\2\u01b6\4\0\3\u01b6\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u01b7\5\37\2\u01b7\1\37"+
    "\1\0\2\37\3\u01b7\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\u01b8\5\0\2\u01b9\4\0\3\u01b9"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u01b9"+
    "\5\0\2\u01b9\4\0\3\u01b9\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\u01b8\5\0\2\u01ba"+
    "\4\0\3\u01ba\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u01bb\5\37\2\u01bb\1\37\1\0\2\37\3\u01bb"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\u01bc\5\0\2\u01bd\4\0\3\u01bd\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u01bd\5\0\2\u01bd\4\0"+
    "\3\u01bd\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\u01bc\5\0\2\u01be\4\0\3\u01be\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u01bf\5\37"+
    "\2\u01bf\1\37\1\0\2\37\3\u01bf\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\u01c0\5\0\2\u01c1"+
    "\4\0\3\u01c1\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u01c1\5\0\2\u01c1\4\0\3\u01c1\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\u01c0"+
    "\5\0\2\u01c2\4\0\3\u01c2\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u01c3\5\37\2\u01c3\1\37\1\0"+
    "\2\37\3\u01c3\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\u01c4\5\0\2\u01c5\4\0\3\u01c5\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u01c5\5\0"+
    "\2\u01c5\4\0\3\u01c5\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\u01c4\5\0\2\u01c6\4\0"+
    "\3\u01c6\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u01c7\5\37\2\u01c7\1\37\1\0\2\37\3\u01c7\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\u01c8"+
    "\5\0\2\u01c9\4\0\3\u01c9\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u01c9\5\0\2\u01c9\4\0\3\u01c9"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\u01c8\5\0\2\u01ca\4\0\3\u01ca\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u01cb\5\37\2\u01cb"+
    "\1\37\1\0\2\37\3\u01cb\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\u01cc\5\0\2\u01cd\4\0"+
    "\3\u01cd\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u01cd\5\0\2\u01cd\4\0\3\u01cd\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\u01cc\5\0"+
    "\2\u01ce\4\0\3\u01ce\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u01cf\5\37\2\u01cf\1\37\1\0\2\37"+
    "\3\u01cf\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\u01d0\5\0\2\u01d1\4\0\3\u01d1\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u01d1\5\0\2\u01d1"+
    "\4\0\3\u01d1\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\u01d0\5\0\2\u01d2\4\0\3\u01d2"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u01d3"+
    "\5\37\2\u01d3\1\37\1\0\2\37\3\u01d3\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\u01d4\5\0"+
    "\2\u01d5\4\0\3\u01d5\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u01d5\5\0\2\u01d5\4\0\3\u01d5\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\u01d4\5\0\2\u01d6\4\0\3\u01d6\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u01d7\5\37\2\u01d7\1\37"+
    "\1\0\2\37\3\u01d7\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\u01d8\5\0\2\u01d9\4\0\3\u01d9"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u01d9"+
    "\5\0\2\u01d9\4\0\3\u01d9\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\u01d8\5\0\2\u01da"+
    "\4\0\3\u01da\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u01db\5\37\2\u01db\1\37\1\0\2\37\3\u01db"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\u01dc\5\0\2\u01dd\4\0\3\u01dd\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u01dd\5\0\2\u01dd\4\0"+
    "\3\u01dd\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\u01dc\5\0\2\u01de\4\0\3\u01de\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u01df\5\37"+
    "\2\u01df\1\37\1\0\2\37\3\u01df\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\u01e0\5\0\2\u01e1"+
    "\4\0\3\u01e1\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u01e1\5\0\2\u01e1\4\0\3\u01e1\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\u01e0"+
    "\5\0\2\u01e2\4\0\3\u01e2\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u01e3\5\37\2\u01e3\1\37\1\0"+
    "\2\37\3\u01e3\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\u01e4\5\0\2\u01e5\4\0\3\u01e5\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u01e5\5\0"+
    "\2\u01e5\4\0\3\u01e5\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\u01e4\5\0\2\u01e6\4\0"+
    "\3\u01e6\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u01e7\5\37\2\u01e7\1\37\1\0\2\37\3\u01e7\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\u01e8"+
    "\5\0\2\u01e9\4\0\3\u01e9\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u01e9\5\0\2\u01e9\4\0\3\u01e9"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\u01e8\5\0\2\u01ea\4\0\3\u01ea\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u01eb\5\37\2\u01eb"+
    "\1\37\1\0\2\37\3\u01eb\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\u01ec\5\0\2\u01ed\4\0"+
    "\3\u01ed\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u01ed\5\0\2\u01ed\4\0\3\u01ed\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\u01ec\5\0"+
    "\2\u01ee\4\0\3\u01ee\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u01ef\5\37\2\u01ef\1\37\1\0\2\37"+
    "\3\u01ef\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\u01f0\5\0\2\u01f1\4\0\3\u01f1\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u01f1\5\0\2\u01f1"+
    "\4\0\3\u01f1\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\u01f0\5\0\2\u01f2\4\0\3\u01f2"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u01f3"+
    "\5\37\2\u01f3\1\37\1\0\2\37\3\u01f3\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\u01f4\5\0"+
    "\2\u01f5\4\0\3\u01f5\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u01f5\5\0\2\u01f5\4\0\3\u01f5\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\u01f4\5\0\2\u01f6\4\0\3\u01f6\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u01f7\5\37\2\u01f7\1\37"+
    "\1\0\2\37\3\u01f7\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\u01f8\5\0\2\u01f9\4\0\3\u01f9"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u01f9"+
    "\5\0\2\u01f9\4\0\3\u01f9\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\u01f8\5\0\2\u01fa"+
    "\4\0\3\u01fa\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u01fb\5\37\2\u01fb\1\37\1\0\2\37\3\u01fb"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\u01fc\5\0\2\u01fd\4\0\3\u01fd\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u01fd\5\0\2\u01fd\4\0"+
    "\3\u01fd\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\u01fc\5\0\2\u01fe\4\0\3\u01fe\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u01ff\5\37"+
    "\2\u01ff\1\37\1\0\2\37\3\u01ff\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\u0200\5\0\2\u0201"+
    "\4\0\3\u0201\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0201\5\0\2\u0201\4\0\3\u0201\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\u0200"+
    "\5\0\2\u0202\4\0\3\u0202\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0203\5\37\2\u0203\1\37\1\0"+
    "\2\37\3\u0203\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\u0204\5\0\2\u0205\4\0\3\u0205\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0205\5\0"+
    "\2\u0205\4\0\3\u0205\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\u0204\5\0\2\u0206\4\0"+
    "\3\u0206\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u0207\5\37\2\u0207\1\37\1\0\2\37\3\u0207\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\u0208"+
    "\5\0\2\u0209\4\0\3\u0209\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u0209\5\0\2\u0209\4\0\3\u0209"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\u0208\5\0\2\u020a\4\0\3\u020a\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u020b\5\37\2\u020b"+
    "\1\37\1\0\2\37\3\u020b\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\u020c\5\0\2\u020d\4\0"+
    "\3\u020d\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u020d\5\0\2\u020d\4\0\3\u020d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\u020c\5\0"+
    "\2\u020e\4\0\3\u020e\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u020f\5\37\2\u020f\1\37\1\0\2\37"+
    "\3\u020f\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\u0210\5\0\2\u0211\4\0\3\u0211\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0211\5\0\2\u0211"+
    "\4\0\3\u0211\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\u0210\5\0\2\u0212\4\0\3\u0212"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0213"+
    "\5\37\2\u0213\1\37\1\0\2\37\3\u0213\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\u0214\5\0"+
    "\2\u0215\4\0\3\u0215\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0215\5\0\2\u0215\4\0\3\u0215\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\u0214\5\0\2\u0216\4\0\3\u0216\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u0217\5\37\2\u0217\1\37"+
    "\1\0\2\37\3\u0217\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\u0218\5\0\2\u0219\4\0\3\u0219"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u0219"+
    "\5\0\2\u0219\4\0\3\u0219\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\u0218\5\0\2\u021a"+
    "\4\0\3\u021a\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u021b\5\37\2\u021b\1\37\1\0\2\37\3\u021b"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\u021c\5\0\2\u021d\4\0\3\u021d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u021d\5\0\2\u021d\4\0"+
    "\3\u021d\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\u021c\5\0\2\u021e\4\0\3\u021e\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u021f\5\37"+
    "\2\u021f\1\37\1\0\2\37\3\u021f\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\u0220\5\0\2\u0221"+
    "\4\0\3\u0221\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0221\5\0\2\u0221\4\0\3\u0221\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\u0220"+
    "\5\0\2\u0222\4\0\3\u0222\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0223\5\37\2\u0223\1\37\1\0"+
    "\2\37\3\u0223\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\u0224\5\0\2\u0225\4\0\3\u0225\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0225\5\0"+
    "\2\u0225\4\0\3\u0225\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\u0224\5\0\2\u0226\4\0"+
    "\3\u0226\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u0227\5\37\2\u0227\1\37\1\0\2\37\3\u0227\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\u0228"+
    "\5\0\2\u0229\4\0\3\u0229\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u0229\5\0\2\u0229\4\0\3\u0229"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\u0228\5\0\2\u022a\4\0\3\u022a\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u022b\5\37\2\u022b"+
    "\1\37\1\0\2\37\3\u022b\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\u022c\5\0\2\u022d\4\0"+
    "\3\u022d\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u022d\5\0\2\u022d\4\0\3\u022d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\u022c\5\0"+
    "\2\u022e\4\0\3\u022e\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u022f\5\37\2\u022f\1\37\1\0\2\37"+
    "\3\u022f\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\u0230\5\0\2\u0231\4\0\3\u0231\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0231\5\0\2\u0231"+
    "\4\0\3\u0231\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\u0230\5\0\2\u0232\4\0\3\u0232"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0233"+
    "\5\37\2\u0233\1\37\1\0\2\37\3\u0233\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\u0234\5\0"+
    "\2\u0235\4\0\3\u0235\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0235\5\0\2\u0235\4\0\3\u0235\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\u0234\5\0\2\u0236\4\0\3\u0236\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u0237\5\37\2\u0237\1\37"+
    "\1\0\2\37\3\u0237\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\u0238\5\0\2\u0239\4\0\3\u0239"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u0239"+
    "\5\0\2\u0239\4\0\3\u0239\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\u0238\5\0\2\u023a"+
    "\4\0\3\u023a\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u023b\5\37\2\u023b\1\37\1\0\2\37\3\u023b"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\u023c\5\0\2\u023d\4\0\3\u023d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u023d\5\0\2\u023d\4\0"+
    "\3\u023d\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\u023c\5\0\2\u023e\4\0\3\u023e\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u023f\5\37"+
    "\2\u023f\1\37\1\0\2\37\3\u023f\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\u0240\5\0\2\u0241"+
    "\4\0\3\u0241\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0241\5\0\2\u0241\4\0\3\u0241\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\u0240"+
    "\5\0\2\u0242\4\0\3\u0242\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0243\5\37\2\u0243\1\37\1\0"+
    "\2\37\3\u0243\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\u0244\5\0\2\u0245\4\0\3\u0245\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0245\5\0"+
    "\2\u0245\4\0\3\u0245\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\u0244\5\0\2\u0246\4\0"+
    "\3\u0246\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u0247\5\37\2\u0247\1\37\1\0\2\37\3\u0247\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\u0248"+
    "\5\0\2\u0249\4\0\3\u0249\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u0249\5\0\2\u0249\4\0\3\u0249"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\u0248\5\0\2\u024a\4\0\3\u024a\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u024b\5\37\2\u024b"+
    "\1\37\1\0\2\37\3\u024b\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\u024c\5\0\2\u024d\4\0"+
    "\3\u024d\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u024d\5\0\2\u024d\4\0\3\u024d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\u024c\5\0"+
    "\2\u024e\4\0\3\u024e\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u024f\5\37\2\u024f\1\37\1\0\2\37"+
    "\3\u024f\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\u0250\5\0\2\u0251\4\0\3\u0251\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0251\5\0\2\u0251"+
    "\4\0\3\u0251\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\u0250\5\0\2\u0252\4\0\3\u0252"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0253"+
    "\5\37\2\u0253\1\37\1\0\2\37\3\u0253\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\u0254\5\0"+
    "\2\u0255\4\0\3\u0255\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0255\5\0\2\u0255\4\0\3\u0255\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\u0254\5\0\2\u0256\4\0\3\u0256\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u0257\5\37\2\u0257\1\37"+
    "\1\0\2\37\3\u0257\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\u0258\5\0\2\u0259\4\0\3\u0259"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u0259"+
    "\5\0\2\u0259\4\0\3\u0259\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\u0258\5\0\2\u025a"+
    "\4\0\3\u025a\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u025b\5\37\2\u025b\1\37\1\0\2\37\3\u025b"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\u025c\5\0\2\u025d\4\0\3\u025d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u025d\5\0\2\u025d\4\0"+
    "\3\u025d\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\115\1\0\1\u025c\5\0\2\u025e\4\0\3\u025e\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u025f\5\37"+
    "\2\u025f\1\37\1\0\2\37\3\u025f\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\156\1\0\1\u0260\5\0\2\u0261"+
    "\4\0\3\u0261\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0261\5\0\2\u0261\4\0\3\u0261\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\115\1\0\1\u0260"+
    "\5\0\2\u0262\4\0\3\u0262\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0263\5\37\2\u0263\1\37\1\0"+
    "\2\37\3\u0263\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\156\1\0\1\u0264\5\0\2\u0265\4\0\3\u0265\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0265\5\0"+
    "\2\u0265\4\0\3\u0265\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\115\1\0\1\u0264\5\0\2\u0266\4\0"+
    "\3\u0266\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u0267\5\37\2\u0267\1\37\1\0\2\37\3\u0267\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\156\1\0\1\u0268"+
    "\5\0\2\u0269\4\0\3\u0269\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u0269\5\0\2\u0269\4\0\3\u0269"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\115"+
    "\1\0\1\u0268\5\0\2\u026a\4\0\3\u026a\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u026b\5\37\2\u026b"+
    "\1\37\1\0\2\37\3\u026b\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\156\1\0\1\u026c\5\0\2\u026d\4\0"+
    "\3\u026d\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u026d\5\0\2\u026d\4\0\3\u026d\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\u026c\5\0"+
    "\2\u026e\4\0\3\u026e\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u026f\5\37\2\u026f\1\37\1\0\2\37"+
    "\3\u026f\4\37\5\0\1\72\1\0\2\72\7\0\1\156"+
    "\1\0\1\u0270\5\0\2\u0271\4\0\3\u0271\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0271\5\0\2\u0271"+
    "\4\0\3\u0271\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\115\1\0\1\u0270\5\0\2\u0272\4\0\3\u0272"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0273"+
    "\5\37\2\u0273\1\37\1\0\2\37\3\u0273\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\156\1\0\1\u0274\5\0"+
    "\2\u0275\4\0\3\u0275\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0275\5\0\2\u0275\4\0\3\u0275\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\115\1\0"+
    "\1\u0274\5\0\2\u0276\4\0\3\u0276\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u0277\5\37\2\u0277\1\37"+
    "\1\0\2\37\3\u0277\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\156\1\0\1\u0278\5\0\2\u0279\4\0\3\u0279"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u0279"+
    "\5\0\2\u0279\4\0\3\u0279\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\115\1\0\1\u0278\5\0\2\u027a"+
    "\4\0\3\u027a\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u027b\5\37\2\u027b\1\37\1\0\2\37\3\u027b"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\156\1\0"+
    "\1\u027c\5\0\2\72\4\0\3\72\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\115\1\0\1\u027c\5\0"+
    "\2\u027d\4\0\3\u027d\3\0\1\72";

  private static int [] zzUnpacktrans() {
    int [] result = new int[21386];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\2\11\6\1\1\11\2\1\1\11\6\1\1\11"+
    "\3\1\3\11\1\1\2\11\34\1\1\11\1\1\1\0"+
    "\1\1\1\0\3\11\1\1\2\0\3\1\4\11\1\0"+
    "\21\1\4\11\1\1\1\11\1\0\3\1\1\0\2\1"+
    "\3\0\7\1\1\11\20\1\1\0\10\1\1\0\4\1"+
    "\1\0\4\1\1\0\4\1\1\0\u01de\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[637];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CodeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { // Patrón: .D+eD* / D+.D+eD* / D+.D* . D+D*
    // Error en formato de notación científica o en formato de punto flotante
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 51: break;
          case 2:
            { // Cualquier otro carácter no reconocido
    return new Symbol(sym.error, yyline, yycolumn, yytext());
            }
          // fall through
          case 52: break;
          case 3:
            { /*No se procesa*/
            }
          // fall through
          case 53: break;
          case 4:
            { return new Symbol(sym.BALTASAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 54: break;
          case 5:
            { // Patrón: "C*
    // Error: Comentario inválido, comienza con comillas dobles y no termina
    return new Symbol(sym.error, yyline, yycolumn, yytext());
            }
          // fall through
          case 55: break;
          case 6:
            { return new Symbol(sym.GASPAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 56: break;
          case 7:
            { return new Symbol(sym.ABRECUENTO, yyline, yycolumn, yytext());
            }
          // fall through
          case 57: break;
          case 8:
            { return new Symbol(sym.CIERRECUENTO, yyline, yycolumn, yytext());
            }
          // fall through
          case 58: break;
          case 9:
            { return new Symbol(sym.COMET, yyline, yycolumn, yytext());
            }
          // fall through
          case 59: break;
          case 10:
            { return new Symbol(sym.RUDOLPH, yyline, yycolumn, yytext());
            }
          // fall through
          case 60: break;
          case 11:
            { return new Symbol(sym.COMA, yyline, yycolumn, yytext());
            }
          // fall through
          case 61: break;
          case 12:
            { return new Symbol(sym.DASHER, yyline, yycolumn, yytext());
            }
          // fall through
          case 62: break;
          case 13:
            { return new Symbol(sym.VIXEN, yyline, yycolumn, yytext());
            }
          // fall through
          case 63: break;
          case 14:
            { return new Symbol(sym.L_PAPA_NOEL, yyline, yycolumn, yytext());
            }
          // fall through
          case 64: break;
          case 15:
            { return new Symbol(sym.ZWARTE_PIET, yyline, yycolumn, yytext());
            }
          // fall through
          case 65: break;
          case 16:
            { return new Symbol(sym.PEPPER_MINSTIX, yyline, yycolumn, yytext());
            }
          // fall through
          case 66: break;
          case 17:
            { return new Symbol(sym.KRAMPUS, yyline, yycolumn, yytext());
            }
          // fall through
          case 67: break;
          case 18:
            { return new Symbol(sym.PERSONA, yyline, yycolumn, yytext());
            }
          // fall through
          case 68: break;
          case 19:
            { return new Symbol(sym.ABREEMPAQUE, yyline, yycolumn, yytext());
            }
          // fall through
          case 69: break;
          case 20:
            { return new Symbol(sym.CIERRAEMPAQUE, yyline, yycolumn, yytext());
            }
          // fall through
          case 70: break;
          case 21:
            { return new Symbol(sym.MELCHOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 71: break;
          case 22:
            { return new Symbol(sym.ABREREGALO, yyline, yycolumn, yytext());
            }
          // fall through
          case 72: break;
          case 23:
            { return new Symbol(sym.CIERRAREGALO, yyline, yycolumn, yytext());
            }
          // fall through
          case 73: break;
          case 24:
            { return new Symbol(sym.TOTIN, yyline, yycolumn, yytext());
            }
          // fall through
          case 74: break;
          case 25:
            { string.append( yytext() );
            }
          // fall through
          case 75: break;
          case 26:
            { yybegin(YYINITIAL);
                                       return symbol(sym.STRING_LITERAL,
                                       string.toString());
            }
          // fall through
          case 76: break;
          case 27:
            { string.append('\\');
            }
          // fall through
          case 77: break;
          case 28:
            { return new Symbol(sym.ERROR_IDENTIFICADOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 78: break;
          case 29:
            { return new Symbol(sym.L_SAN_NICOLAS, yyline, yycolumn, yytext());
            }
          // fall through
          case 79: break;
          case 30:
            { // Patrón: (*C*
    // Error: Comentario inválido, comienza con paréntesis y asterisco y no termina
    return new Symbol(sym.error, yyline, yycolumn, yytext());
            }
          // fall through
          case 80: break;
          case 31:
            { return new Symbol(sym.RENILLO, yyline, yycolumn, yytext());
            }
          // fall through
          case 81: break;
          case 32:
            { return new Symbol(sym.GRINCH, yyline, yycolumn, yytext());
            }
          // fall through
          case 82: break;
          case 33:
            { return new Symbol(sym.QUIEN, yyline, yycolumn, yytext());
            }
          // fall through
          case 83: break;
          case 34:
            { // Patrón: D+L*.
    // Error: Carácter no numérico después del punto en el flotante
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 84: break;
          case 35:
            { return new Symbol(sym.ENTREGA, yyline, yycolumn, yytext());
            }
          // fall through
          case 85: break;
          case 36:
            { return new Symbol(sym.BELSNICKEL, yyline, yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 37:
            { return new Symbol(sym.SNOWBALL_ALABASTRO, yyline, yycolumn, yytext());
            }
          // fall through
          case 87: break;
          case 38:
            { return new Symbol(sym.KNECHT_RUPRECHT, yyline, yycolumn, yytext());
            }
          // fall through
          case 88: break;
          case 39:
            { // Patrón: {C*
    // Error: Comentario inválido, comienza con llave y no termina
    return new Symbol(sym.error, yyline, yycolumn, yytext());
            }
          // fall through
          case 89: break;
          case 40:
            { string.append('\"');
            }
          // fall through
          case 90: break;
          case 41:
            { string.append('\n');
            }
          // fall through
          case 91: break;
          case 42:
            { string.append('\r');
            }
          // fall through
          case 92: break;
          case 43:
            { string.append('\t');
            }
          // fall through
          case 93: break;
          case 44:
            { // Patrón: 'C' ~'
    // Error: Literal de cadena inválido, comienza y termina con comillas simples
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 94: break;
          case 45:
            { // Patrón: D+,D+
    // Error: Uso de coma como separador decimal en lugar de punto
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 95: break;
          case 46:
            { return new Symbol(sym.L_COLACHO, yyline, yycolumn, yytext());
            }
          // fall through
          case 96: break;
          case 47:
            { // Patrón: D+.D+D* (Error en formato de flotante)
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 97: break;
          case 48:
            { // Patrón: D+.D+L+ / D+.L+D+
    // Error: Carácter no numérico después del punto en el flotante
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 98: break;
          case 49:
            { // Patrón: D+L+.D+ / L+D+.D+
    // Error: Carácter no numérico antes del punto en el flotante
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 99: break;
          case 50:
            { // Patrón: L+.D+L+ / L+.L+D+
    // Error: Carácter no numérico antes y después del punto en el flotante
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
