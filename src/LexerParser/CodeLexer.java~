// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/LexerParser/lexer.jflex

package LexerParser;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class CodeLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\22\0\1\1"+
    "\1\5\1\6\1\7\3\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\0"+
    "\1\24\1\25\1\26\1\10\1\27\4\30\1\31\1\32"+
    "\10\30\1\33\13\30\1\34\1\35\1\36\1\37\1\30"+
    "\1\0\4\30\1\40\10\30\1\41\3\30\1\42\1\30"+
    "\1\43\6\30\1\44\1\0\1\45\1\46\6\0\1\3"+
    "\33\0\1\10\37\0\1\47\7\0\1\47\3\0\1\47"+
    "\3\0\1\47\1\0\1\47\6\0\1\47\6\0\1\47"+
    "\7\0\1\47\3\0\1\47\3\0\1\47\1\0\1\47"+
    "\6\0\1\47\u012d\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\1\3\1\4\1\5\1\6\2\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\2\1\15\1\16"+
    "\1\2\1\17\1\20\1\21\1\3\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\3\1\4\1\32"+
    "\1\6\1\31\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\31\1\17\1\20\1\21\1\3\1\22"+
    "\1\23\1\33\1\24\1\25\1\26\1\27\1\30\1\34"+
    "\2\35\1\0\1\36\1\0\1\37\1\40\1\41\1\1"+
    "\2\0\1\42\1\16\1\34\1\43\1\0\1\44\1\45"+
    "\1\46\1\0\2\22\1\47\1\35\2\31\1\37\1\40"+
    "\1\41\2\31\1\16\1\43\1\31\1\44\1\45\1\46"+
    "\1\22\1\50\1\51\1\52\1\53\1\31\1\54\1\0"+
    "\1\1\1\55\1\56\1\0\2\42\4\0\3\22\1\31"+
    "\1\56\2\31\1\22\1\16\1\1\1\57\3\60\1\56"+
    "\1\61\1\0\2\62\3\22\1\16\1\31\1\56\1\31"+
    "\1\22\1\0\1\1\1\56\1\60\1\0\3\22\1\31"+
    "\1\22\1\1\2\0\3\22\1\31\1\22\1\0\1\63"+
    "\3\22\1\63\1\22\1\0\4\22\1\0\u01dc\22\2\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[649];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\120\0\170\0\240\0\310\0\170"+
    "\0\360\0\u0118\0\120\0\u0140\0\u0168\0\120\0\u0190\0\u01b8"+
    "\0\u01e0\0\u0208\0\u0230\0\u0258\0\120\0\u0280\0\u02a8\0\u02d0"+
    "\0\120\0\120\0\120\0\u02f8\0\120\0\120\0\u0320\0\u0320"+
    "\0\u0320\0\240\0\u0348\0\u0370\0\u0398\0\u0320\0\u03c0\0\u03e8"+
    "\0\u0320\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0\0\u0320\0\u04d8"+
    "\0\u0500\0\u0528\0\u0320\0\u0550\0\u0320\0\u0320\0\u0578\0\u0320"+
    "\0\u0320\0\170\0\120\0\310\0\u05a0\0\u05c8\0\u05f0\0\120"+
    "\0\120\0\120\0\u0618\0\u01e0\0\u0640\0\u0668\0\u0690\0\u06b8"+
    "\0\120\0\u06e0\0\120\0\120\0\120\0\u0708\0\u0730\0\u0758"+
    "\0\u02f8\0\u0348\0\u0780\0\u07a8\0\u0320\0\u0320\0\u0320\0\u0438"+
    "\0\u07d0\0\u07f8\0\u0320\0\u0820\0\u0320\0\u0320\0\u0320\0\u0848"+
    "\0\120\0\120\0\120\0\120\0\u0578\0\120\0\u0870\0\u0898"+
    "\0\u0640\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0"+
    "\0\u0938\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8"+
    "\0\u0af0\0\120\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0"+
    "\0\u0938\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0320"+
    "\0\u0cf8\0\u0aa0\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0d70\0\u0dc0"+
    "\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00"+
    "\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\120"+
    "\0\u1040\0\u1068\0\u1090\0\u0320\0\u10b8\0\u10e0\0\u1108\0\u1130"+
    "\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270"+
    "\0\u1298\0\u12c0\0\u12e8\0\u1310\0\u1338\0\u1360\0\u1388\0\u13b0"+
    "\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0"+
    "\0\u1518\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630"+
    "\0\u1658\0\u1680\0\u16a8\0\u16d0\0\u16f8\0\u1720\0\u1748\0\u1770"+
    "\0\u1798\0\u17c0\0\u17e8\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0"+
    "\0\u18d8\0\u1900\0\u1928\0\u1950\0\u1978\0\u19a0\0\u19c8\0\u19f0"+
    "\0\u1a18\0\u1a40\0\u1a68\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08\0\u1b30"+
    "\0\u1b58\0\u1b80\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20\0\u1c48\0\u1c70"+
    "\0\u1c98\0\u1cc0\0\u1ce8\0\u1d10\0\u1d38\0\u1d60\0\u1d88\0\u1db0"+
    "\0\u1dd8\0\u1e00\0\u1e28\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0"+
    "\0\u1f18\0\u1f40\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0\0\u2008\0\u2030"+
    "\0\u2058\0\u2080\0\u20a8\0\u20d0\0\u20f8\0\u2120\0\u2148\0\u2170"+
    "\0\u2198\0\u21c0\0\u21e8\0\u2210\0\u2238\0\u2260\0\u2288\0\u22b0"+
    "\0\u22d8\0\u2300\0\u2328\0\u2350\0\u2378\0\u23a0\0\u23c8\0\u23f0"+
    "\0\u2418\0\u2440\0\u2468\0\u2490\0\u24b8\0\u24e0\0\u2508\0\u2530"+
    "\0\u2558\0\u2580\0\u25a8\0\u25d0\0\u25f8\0\u2620\0\u2648\0\u2670"+
    "\0\u2698\0\u26c0\0\u26e8\0\u2710\0\u2738\0\u2760\0\u2788\0\u27b0"+
    "\0\u27d8\0\u2800\0\u2828\0\u2850\0\u2878\0\u28a0\0\u28c8\0\u28f0"+
    "\0\u2918\0\u2940\0\u2968\0\u2990\0\u29b8\0\u29e0\0\u2a08\0\u2a30"+
    "\0\u2a58\0\u2a80\0\u2aa8\0\u2ad0\0\u2af8\0\u2b20\0\u2b48\0\u2b70"+
    "\0\u2b98\0\u2bc0\0\u2be8\0\u2c10\0\u2c38\0\u2c60\0\u2c88\0\u2cb0"+
    "\0\u2cd8\0\u2d00\0\u2d28\0\u2d50\0\u2d78\0\u2da0\0\u2dc8\0\u2df0"+
    "\0\u2e18\0\u2e40\0\u2e68\0\u2e90\0\u2eb8\0\u2ee0\0\u2f08\0\u2f30"+
    "\0\u2f58\0\u2f80\0\u2fa8\0\u2fd0\0\u2ff8\0\u3020\0\u3048\0\u3070"+
    "\0\u3098\0\u30c0\0\u30e8\0\u3110\0\u3138\0\u3160\0\u3188\0\u31b0"+
    "\0\u31d8\0\u3200\0\u3228\0\u3250\0\u3278\0\u32a0\0\u32c8\0\u32f0"+
    "\0\u3318\0\u3340\0\u3368\0\u3390\0\u33b8\0\u33e0\0\u3408\0\u3430"+
    "\0\u3458\0\u3480\0\u34a8\0\u34d0\0\u34f8\0\u3520\0\u3548\0\u3570"+
    "\0\u3598\0\u35c0\0\u35e8\0\u3610\0\u3638\0\u3660\0\u3688\0\u36b0"+
    "\0\u36d8\0\u3700\0\u3728\0\u3750\0\u3778\0\u37a0\0\u37c8\0\u37f0"+
    "\0\u3818\0\u3840\0\u3868\0\u3890\0\u38b8\0\u38e0\0\u3908\0\u3930"+
    "\0\u3958\0\u3980\0\u39a8\0\u39d0\0\u39f8\0\u3a20\0\u3a48\0\u3a70"+
    "\0\u3a98\0\u3ac0\0\u3ae8\0\u3b10\0\u3b38\0\u3b60\0\u3b88\0\u3bb0"+
    "\0\u3bd8\0\u3c00\0\u3c28\0\u3c50\0\u3c78\0\u3ca0\0\u3cc8\0\u3cf0"+
    "\0\u3d18\0\u3d40\0\u3d68\0\u3d90\0\u3db8\0\u3de0\0\u3e08\0\u3e30"+
    "\0\u3e58\0\u3e80\0\u3ea8\0\u3ed0\0\u3ef8\0\u3f20\0\u3f48\0\u3f70"+
    "\0\u3f98\0\u3fc0\0\u3fe8\0\u4010\0\u4038\0\u4060\0\u4088\0\u40b0"+
    "\0\u40d8\0\u4100\0\u4128\0\u4150\0\u4178\0\u41a0\0\u41c8\0\u41f0"+
    "\0\u4218\0\u4240\0\u4268\0\u4290\0\u42b8\0\u42e0\0\u4308\0\u4330"+
    "\0\u4358\0\u4380\0\u43a8\0\u43d0\0\u43f8\0\u4420\0\u4448\0\u4470"+
    "\0\u4498\0\u44c0\0\u44e8\0\u4510\0\u4538\0\u4560\0\u4588\0\u45b0"+
    "\0\u45d8\0\u4600\0\u4628\0\u4650\0\u4678\0\u46a0\0\u46c8\0\u46f0"+
    "\0\u4718\0\u4740\0\u4768\0\u4790\0\u47b8\0\u47e0\0\u4808\0\u4830"+
    "\0\u4858\0\u4880\0\u48a8\0\u48d0\0\u48f8\0\u4920\0\u4948\0\u4970"+
    "\0\u4998\0\u49c0\0\u49e8\0\u4a10\0\u4a38\0\u4a60\0\u4a88\0\u4ab0"+
    "\0\u4ad8\0\u4b00\0\u4b28\0\u4b50\0\u4b78\0\u4ba0\0\u4bc8\0\u4bf0"+
    "\0\u4c18\0\u4c40\0\u4c68\0\u4c90\0\u4cb8\0\u4ce0\0\u4d08\0\u4d30"+
    "\0\u4d58\0\u4d80\0\u4da8\0\u4dd0\0\u4df8\0\u4e20\0\u4e48\0\u4e70"+
    "\0\u4e98\0\u4ec0\0\u4ee8\0\u4f10\0\u4f38\0\u4f60\0\u4f88\0\u4fb0"+
    "\0\u4fd8\0\u5000\0\u5028\0\u5050\0\u5078\0\u50a0\0\u50c8\0\u50f0"+
    "\0\u5118\0\u5140\0\u5168\0\u5190\0\u51b8\0\u51e0\0\u5208\0\u5230"+
    "\0\u5258\0\u5280\0\u52a8\0\u52d0\0\u52f8\0\u5320\0\u5348\0\u5370"+
    "\0\u5398\0\u53c0\0\u53e8\0\u5410\0\u5438\0\u5460\0\u5488\0\u54b0"+
    "\0\u54d8\0\u5500\0\u5528\0\u5550\0\u5578\0\u55a0\0\u55c8\0\u55f0"+
    "\0\u5618\0\u5640\0\u5668\0\u5690\0\u56b8\0\u56e0\0\u5708\0\u5730"+
    "\0\u5758\0\u5780\0\u57a8\0\u57d0\0\u57f8\0\u5820\0\u5848\0\u5870"+
    "\0\u5898\0\u58c0\0\u58e8\0\u5910\0\u5938\0\u5960\0\u5988\0\u59b0"+
    "\0\u59d8\0\u5a00\0\u5a28\0\u5a50\0\u5a78\0\u5aa0\0\u5ac8\0\u5af0"+
    "\0\u5b18\0\u5b40\0\u5b68\0\u5b90\0\170\0\u5bb8\0\u0320\0\u5b90"+
    "\0\u5bb8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[649];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\4\30"+
    "\1\31\1\3\1\32\1\33\4\30\1\34\1\35\1\36"+
    "\1\10\1\37\1\40\1\4\1\37\1\40\1\41\1\42"+
    "\1\43\1\37\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\37\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\4\62\1\63\1\64\1\65\1\66\4\62\1\67"+
    "\1\70\1\71\1\37\55\0\1\72\1\0\2\72\11\0"+
    "\1\72\5\0\4\72\4\0\4\72\3\0\1\72\6\6"+
    "\1\73\41\6\5\0\1\72\1\0\2\72\11\0\1\74"+
    "\5\0\4\72\4\0\4\72\3\0\1\72\11\75\1\0"+
    "\36\75\14\0\1\76\2\0\1\77\44\0\1\100\50\0"+
    "\1\101\51\0\1\102\52\0\1\103\25\0\21\104\1\4"+
    "\26\104\16\0\1\105\1\0\1\106\1\0\1\107\5\0"+
    "\4\110\4\0\4\110\3\0\1\72\25\0\1\111\46\0"+
    "\1\112\1\113\1\114\46\0\1\115\22\0\2\27\3\0"+
    "\43\27\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\117\5\0\4\120\4\0\4\120\3\0\1\72\45\121"+
    "\1\0\2\121\2\37\1\0\3\37\1\0\26\37\1\0"+
    "\14\37\1\0\3\37\1\0\13\37\1\122\12\37\1\0"+
    "\12\37\2\44\1\75\3\44\1\75\2\44\1\37\23\44"+
    "\1\75\12\44\2\37\1\0\3\37\1\0\5\37\1\123"+
    "\2\37\1\124\15\37\1\0\14\37\1\0\3\37\1\0"+
    "\5\37\1\125\20\37\1\0\14\37\1\0\3\37\1\0"+
    "\6\37\1\126\17\37\1\0\14\37\1\0\3\37\1\0"+
    "\10\37\1\127\15\37\1\0\12\37\2\130\1\104\3\130"+
    "\1\104\12\130\1\40\13\130\1\104\12\130\2\37\1\0"+
    "\3\37\1\0\11\37\1\131\1\37\1\132\12\37\1\0"+
    "\14\37\1\0\3\37\1\0\16\37\1\133\7\37\1\0"+
    "\14\37\1\0\3\37\1\0\15\37\1\134\1\135\1\136"+
    "\6\37\1\0\14\37\1\0\3\37\1\0\16\37\1\137"+
    "\7\37\1\0\12\37\2\61\1\0\2\37\1\61\1\27"+
    "\26\61\1\27\12\61\2\37\1\0\3\37\1\0\13\37"+
    "\1\140\5\37\4\140\1\37\1\0\2\37\4\140\4\37"+
    "\6\0\1\141\32\0\1\142\1\143\1\144\4\0\2\145"+
    "\1\121\3\145\1\121\26\145\1\121\7\145\1\37\2\145"+
    "\11\75\1\146\36\75\13\76\2\0\33\76\22\0\1\147"+
    "\47\0\1\103\6\0\1\150\6\0\1\150\31\0\1\151"+
    "\47\0\1\152\5\0\4\153\4\0\4\153\22\0\1\105"+
    "\1\0\1\154\1\0\1\107\5\0\4\110\4\0\4\110"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\155"+
    "\1\0\1\72\5\0\4\110\4\0\4\110\3\0\1\72"+
    "\31\0\1\156\40\0\1\157\5\0\4\160\4\0\4\160"+
    "\11\0\1\72\1\0\2\72\7\0\1\161\1\0\1\162"+
    "\5\0\4\163\4\0\4\163\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\162\5\0\4\164"+
    "\4\0\4\164\3\0\1\72\2\123\1\76\3\123\1\76"+
    "\4\123\2\37\20\123\1\76\12\123\2\37\1\0\3\37"+
    "\1\0\13\37\1\165\12\37\1\0\14\37\1\0\3\37"+
    "\1\0\13\37\1\166\12\37\1\0\14\37\1\0\3\37"+
    "\1\0\11\37\1\167\1\37\1\132\12\37\1\0\14\37"+
    "\1\0\3\37\1\0\22\37\1\170\3\37\1\0\14\37"+
    "\1\0\3\37\1\0\13\37\1\171\5\37\4\171\1\37"+
    "\1\0\2\37\4\171\4\37\13\0\1\172\6\0\1\147"+
    "\44\0\1\173\2\0\1\173\45\0\1\174\1\0\1\152"+
    "\5\0\1\175\1\176\2\175\4\0\1\176\3\175\26\0"+
    "\1\177\5\0\4\153\4\0\4\153\26\0\1\200\5\0"+
    "\4\153\4\0\4\153\26\0\1\201\60\0\1\202\36\0"+
    "\1\157\5\0\4\203\4\0\4\203\26\0\1\204\5\0"+
    "\4\160\4\0\4\160\11\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\205\5\0\4\206\4\0\4\206\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\206\5\0"+
    "\4\206\4\0\4\206\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\205\5\0\4\207\4\0"+
    "\4\207\3\0\1\72\2\37\1\0\3\37\1\0\4\37"+
    "\1\210\6\37\1\165\12\37\1\0\14\37\1\0\3\37"+
    "\1\0\13\37\1\166\6\37\1\211\3\37\1\0\2\37"+
    "\1\211\11\37\1\0\3\37\1\0\13\37\1\212\12\37"+
    "\1\0\14\37\1\0\3\37\1\0\24\37\1\213\1\37"+
    "\1\0\14\37\1\0\3\37\1\0\13\37\1\214\5\37"+
    "\4\214\1\37\1\0\2\37\4\214\4\37\22\0\1\173"+
    "\45\0\1\174\1\0\1\174\55\0\4\175\4\0\4\175"+
    "\23\0\1\215\1\216\1\0\1\217\5\0\4\175\4\0"+
    "\4\175\26\0\1\177\45\0\1\174\1\0\1\200\5\0"+
    "\1\175\1\220\2\175\4\0\1\220\3\175\36\0\1\221"+
    "\45\0\4\203\4\0\4\203\26\0\1\204\32\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\222\5\0\4\223"+
    "\4\0\4\223\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\223\5\0\4\223\4\0\4\223\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\222"+
    "\5\0\4\224\4\0\4\224\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\10\37\1\167\2\37\1\212\12\37\1\0"+
    "\14\37\1\0\3\37\1\0\23\37\1\225\2\37\1\0"+
    "\14\37\1\0\3\37\1\0\13\37\1\226\5\37\4\226"+
    "\1\37\1\0\2\37\4\226\4\37\20\0\1\216\1\0"+
    "\1\217\47\0\1\227\44\0\1\230\1\216\1\0\1\230"+
    "\5\0\4\175\4\0\4\175\32\0\1\231\26\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\232\5\0\4\233"+
    "\4\0\4\233\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\233\5\0\4\233\4\0\4\233\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\232"+
    "\5\0\4\234\4\0\4\234\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\17\37\1\235\6\37\1\0\14\37\1\0"+
    "\3\37\1\0\13\37\1\236\5\37\4\236\1\37\1\0"+
    "\2\37\4\236\4\37\20\0\1\237\1\0\1\227\45\0"+
    "\1\216\1\0\1\230\53\0\1\240\26\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\241\5\0\4\242\4\0"+
    "\4\242\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\242\5\0\4\242\4\0\4\242\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\241\5\0"+
    "\4\243\4\0\4\243\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\17\37\1\244\6\37\1\0\14\37\1\0\3\37"+
    "\1\0\13\37\1\245\5\37\4\245\1\37\1\0\2\37"+
    "\4\245\4\37\22\0\1\246\32\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\247\5\0\4\250\4\0\4\250"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\250"+
    "\5\0\4\250\4\0\4\250\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\247\5\0\4\251"+
    "\4\0\4\251\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\252\5\37\4\252\1\37\1\0\2\37\4\252"+
    "\4\37\22\0\1\246\6\0\1\253\6\0\1\253\14\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\254\5\0"+
    "\4\255\4\0\4\255\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\255\5\0\4\255\4\0\4\255\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\254\5\0\4\256\4\0\4\256\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\257\5\37\4\257\1\37"+
    "\1\0\2\37\4\257\4\37\17\0\1\230\1\216\1\0"+
    "\1\230\32\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\260\5\0\4\261\4\0\4\261\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\261\5\0\4\261\4\0"+
    "\4\261\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\260\5\0\4\262\4\0\4\262\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\263\5\37"+
    "\4\263\1\37\1\0\2\37\4\263\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\264\5\0\4\265"+
    "\4\0\4\265\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\265\5\0\4\265\4\0\4\265\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\264"+
    "\5\0\4\266\4\0\4\266\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\267\5\37\4\267\1\37\1\0"+
    "\2\37\4\267\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\270\5\0\4\271\4\0\4\271\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\271\5\0"+
    "\4\271\4\0\4\271\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\270\5\0\4\272\4\0"+
    "\4\272\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\273\5\37\4\273\1\37\1\0\2\37\4\273\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\274"+
    "\5\0\4\275\4\0\4\275\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\275\5\0\4\275\4\0\4\275"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\274\5\0\4\276\4\0\4\276\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\277\5\37\4\277"+
    "\1\37\1\0\2\37\4\277\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\300\5\0\4\301\4\0"+
    "\4\301\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\301\5\0\4\301\4\0\4\301\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\300\5\0"+
    "\4\302\4\0\4\302\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\303\5\37\4\303\1\37\1\0\2\37"+
    "\4\303\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\304\5\0\4\305\4\0\4\305\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\305\5\0\4\305"+
    "\4\0\4\305\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\304\5\0\4\306\4\0\4\306"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\307"+
    "\5\37\4\307\1\37\1\0\2\37\4\307\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\310\5\0"+
    "\4\311\4\0\4\311\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\311\5\0\4\311\4\0\4\311\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\310\5\0\4\312\4\0\4\312\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\313\5\37\4\313\1\37"+
    "\1\0\2\37\4\313\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\314\5\0\4\315\4\0\4\315"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\315"+
    "\5\0\4\315\4\0\4\315\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\314\5\0\4\316"+
    "\4\0\4\316\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\317\5\37\4\317\1\37\1\0\2\37\4\317"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\320\5\0\4\321\4\0\4\321\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\321\5\0\4\321\4\0"+
    "\4\321\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\320\5\0\4\322\4\0\4\322\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\323\5\37"+
    "\4\323\1\37\1\0\2\37\4\323\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\324\5\0\4\325"+
    "\4\0\4\325\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\325\5\0\4\325\4\0\4\325\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\324"+
    "\5\0\4\326\4\0\4\326\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\327\5\37\4\327\1\37\1\0"+
    "\2\37\4\327\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\330\5\0\4\331\4\0\4\331\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\331\5\0"+
    "\4\331\4\0\4\331\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\330\5\0\4\332\4\0"+
    "\4\332\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\333\5\37\4\333\1\37\1\0\2\37\4\333\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\334"+
    "\5\0\4\335\4\0\4\335\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\335\5\0\4\335\4\0\4\335"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\334\5\0\4\336\4\0\4\336\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\337\5\37\4\337"+
    "\1\37\1\0\2\37\4\337\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\340\5\0\4\341\4\0"+
    "\4\341\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\341\5\0\4\341\4\0\4\341\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\340\5\0"+
    "\4\342\4\0\4\342\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\343\5\37\4\343\1\37\1\0\2\37"+
    "\4\343\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\344\5\0\4\345\4\0\4\345\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\345\5\0\4\345"+
    "\4\0\4\345\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\344\5\0\4\346\4\0\4\346"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\347"+
    "\5\37\4\347\1\37\1\0\2\37\4\347\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\350\5\0"+
    "\4\351\4\0\4\351\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\351\5\0\4\351\4\0\4\351\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\350\5\0\4\352\4\0\4\352\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\353\5\37\4\353\1\37"+
    "\1\0\2\37\4\353\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\354\5\0\4\355\4\0\4\355"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\355"+
    "\5\0\4\355\4\0\4\355\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\354\5\0\4\356"+
    "\4\0\4\356\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\357\5\37\4\357\1\37\1\0\2\37\4\357"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\360\5\0\4\361\4\0\4\361\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\361\5\0\4\361\4\0"+
    "\4\361\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\360\5\0\4\362\4\0\4\362\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\363\5\37"+
    "\4\363\1\37\1\0\2\37\4\363\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\364\5\0\4\365"+
    "\4\0\4\365\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\365\5\0\4\365\4\0\4\365\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\364"+
    "\5\0\4\366\4\0\4\366\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\367\5\37\4\367\1\37\1\0"+
    "\2\37\4\367\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\370\5\0\4\371\4\0\4\371\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\371\5\0"+
    "\4\371\4\0\4\371\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\370\5\0\4\372\4\0"+
    "\4\372\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\373\5\37\4\373\1\37\1\0\2\37\4\373\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\374"+
    "\5\0\4\375\4\0\4\375\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\375\5\0\4\375\4\0\4\375"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\374\5\0\4\376\4\0\4\376\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\377\5\37\4\377"+
    "\1\37\1\0\2\37\4\377\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\u0100\5\0\4\u0101\4\0"+
    "\4\u0101\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u0101\5\0\4\u0101\4\0\4\u0101\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\u0100\5\0"+
    "\4\u0102\4\0\4\u0102\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u0103\5\37\4\u0103\1\37\1\0\2\37"+
    "\4\u0103\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\u0104\5\0\4\u0105\4\0\4\u0105\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0105\5\0\4\u0105"+
    "\4\0\4\u0105\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\u0104\5\0\4\u0106\4\0\4\u0106"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0107"+
    "\5\37\4\u0107\1\37\1\0\2\37\4\u0107\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\u0108\5\0"+
    "\4\u0109\4\0\4\u0109\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0109\5\0\4\u0109\4\0\4\u0109\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\u0108\5\0\4\u010a\4\0\4\u010a\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u010b\5\37\4\u010b\1\37"+
    "\1\0\2\37\4\u010b\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\u010c\5\0\4\u010d\4\0\4\u010d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u010d"+
    "\5\0\4\u010d\4\0\4\u010d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\u010c\5\0\4\u010e"+
    "\4\0\4\u010e\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u010f\5\37\4\u010f\1\37\1\0\2\37\4\u010f"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\u0110\5\0\4\u0111\4\0\4\u0111\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u0111\5\0\4\u0111\4\0"+
    "\4\u0111\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\u0110\5\0\4\u0112\4\0\4\u0112\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u0113\5\37"+
    "\4\u0113\1\37\1\0\2\37\4\u0113\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\u0114\5\0\4\u0115"+
    "\4\0\4\u0115\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0115\5\0\4\u0115\4\0\4\u0115\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\u0114"+
    "\5\0\4\u0116\4\0\4\u0116\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0117\5\37\4\u0117\1\37\1\0"+
    "\2\37\4\u0117\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\u0118\5\0\4\u0119\4\0\4\u0119\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0119\5\0"+
    "\4\u0119\4\0\4\u0119\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\u0118\5\0\4\u011a\4\0"+
    "\4\u011a\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u011b\5\37\4\u011b\1\37\1\0\2\37\4\u011b\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\u011c"+
    "\5\0\4\u011d\4\0\4\u011d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u011d\5\0\4\u011d\4\0\4\u011d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\u011c\5\0\4\u011e\4\0\4\u011e\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u011f\5\37\4\u011f"+
    "\1\37\1\0\2\37\4\u011f\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\u0120\5\0\4\u0121\4\0"+
    "\4\u0121\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u0121\5\0\4\u0121\4\0\4\u0121\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\u0120\5\0"+
    "\4\u0122\4\0\4\u0122\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u0123\5\37\4\u0123\1\37\1\0\2\37"+
    "\4\u0123\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\u0124\5\0\4\u0125\4\0\4\u0125\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0125\5\0\4\u0125"+
    "\4\0\4\u0125\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\u0124\5\0\4\u0126\4\0\4\u0126"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0127"+
    "\5\37\4\u0127\1\37\1\0\2\37\4\u0127\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\u0128\5\0"+
    "\4\u0129\4\0\4\u0129\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0129\5\0\4\u0129\4\0\4\u0129\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\u0128\5\0\4\u012a\4\0\4\u012a\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u012b\5\37\4\u012b\1\37"+
    "\1\0\2\37\4\u012b\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\u012c\5\0\4\u012d\4\0\4\u012d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u012d"+
    "\5\0\4\u012d\4\0\4\u012d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\u012c\5\0\4\u012e"+
    "\4\0\4\u012e\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u012f\5\37\4\u012f\1\37\1\0\2\37\4\u012f"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\u0130\5\0\4\u0131\4\0\4\u0131\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u0131\5\0\4\u0131\4\0"+
    "\4\u0131\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\u0130\5\0\4\u0132\4\0\4\u0132\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u0133\5\37"+
    "\4\u0133\1\37\1\0\2\37\4\u0133\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\u0134\5\0\4\u0135"+
    "\4\0\4\u0135\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0135\5\0\4\u0135\4\0\4\u0135\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\u0134"+
    "\5\0\4\u0136\4\0\4\u0136\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0137\5\37\4\u0137\1\37\1\0"+
    "\2\37\4\u0137\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\u0138\5\0\4\u0139\4\0\4\u0139\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0139\5\0"+
    "\4\u0139\4\0\4\u0139\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\u0138\5\0\4\u013a\4\0"+
    "\4\u013a\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u013b\5\37\4\u013b\1\37\1\0\2\37\4\u013b\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\u013c"+
    "\5\0\4\u013d\4\0\4\u013d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u013d\5\0\4\u013d\4\0\4\u013d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\u013c\5\0\4\u013e\4\0\4\u013e\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u013f\5\37\4\u013f"+
    "\1\37\1\0\2\37\4\u013f\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\u0140\5\0\4\u0141\4\0"+
    "\4\u0141\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u0141\5\0\4\u0141\4\0\4\u0141\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\u0140\5\0"+
    "\4\u0142\4\0\4\u0142\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u0143\5\37\4\u0143\1\37\1\0\2\37"+
    "\4\u0143\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\u0144\5\0\4\u0145\4\0\4\u0145\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0145\5\0\4\u0145"+
    "\4\0\4\u0145\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\u0144\5\0\4\u0146\4\0\4\u0146"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0147"+
    "\5\37\4\u0147\1\37\1\0\2\37\4\u0147\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\u0148\5\0"+
    "\4\u0149\4\0\4\u0149\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0149\5\0\4\u0149\4\0\4\u0149\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\u0148\5\0\4\u014a\4\0\4\u014a\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u014b\5\37\4\u014b\1\37"+
    "\1\0\2\37\4\u014b\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\u014c\5\0\4\u014d\4\0\4\u014d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u014d"+
    "\5\0\4\u014d\4\0\4\u014d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\u014c\5\0\4\u014e"+
    "\4\0\4\u014e\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u014f\5\37\4\u014f\1\37\1\0\2\37\4\u014f"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\u0150\5\0\4\u0151\4\0\4\u0151\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u0151\5\0\4\u0151\4\0"+
    "\4\u0151\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\u0150\5\0\4\u0152\4\0\4\u0152\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u0153\5\37"+
    "\4\u0153\1\37\1\0\2\37\4\u0153\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\u0154\5\0\4\u0155"+
    "\4\0\4\u0155\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0155\5\0\4\u0155\4\0\4\u0155\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\u0154"+
    "\5\0\4\u0156\4\0\4\u0156\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0157\5\37\4\u0157\1\37\1\0"+
    "\2\37\4\u0157\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\u0158\5\0\4\u0159\4\0\4\u0159\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0159\5\0"+
    "\4\u0159\4\0\4\u0159\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\u0158\5\0\4\u015a\4\0"+
    "\4\u015a\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u015b\5\37\4\u015b\1\37\1\0\2\37\4\u015b\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\u015c"+
    "\5\0\4\u015d\4\0\4\u015d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u015d\5\0\4\u015d\4\0\4\u015d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\u015c\5\0\4\u015e\4\0\4\u015e\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u015f\5\37\4\u015f"+
    "\1\37\1\0\2\37\4\u015f\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\u0160\5\0\4\u0161\4\0"+
    "\4\u0161\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u0161\5\0\4\u0161\4\0\4\u0161\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\u0160\5\0"+
    "\4\u0162\4\0\4\u0162\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u0163\5\37\4\u0163\1\37\1\0\2\37"+
    "\4\u0163\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\u0164\5\0\4\u0165\4\0\4\u0165\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0165\5\0\4\u0165"+
    "\4\0\4\u0165\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\u0164\5\0\4\u0166\4\0\4\u0166"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0167"+
    "\5\37\4\u0167\1\37\1\0\2\37\4\u0167\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\u0168\5\0"+
    "\4\u0169\4\0\4\u0169\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0169\5\0\4\u0169\4\0\4\u0169\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\u0168\5\0\4\u016a\4\0\4\u016a\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u016b\5\37\4\u016b\1\37"+
    "\1\0\2\37\4\u016b\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\u016c\5\0\4\u016d\4\0\4\u016d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u016d"+
    "\5\0\4\u016d\4\0\4\u016d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\u016c\5\0\4\u016e"+
    "\4\0\4\u016e\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u016f\5\37\4\u016f\1\37\1\0\2\37\4\u016f"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\u0170\5\0\4\u0171\4\0\4\u0171\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u0171\5\0\4\u0171\4\0"+
    "\4\u0171\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\u0170\5\0\4\u0172\4\0\4\u0172\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u0173\5\37"+
    "\4\u0173\1\37\1\0\2\37\4\u0173\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\u0174\5\0\4\u0175"+
    "\4\0\4\u0175\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0175\5\0\4\u0175\4\0\4\u0175\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\u0174"+
    "\5\0\4\u0176\4\0\4\u0176\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0177\5\37\4\u0177\1\37\1\0"+
    "\2\37\4\u0177\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\u0178\5\0\4\u0179\4\0\4\u0179\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0179\5\0"+
    "\4\u0179\4\0\4\u0179\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\u0178\5\0\4\u017a\4\0"+
    "\4\u017a\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u017b\5\37\4\u017b\1\37\1\0\2\37\4\u017b\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\u017c"+
    "\5\0\4\u017d\4\0\4\u017d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u017d\5\0\4\u017d\4\0\4\u017d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\u017c\5\0\4\u017e\4\0\4\u017e\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u017f\5\37\4\u017f"+
    "\1\37\1\0\2\37\4\u017f\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\u0180\5\0\4\u0181\4\0"+
    "\4\u0181\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u0181\5\0\4\u0181\4\0\4\u0181\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\u0180\5\0"+
    "\4\u0182\4\0\4\u0182\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u0183\5\37\4\u0183\1\37\1\0\2\37"+
    "\4\u0183\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\u0184\5\0\4\u0185\4\0\4\u0185\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0185\5\0\4\u0185"+
    "\4\0\4\u0185\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\u0184\5\0\4\u0186\4\0\4\u0186"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0187"+
    "\5\37\4\u0187\1\37\1\0\2\37\4\u0187\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\u0188\5\0"+
    "\4\u0189\4\0\4\u0189\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0189\5\0\4\u0189\4\0\4\u0189\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\u0188\5\0\4\u018a\4\0\4\u018a\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u018b\5\37\4\u018b\1\37"+
    "\1\0\2\37\4\u018b\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\u018c\5\0\4\u018d\4\0\4\u018d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u018d"+
    "\5\0\4\u018d\4\0\4\u018d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\u018c\5\0\4\u018e"+
    "\4\0\4\u018e\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u018f\5\37\4\u018f\1\37\1\0\2\37\4\u018f"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\u0190\5\0\4\u0191\4\0\4\u0191\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u0191\5\0\4\u0191\4\0"+
    "\4\u0191\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\u0190\5\0\4\u0192\4\0\4\u0192\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u0193\5\37"+
    "\4\u0193\1\37\1\0\2\37\4\u0193\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\u0194\5\0\4\u0195"+
    "\4\0\4\u0195\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0195\5\0\4\u0195\4\0\4\u0195\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\u0194"+
    "\5\0\4\u0196\4\0\4\u0196\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0197\5\37\4\u0197\1\37\1\0"+
    "\2\37\4\u0197\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\u0198\5\0\4\u0199\4\0\4\u0199\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0199\5\0"+
    "\4\u0199\4\0\4\u0199\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\u0198\5\0\4\u019a\4\0"+
    "\4\u019a\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u019b\5\37\4\u019b\1\37\1\0\2\37\4\u019b\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\u019c"+
    "\5\0\4\u019d\4\0\4\u019d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u019d\5\0\4\u019d\4\0\4\u019d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\u019c\5\0\4\u019e\4\0\4\u019e\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u019f\5\37\4\u019f"+
    "\1\37\1\0\2\37\4\u019f\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\u01a0\5\0\4\u01a1\4\0"+
    "\4\u01a1\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u01a1\5\0\4\u01a1\4\0\4\u01a1\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\u01a0\5\0"+
    "\4\u01a2\4\0\4\u01a2\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u01a3\5\37\4\u01a3\1\37\1\0\2\37"+
    "\4\u01a3\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\u01a4\5\0\4\u01a5\4\0\4\u01a5\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u01a5\5\0\4\u01a5"+
    "\4\0\4\u01a5\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\u01a4\5\0\4\u01a6\4\0\4\u01a6"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u01a7"+
    "\5\37\4\u01a7\1\37\1\0\2\37\4\u01a7\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\u01a8\5\0"+
    "\4\u01a9\4\0\4\u01a9\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u01a9\5\0\4\u01a9\4\0\4\u01a9\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\u01a8\5\0\4\u01aa\4\0\4\u01aa\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u01ab\5\37\4\u01ab\1\37"+
    "\1\0\2\37\4\u01ab\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\u01ac\5\0\4\u01ad\4\0\4\u01ad"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u01ad"+
    "\5\0\4\u01ad\4\0\4\u01ad\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\u01ac\5\0\4\u01ae"+
    "\4\0\4\u01ae\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u01af\5\37\4\u01af\1\37\1\0\2\37\4\u01af"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\u01b0\5\0\4\u01b1\4\0\4\u01b1\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u01b1\5\0\4\u01b1\4\0"+
    "\4\u01b1\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\u01b0\5\0\4\u01b2\4\0\4\u01b2\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u01b3\5\37"+
    "\4\u01b3\1\37\1\0\2\37\4\u01b3\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\u01b4\5\0\4\u01b5"+
    "\4\0\4\u01b5\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u01b5\5\0\4\u01b5\4\0\4\u01b5\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\u01b4"+
    "\5\0\4\u01b6\4\0\4\u01b6\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u01b7\5\37\4\u01b7\1\37\1\0"+
    "\2\37\4\u01b7\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\u01b8\5\0\4\u01b9\4\0\4\u01b9\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u01b9\5\0"+
    "\4\u01b9\4\0\4\u01b9\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\u01b8\5\0\4\u01ba\4\0"+
    "\4\u01ba\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u01bb\5\37\4\u01bb\1\37\1\0\2\37\4\u01bb\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\u01bc"+
    "\5\0\4\u01bd\4\0\4\u01bd\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u01bd\5\0\4\u01bd\4\0\4\u01bd"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\u01bc\5\0\4\u01be\4\0\4\u01be\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u01bf\5\37\4\u01bf"+
    "\1\37\1\0\2\37\4\u01bf\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\u01c0\5\0\4\u01c1\4\0"+
    "\4\u01c1\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u01c1\5\0\4\u01c1\4\0\4\u01c1\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\u01c0\5\0"+
    "\4\u01c2\4\0\4\u01c2\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u01c3\5\37\4\u01c3\1\37\1\0\2\37"+
    "\4\u01c3\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\u01c4\5\0\4\u01c5\4\0\4\u01c5\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u01c5\5\0\4\u01c5"+
    "\4\0\4\u01c5\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\u01c4\5\0\4\u01c6\4\0\4\u01c6"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u01c7"+
    "\5\37\4\u01c7\1\37\1\0\2\37\4\u01c7\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\u01c8\5\0"+
    "\4\u01c9\4\0\4\u01c9\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u01c9\5\0\4\u01c9\4\0\4\u01c9\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\u01c8\5\0\4\u01ca\4\0\4\u01ca\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u01cb\5\37\4\u01cb\1\37"+
    "\1\0\2\37\4\u01cb\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\u01cc\5\0\4\u01cd\4\0\4\u01cd"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u01cd"+
    "\5\0\4\u01cd\4\0\4\u01cd\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\u01cc\5\0\4\u01ce"+
    "\4\0\4\u01ce\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u01cf\5\37\4\u01cf\1\37\1\0\2\37\4\u01cf"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\u01d0\5\0\4\u01d1\4\0\4\u01d1\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u01d1\5\0\4\u01d1\4\0"+
    "\4\u01d1\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\u01d0\5\0\4\u01d2\4\0\4\u01d2\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u01d3\5\37"+
    "\4\u01d3\1\37\1\0\2\37\4\u01d3\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\u01d4\5\0\4\u01d5"+
    "\4\0\4\u01d5\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u01d5\5\0\4\u01d5\4\0\4\u01d5\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\u01d4"+
    "\5\0\4\u01d6\4\0\4\u01d6\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u01d7\5\37\4\u01d7\1\37\1\0"+
    "\2\37\4\u01d7\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\u01d8\5\0\4\u01d9\4\0\4\u01d9\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u01d9\5\0"+
    "\4\u01d9\4\0\4\u01d9\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\u01d8\5\0\4\u01da\4\0"+
    "\4\u01da\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u01db\5\37\4\u01db\1\37\1\0\2\37\4\u01db\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\u01dc"+
    "\5\0\4\u01dd\4\0\4\u01dd\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u01dd\5\0\4\u01dd\4\0\4\u01dd"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\u01dc\5\0\4\u01de\4\0\4\u01de\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u01df\5\37\4\u01df"+
    "\1\37\1\0\2\37\4\u01df\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\u01e0\5\0\4\u01e1\4\0"+
    "\4\u01e1\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u01e1\5\0\4\u01e1\4\0\4\u01e1\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\u01e0\5\0"+
    "\4\u01e2\4\0\4\u01e2\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u01e3\5\37\4\u01e3\1\37\1\0\2\37"+
    "\4\u01e3\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\u01e4\5\0\4\u01e5\4\0\4\u01e5\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u01e5\5\0\4\u01e5"+
    "\4\0\4\u01e5\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\u01e4\5\0\4\u01e6\4\0\4\u01e6"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u01e7"+
    "\5\37\4\u01e7\1\37\1\0\2\37\4\u01e7\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\u01e8\5\0"+
    "\4\u01e9\4\0\4\u01e9\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u01e9\5\0\4\u01e9\4\0\4\u01e9\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\u01e8\5\0\4\u01ea\4\0\4\u01ea\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u01eb\5\37\4\u01eb\1\37"+
    "\1\0\2\37\4\u01eb\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\u01ec\5\0\4\u01ed\4\0\4\u01ed"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u01ed"+
    "\5\0\4\u01ed\4\0\4\u01ed\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\u01ec\5\0\4\u01ee"+
    "\4\0\4\u01ee\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u01ef\5\37\4\u01ef\1\37\1\0\2\37\4\u01ef"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\u01f0\5\0\4\u01f1\4\0\4\u01f1\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u01f1\5\0\4\u01f1\4\0"+
    "\4\u01f1\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\u01f0\5\0\4\u01f2\4\0\4\u01f2\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u01f3\5\37"+
    "\4\u01f3\1\37\1\0\2\37\4\u01f3\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\u01f4\5\0\4\u01f5"+
    "\4\0\4\u01f5\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u01f5\5\0\4\u01f5\4\0\4\u01f5\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\u01f4"+
    "\5\0\4\u01f6\4\0\4\u01f6\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u01f7\5\37\4\u01f7\1\37\1\0"+
    "\2\37\4\u01f7\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\u01f8\5\0\4\u01f9\4\0\4\u01f9\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u01f9\5\0"+
    "\4\u01f9\4\0\4\u01f9\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\u01f8\5\0\4\u01fa\4\0"+
    "\4\u01fa\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u01fb\5\37\4\u01fb\1\37\1\0\2\37\4\u01fb\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\u01fc"+
    "\5\0\4\u01fd\4\0\4\u01fd\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u01fd\5\0\4\u01fd\4\0\4\u01fd"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\u01fc\5\0\4\u01fe\4\0\4\u01fe\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u01ff\5\37\4\u01ff"+
    "\1\37\1\0\2\37\4\u01ff\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\u0200\5\0\4\u0201\4\0"+
    "\4\u0201\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u0201\5\0\4\u0201\4\0\4\u0201\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\u0200\5\0"+
    "\4\u0202\4\0\4\u0202\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u0203\5\37\4\u0203\1\37\1\0\2\37"+
    "\4\u0203\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\u0204\5\0\4\u0205\4\0\4\u0205\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0205\5\0\4\u0205"+
    "\4\0\4\u0205\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\u0204\5\0\4\u0206\4\0\4\u0206"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0207"+
    "\5\37\4\u0207\1\37\1\0\2\37\4\u0207\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\u0208\5\0"+
    "\4\u0209\4\0\4\u0209\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0209\5\0\4\u0209\4\0\4\u0209\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\u0208\5\0\4\u020a\4\0\4\u020a\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u020b\5\37\4\u020b\1\37"+
    "\1\0\2\37\4\u020b\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\u020c\5\0\4\u020d\4\0\4\u020d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u020d"+
    "\5\0\4\u020d\4\0\4\u020d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\u020c\5\0\4\u020e"+
    "\4\0\4\u020e\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u020f\5\37\4\u020f\1\37\1\0\2\37\4\u020f"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\u0210\5\0\4\u0211\4\0\4\u0211\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u0211\5\0\4\u0211\4\0"+
    "\4\u0211\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\u0210\5\0\4\u0212\4\0\4\u0212\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u0213\5\37"+
    "\4\u0213\1\37\1\0\2\37\4\u0213\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\u0214\5\0\4\u0215"+
    "\4\0\4\u0215\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0215\5\0\4\u0215\4\0\4\u0215\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\u0214"+
    "\5\0\4\u0216\4\0\4\u0216\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0217\5\37\4\u0217\1\37\1\0"+
    "\2\37\4\u0217\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\u0218\5\0\4\u0219\4\0\4\u0219\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0219\5\0"+
    "\4\u0219\4\0\4\u0219\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\u0218\5\0\4\u021a\4\0"+
    "\4\u021a\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u021b\5\37\4\u021b\1\37\1\0\2\37\4\u021b\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\u021c"+
    "\5\0\4\u021d\4\0\4\u021d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u021d\5\0\4\u021d\4\0\4\u021d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\u021c\5\0\4\u021e\4\0\4\u021e\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u021f\5\37\4\u021f"+
    "\1\37\1\0\2\37\4\u021f\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\u0220\5\0\4\u0221\4\0"+
    "\4\u0221\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u0221\5\0\4\u0221\4\0\4\u0221\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\u0220\5\0"+
    "\4\u0222\4\0\4\u0222\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u0223\5\37\4\u0223\1\37\1\0\2\37"+
    "\4\u0223\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\u0224\5\0\4\u0225\4\0\4\u0225\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0225\5\0\4\u0225"+
    "\4\0\4\u0225\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\u0224\5\0\4\u0226\4\0\4\u0226"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0227"+
    "\5\37\4\u0227\1\37\1\0\2\37\4\u0227\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\u0228\5\0"+
    "\4\u0229\4\0\4\u0229\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0229\5\0\4\u0229\4\0\4\u0229\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\u0228\5\0\4\u022a\4\0\4\u022a\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u022b\5\37\4\u022b\1\37"+
    "\1\0\2\37\4\u022b\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\u022c\5\0\4\u022d\4\0\4\u022d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u022d"+
    "\5\0\4\u022d\4\0\4\u022d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\u022c\5\0\4\u022e"+
    "\4\0\4\u022e\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u022f\5\37\4\u022f\1\37\1\0\2\37\4\u022f"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\u0230\5\0\4\u0231\4\0\4\u0231\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u0231\5\0\4\u0231\4\0"+
    "\4\u0231\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\u0230\5\0\4\u0232\4\0\4\u0232\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u0233\5\37"+
    "\4\u0233\1\37\1\0\2\37\4\u0233\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\u0234\5\0\4\u0235"+
    "\4\0\4\u0235\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0235\5\0\4\u0235\4\0\4\u0235\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\u0234"+
    "\5\0\4\u0236\4\0\4\u0236\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0237\5\37\4\u0237\1\37\1\0"+
    "\2\37\4\u0237\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\u0238\5\0\4\u0239\4\0\4\u0239\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0239\5\0"+
    "\4\u0239\4\0\4\u0239\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\u0238\5\0\4\u023a\4\0"+
    "\4\u023a\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u023b\5\37\4\u023b\1\37\1\0\2\37\4\u023b\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\u023c"+
    "\5\0\4\u023d\4\0\4\u023d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u023d\5\0\4\u023d\4\0\4\u023d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\u023c\5\0\4\u023e\4\0\4\u023e\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u023f\5\37\4\u023f"+
    "\1\37\1\0\2\37\4\u023f\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\u0240\5\0\4\u0241\4\0"+
    "\4\u0241\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u0241\5\0\4\u0241\4\0\4\u0241\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\u0240\5\0"+
    "\4\u0242\4\0\4\u0242\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u0243\5\37\4\u0243\1\37\1\0\2\37"+
    "\4\u0243\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\u0244\5\0\4\u0245\4\0\4\u0245\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0245\5\0\4\u0245"+
    "\4\0\4\u0245\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\u0244\5\0\4\u0246\4\0\4\u0246"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0247"+
    "\5\37\4\u0247\1\37\1\0\2\37\4\u0247\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\u0248\5\0"+
    "\4\u0249\4\0\4\u0249\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0249\5\0\4\u0249\4\0\4\u0249\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\u0248\5\0\4\u024a\4\0\4\u024a\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u024b\5\37\4\u024b\1\37"+
    "\1\0\2\37\4\u024b\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\u024c\5\0\4\u024d\4\0\4\u024d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u024d"+
    "\5\0\4\u024d\4\0\4\u024d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\u024c\5\0\4\u024e"+
    "\4\0\4\u024e\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u024f\5\37\4\u024f\1\37\1\0\2\37\4\u024f"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\u0250\5\0\4\u0251\4\0\4\u0251\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u0251\5\0\4\u0251\4\0"+
    "\4\u0251\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\u0250\5\0\4\u0252\4\0\4\u0252\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u0253\5\37"+
    "\4\u0253\1\37\1\0\2\37\4\u0253\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\u0254\5\0\4\u0255"+
    "\4\0\4\u0255\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0255\5\0\4\u0255\4\0\4\u0255\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\u0254"+
    "\5\0\4\u0256\4\0\4\u0256\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0257\5\37\4\u0257\1\37\1\0"+
    "\2\37\4\u0257\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\u0258\5\0\4\u0259\4\0\4\u0259\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0259\5\0"+
    "\4\u0259\4\0\4\u0259\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\u0258\5\0\4\u025a\4\0"+
    "\4\u025a\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u025b\5\37\4\u025b\1\37\1\0\2\37\4\u025b\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\u025c"+
    "\5\0\4\u025d\4\0\4\u025d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u025d\5\0\4\u025d\4\0\4\u025d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\u025c\5\0\4\u025e\4\0\4\u025e\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u025f\5\37\4\u025f"+
    "\1\37\1\0\2\37\4\u025f\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\u0260\5\0\4\u0261\4\0"+
    "\4\u0261\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u0261\5\0\4\u0261\4\0\4\u0261\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\u0260\5\0"+
    "\4\u0262\4\0\4\u0262\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u0263\5\37\4\u0263\1\37\1\0\2\37"+
    "\4\u0263\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\u0264\5\0\4\u0265\4\0\4\u0265\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0265\5\0\4\u0265"+
    "\4\0\4\u0265\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\u0264\5\0\4\u0266\4\0\4\u0266"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0267"+
    "\5\37\4\u0267\1\37\1\0\2\37\4\u0267\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\u0268\5\0"+
    "\4\u0269\4\0\4\u0269\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\11\0\1\u0269\5\0\4\u0269\4\0\4\u0269\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\7\0\1\116\1\0"+
    "\1\u0268\5\0\4\u026a\4\0\4\u026a\3\0\1\72\2\37"+
    "\1\0\3\37\1\0\13\37\1\u026b\5\37\4\u026b\1\37"+
    "\1\0\2\37\4\u026b\4\37\5\0\1\72\1\0\2\72"+
    "\7\0\1\161\1\0\1\u026c\5\0\4\u026d\4\0\4\u026d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\11\0\1\u026d"+
    "\5\0\4\u026d\4\0\4\u026d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\7\0\1\116\1\0\1\u026c\5\0\4\u026e"+
    "\4\0\4\u026e\3\0\1\72\2\37\1\0\3\37\1\0"+
    "\13\37\1\u026f\5\37\4\u026f\1\37\1\0\2\37\4\u026f"+
    "\4\37\5\0\1\72\1\0\2\72\7\0\1\161\1\0"+
    "\1\u0270\5\0\4\u0271\4\0\4\u0271\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\11\0\1\u0271\5\0\4\u0271\4\0"+
    "\4\u0271\3\0\1\72\5\0\1\72\1\0\2\72\7\0"+
    "\1\116\1\0\1\u0270\5\0\4\u0272\4\0\4\u0272\3\0"+
    "\1\72\2\37\1\0\3\37\1\0\13\37\1\u0273\5\37"+
    "\4\u0273\1\37\1\0\2\37\4\u0273\4\37\5\0\1\72"+
    "\1\0\2\72\7\0\1\161\1\0\1\u0274\5\0\4\u0275"+
    "\4\0\4\u0275\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\11\0\1\u0275\5\0\4\u0275\4\0\4\u0275\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\7\0\1\116\1\0\1\u0274"+
    "\5\0\4\u0276\4\0\4\u0276\3\0\1\72\2\37\1\0"+
    "\3\37\1\0\13\37\1\u0277\5\37\4\u0277\1\37\1\0"+
    "\2\37\4\u0277\4\37\5\0\1\72\1\0\2\72\7\0"+
    "\1\161\1\0\1\u0278\5\0\4\u0279\4\0\4\u0279\3\0"+
    "\1\72\5\0\1\72\1\0\2\72\11\0\1\u0279\5\0"+
    "\4\u0279\4\0\4\u0279\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\u0278\5\0\4\u027a\4\0"+
    "\4\u027a\3\0\1\72\2\37\1\0\3\37\1\0\13\37"+
    "\1\u027b\5\37\4\u027b\1\37\1\0\2\37\4\u027b\4\37"+
    "\5\0\1\72\1\0\2\72\7\0\1\161\1\0\1\u027c"+
    "\5\0\4\u027d\4\0\4\u027d\3\0\1\72\5\0\1\72"+
    "\1\0\2\72\11\0\1\u027d\5\0\4\u027d\4\0\4\u027d"+
    "\3\0\1\72\5\0\1\72\1\0\2\72\7\0\1\116"+
    "\1\0\1\u027c\5\0\4\u027e\4\0\4\u027e\3\0\1\72"+
    "\2\37\1\0\3\37\1\0\13\37\1\u027f\5\37\4\u027f"+
    "\1\37\1\0\2\37\4\u027f\4\37\5\0\1\72\1\0"+
    "\2\72\7\0\1\161\1\0\1\u0280\5\0\4\u0281\4\0"+
    "\4\u0281\3\0\1\72\5\0\1\72\1\0\2\72\11\0"+
    "\1\u0281\5\0\4\u0281\4\0\4\u0281\3\0\1\72\5\0"+
    "\1\72\1\0\2\72\7\0\1\116\1\0\1\u0280\5\0"+
    "\4\u0282\4\0\4\u0282\3\0\1\72\2\37\1\0\3\37"+
    "\1\0\13\37\1\u0283\5\37\4\u0283\1\37\1\0\2\37"+
    "\4\u0283\4\37\5\0\1\72\1\0\2\72\7\0\1\161"+
    "\1\0\1\u0284\5\0\4\u0285\4\0\4\u0285\3\0\1\72"+
    "\5\0\1\72\1\0\2\72\11\0\1\u0285\5\0\4\u0285"+
    "\4\0\4\u0285\3\0\1\72\5\0\1\72\1\0\2\72"+
    "\7\0\1\116\1\0\1\u0284\5\0\4\u0286\4\0\4\u0286"+
    "\3\0\1\72\2\37\1\0\3\37\1\0\13\37\1\u0287"+
    "\5\37\4\u0287\1\37\1\0\2\37\4\u0287\4\37\5\0"+
    "\1\72\1\0\2\72\7\0\1\161\1\0\1\u0288\5\0"+
    "\4\72\4\0\4\72\3\0\1\72\5\0\1\72\1\0"+
    "\2\72\7\0\1\116\1\0\1\u0288\5\0\4\u0289\4\0"+
    "\4\u0289\3\0\1\72";

  private static int [] zzUnpacktrans() {
    int [] result = new int[23520];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\2\11\6\1\1\11\2\1\1\11\6\1\1\11"+
    "\3\1\3\11\1\1\2\11\34\1\1\11\1\1\1\0"+
    "\1\1\1\0\3\11\1\1\2\0\3\1\1\11\1\0"+
    "\3\11\1\0\22\1\4\11\1\1\1\11\1\0\3\1"+
    "\1\0\2\1\4\0\10\1\1\11\7\1\1\0\12\1"+
    "\1\0\3\1\1\0\6\1\2\0\5\1\1\0\1\11"+
    "\5\1\1\0\4\1\1\0\u01de\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[649];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CodeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { // Patrón: .D+eD* / D+.D+eD* / D+.D* . D+D*
    // Error en formato de notación científica o en formato de punto flotante
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 52: break;
          case 2:
            { // Cualquier otro carácter no reconocido
    return new Symbol(sym.error, yyline, yycolumn, yytext());
            }
          // fall through
          case 53: break;
          case 3:
            { /*No se procesa*/
            }
          // fall through
          case 54: break;
          case 4:
            { return new Symbol(sym.BALTASAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 55: break;
          case 5:
            { // Patrón: "C*
    // Error: Comentario inválido, comienza con comillas dobles y no termina
    return new Symbol(sym.error, yyline, yycolumn, yytext());
            }
          // fall through
          case 56: break;
          case 6:
            { return new Symbol(sym.GASPAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 57: break;
          case 7:
            { return new Symbol(sym.ABRECUENTO, yyline, yycolumn, yytext());
            }
          // fall through
          case 58: break;
          case 8:
            { return new Symbol(sym.CIERRECUENTO, yyline, yycolumn, yytext());
            }
          // fall through
          case 59: break;
          case 9:
            { return new Symbol(sym.COMET, yyline, yycolumn, yytext());
            }
          // fall through
          case 60: break;
          case 10:
            { return new Symbol(sym.RUDOLPH, yyline, yycolumn, yytext());
            }
          // fall through
          case 61: break;
          case 11:
            { return new Symbol(sym.COMA, yyline, yycolumn, yytext());
            }
          // fall through
          case 62: break;
          case 12:
            { return new Symbol(sym.DASHER, yyline, yycolumn, yytext());
            }
          // fall through
          case 63: break;
          case 13:
            { return new Symbol(sym.VIXEN, yyline, yycolumn, yytext());
            }
          // fall through
          case 64: break;
          case 14:
            { return new Symbol(sym.L_PAPA_NOEL, yyline, yycolumn, yytext());
            }
          // fall through
          case 65: break;
          case 15:
            { return new Symbol(sym.ZWARTE_PIET, yyline, yycolumn, yytext());
            }
          // fall through
          case 66: break;
          case 16:
            { return new Symbol(sym.PEPPER_MINSTIX, yyline, yycolumn, yytext());
            }
          // fall through
          case 67: break;
          case 17:
            { return new Symbol(sym.KRAMPUS, yyline, yycolumn, yytext());
            }
          // fall through
          case 68: break;
          case 18:
            { return new Symbol(sym.PERSONA, yyline, yycolumn, yytext());
            }
          // fall through
          case 69: break;
          case 19:
            { return new Symbol(sym.ABREEMPAQUE, yyline, yycolumn, yytext());
            }
          // fall through
          case 70: break;
          case 20:
            { return new Symbol(sym.CIERRAEMPAQUE, yyline, yycolumn, yytext());
            }
          // fall through
          case 71: break;
          case 21:
            { return new Symbol(sym.MELCHOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 72: break;
          case 22:
            { return new Symbol(sym.ABREREGALO, yyline, yycolumn, yytext());
            }
          // fall through
          case 73: break;
          case 23:
            { return new Symbol(sym.CIERRAREGALO, yyline, yycolumn, yytext());
            }
          // fall through
          case 74: break;
          case 24:
            { return new Symbol(sym.TOTIN, yyline, yycolumn, yytext());
            }
          // fall through
          case 75: break;
          case 25:
            { string.append( yytext() );
            }
          // fall through
          case 76: break;
          case 26:
            { yybegin(YYINITIAL);
                                       return symbol(sym.STRING_LITERAL,
                                       string.toString());
            }
          // fall through
          case 77: break;
          case 27:
            { string.append('\\');
            }
          // fall through
          case 78: break;
          case 28:
            { return new Symbol(sym.ERROR_IDENTIFICADOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 79: break;
          case 29:
            { return new Symbol(sym.L_SAN_NICOLAS, yyline, yycolumn, yytext());
            }
          // fall through
          case 80: break;
          case 30:
            { // Patrón: (*C*
    // Error: Comentario inválido, comienza con paréntesis y asterisco y no termina
    return new Symbol(sym.error, yyline, yycolumn, yytext());
            }
          // fall through
          case 81: break;
          case 31:
            { return new Symbol(sym.RENILLO, yyline, yycolumn, yytext());
            }
          // fall through
          case 82: break;
          case 32:
            { return new Symbol(sym.GRINCH, yyline, yycolumn, yytext());
            }
          // fall through
          case 83: break;
          case 33:
            { return new Symbol(sym.QUIEN, yyline, yycolumn, yytext());
            }
          // fall through
          case 84: break;
          case 34:
            { // Patrón: D+L*.
    // Error: Carácter no numérico después del punto en el flotante
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 85: break;
          case 35:
            { return new Symbol(sym.ENTREGA, yyline, yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 36:
            { return new Symbol(sym.BELSNICKEL, yyline, yycolumn, yytext());
            }
          // fall through
          case 87: break;
          case 37:
            { return new Symbol(sym.SNOWBALL_ALABASTRO, yyline, yycolumn, yytext());
            }
          // fall through
          case 88: break;
          case 38:
            { return new Symbol(sym.KNECHT_RUPRECHT, yyline, yycolumn, yytext());
            }
          // fall through
          case 89: break;
          case 39:
            { // Patrón: {C*
    // Error: Comentario inválido, comienza con llave y no termina
    return new Symbol(sym.error, yyline, yycolumn, yytext());
            }
          // fall through
          case 90: break;
          case 40:
            { string.append('\"');
            }
          // fall through
          case 91: break;
          case 41:
            { string.append('\n');
            }
          // fall through
          case 92: break;
          case 42:
            { string.append('\r');
            }
          // fall through
          case 93: break;
          case 43:
            { string.append('\t');
            }
          // fall through
          case 94: break;
          case 44:
            { // Patrón: 'C' ~'
    // Error: Literal de cadena inválido, comienza y termina con comillas simples
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 95: break;
          case 45:
            { // Patrón: D+,D+
    // Error: Uso de coma como separador decimal en lugar de punto
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 96: break;
          case 46:
            { return new Symbol(sym.L_COLACHO, yyline, yycolumn, yytext());
            }
          // fall through
          case 97: break;
          case 47:
            { // Patrón: D+.D+D* (Error en formato de flotante)
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 98: break;
          case 48:
            { // Patrón: D+.D+L+ / D+.L+D+
    // Error: Carácter no numérico después del punto en el flotante
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 99: break;
          case 49:
            { // Patrón: D+L+.D+ / L+D+.D+
    // Error: Carácter no numérico antes del punto en el flotante
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 100: break;
          case 50:
            { // Patrón: L+.D+L+ / L+.L+D+
    // Error: Carácter no numérico antes y después del punto en el flotante
    return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 101: break;
          case 51:
            { return new Symbol(sym.OPERADOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
