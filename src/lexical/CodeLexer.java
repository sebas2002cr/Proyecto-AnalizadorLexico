// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexical/lexer.jflex

package lexical;

import syntaxis.sym;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class CodeLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\37\u0200"+
    "\1\u0600\u1000\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\3\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\12\23\1\24\1\0"+
    "\1\25\1\26\1\27\1\11\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\42\1\51\1\52"+
    "\1\53\1\54\5\42\1\55\1\0\1\56\1\57\1\60"+
    "\1\0\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\42\1\51\1\52\1\53\1\54\5\42\1\61"+
    "\1\62\1\63\1\64\6\0\1\3\33\0\1\65\7\0"+
    "\1\65\3\0\1\65\3\0\1\65\1\0\1\65\6\0"+
    "\1\65\7\0\1\11\1\65\154\0\2\66\57\0\1\65"+
    "\35\0\1\67\u0198\0\1\65\3\0\1\65\13\0\2\3"+
    "\6\0\1\65\371\0\1\70\325\0\u0100\3\375\0\1\65"+
    "\2\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\2\3\1\4\1\2\1\5\2\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\2\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\16\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\4\2\1\22\1\2"+
    "\1\33\1\0\2\34\2\0\1\35\1\0\1\36\1\37"+
    "\1\0\1\40\1\15\1\1\2\0\1\1\1\15\1\33"+
    "\1\41\1\42\1\43\1\44\1\3\1\0\5\23\1\45"+
    "\5\23\1\46\10\23\1\46\2\0\1\1\1\0\2\33"+
    "\1\35\1\1\1\0\1\1\2\0\1\1\1\47\1\0"+
    "\1\1\1\0\10\23\2\0\2\23\1\50\1\23\1\51"+
    "\2\23\1\0\1\23\1\0\5\23\1\51\2\0\1\15"+
    "\1\0\1\3\3\1\1\47\5\23\1\52\1\53\1\54"+
    "\1\53\1\54\1\23\1\0\3\23\2\55\1\23\1\0"+
    "\1\56\2\23\1\0\1\57\1\23\1\0\1\1\1\0"+
    "\1\1\1\47\4\23\2\60\2\57\1\61\1\23\1\62"+
    "\2\63\2\23\1\0\2\64\1\0\1\1\5\23\1\0"+
    "\1\65\2\66\1\0\3\23\1\67\1\23\2\0\3\23"+
    "\2\70\1\0\u0165\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[579];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\162\0\253\0\344\0\u011d\0\u0156"+
    "\0\344\0\u018f\0\u01c8\0\162\0\u0201\0\u023a\0\162\0\u0273"+
    "\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390\0\162\0\u03c9\0\u0402"+
    "\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca"+
    "\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\162\0\162"+
    "\0\162\0\162\0\162\0\162\0\162\0\u0759\0\u0792\0\u07cb"+
    "\0\u0804\0\u083d\0\u0876\0\344\0\u011d\0\162\0\u0156\0\u08af"+
    "\0\u08e8\0\u0921\0\u095a\0\162\0\162\0\u01c8\0\162\0\u0993"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\162\0\162"+
    "\0\162\0\162\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f"+
    "\0\u0c78\0\u0bcd\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0bcd"+
    "\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d"+
    "\0\162\0\u0f96\0\u0fcf\0\u1008\0\u0804\0\u1041\0\u0876\0\162"+
    "\0\162\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u0a3e\0\u115e\0\u1197"+
    "\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f"+
    "\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u12b4\0\u14ee"+
    "\0\u12b4\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d"+
    "\0\u16b6\0\u16ef\0\u1728\0\162\0\u1761\0\u179a\0\162\0\u17d3"+
    "\0\u10ec\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1962\0\u1962\0\u1962\0\162\0\162\0\u1a0d"+
    "\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1962\0\162\0\u1b2a\0\u1b63"+
    "\0\u1962\0\u1b9c\0\u1bd5\0\u1c0e\0\u1962\0\u1c47\0\u1c80\0\u1cb9"+
    "\0\u1cf2\0\u1d2b\0\u1cf2\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1dd6"+
    "\0\162\0\u1dd6\0\162\0\u1dd6\0\u1e48\0\u1dd6\0\u1dd6\0\162"+
    "\0\u1e81\0\u1eba\0\u1ef3\0\u1dd6\0\162\0\u1f2c\0\u1f65\0\u1f9e"+
    "\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u2010\0\u2010\0\162"+
    "\0\u20f4\0\u212d\0\u2166\0\u219f\0\u219f\0\u21d8\0\u2211\0\u224a"+
    "\0\u2283\0\u22bc\0\u22f5\0\u22f5\0\162\0\u232e\0\u2367\0\u23a0"+
    "\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568"+
    "\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730"+
    "\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8"+
    "\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0"+
    "\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88"+
    "\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50"+
    "\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018"+
    "\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0"+
    "\0\u3219\0\u3252\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8"+
    "\0\u33e1\0\u341a\0\u3453\0\u348c\0\u34c5\0\u34fe\0\u3537\0\u3570"+
    "\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u3738"+
    "\0\u3771\0\u37aa\0\u37e3\0\u381c\0\u3855\0\u388e\0\u38c7\0\u3900"+
    "\0\u3939\0\u3972\0\u39ab\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8"+
    "\0\u3b01\0\u3b3a\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90"+
    "\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6\0\u3e1f\0\u3e58"+
    "\0\u3e91\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020"+
    "\0\u4059\0\u4092\0\u40cb\0\u4104\0\u413d\0\u4176\0\u41af\0\u41e8"+
    "\0\u4221\0\u425a\0\u4293\0\u42cc\0\u4305\0\u433e\0\u4377\0\u43b0"+
    "\0\u43e9\0\u4422\0\u445b\0\u4494\0\u44cd\0\u4506\0\u453f\0\u4578"+
    "\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce\0\u4707\0\u4740"+
    "\0\u4779\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u4896\0\u48cf\0\u4908"+
    "\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\u4a5e\0\u4a97\0\u4ad0"+
    "\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4\0\u4bed\0\u4c26\0\u4c5f\0\u4c98"+
    "\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c\0\u4db5\0\u4dee\0\u4e27\0\u4e60"+
    "\0\u4e99\0\u4ed2\0\u4f0b\0\u4f44\0\u4f7d\0\u4fb6\0\u4fef\0\u5028"+
    "\0\u5061\0\u509a\0\u50d3\0\u510c\0\u5145\0\u517e\0\u51b7\0\u51f0"+
    "\0\u5229\0\u5262\0\u529b\0\u52d4\0\u530d\0\u5346\0\u537f\0\u53b8"+
    "\0\u53f1\0\u542a\0\u5463\0\u549c\0\u54d5\0\u550e\0\u5547\0\u5580"+
    "\0\u55b9\0\u55f2\0\u562b\0\u5664\0\u569d\0\u56d6\0\u570f\0\u5748"+
    "\0\u5781\0\u57ba\0\u57f3\0\u582c\0\u5865\0\u589e\0\u58d7\0\u5910"+
    "\0\u5949\0\u5982\0\u59bb\0\u59f4\0\u5a2d\0\u5a66\0\u5a9f\0\u5ad8"+
    "\0\u5b11\0\u5b4a\0\u5b83\0\u5bbc\0\u5bf5\0\u5c2e\0\u5c67\0\u5ca0"+
    "\0\u5cd9\0\u5d12\0\u5d4b\0\u5d84\0\u5dbd\0\u5df6\0\u5e2f\0\u5e68"+
    "\0\u5ea1\0\u5eda\0\u5f13\0\u5f4c\0\u5f85\0\u5fbe\0\u5ff7\0\u6030"+
    "\0\u6069\0\u60a2\0\u60db\0\u6114\0\u614d\0\u6186\0\u61bf\0\u61f8"+
    "\0\u6231\0\u626a\0\u62a3\0\u62dc\0\u6315\0\u634e\0\u6387\0\u63c0"+
    "\0\u63f9\0\u6432\0\u646b\0\u64a4\0\u64dd\0\u6516\0\u654f\0\u6588"+
    "\0\u65c1\0\u65fa\0\u6633\0\u666c\0\u66a5\0\u66de\0\u6717\0\u6750"+
    "\0\u6789\0\u67c2\0\u67fb\0\u6834\0\u686d\0\u68a6\0\u68df\0\u6918"+
    "\0\u6951\0\u698a\0\u69c3\0\u69fc\0\u6a35\0\u6a6e\0\u6aa7\0\u6ae0"+
    "\0\u6b19\0\u6b52\0\u6b8b\0\u6bc4\0\u6bfd\0\u6c36\0\u6c6f\0\u6ca8"+
    "\0\u6ce1\0\u6d1a\0\u6d53\0\u6d8c\0\u6dc5\0\u6dfe\0\u6e37\0\u6e70"+
    "\0\u6ea9\0\u6ee2\0\u6f1b\0\u6f54\0\u6f8d\0\u6fc6\0\u6fff\0\u7038"+
    "\0\u7071\0\u70aa\0\u70e3\0\u711c\0\u7155\0\u718e\0\u71c7\0\u7200"+
    "\0\u1041\0\344\0\u0876";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[579];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\2\31\1\37"+
    "\2\31\1\40\1\41\2\31\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\31\1\52\1\53\1\54"+
    "\1\55\1\11\1\56\1\57\7\3\1\11\1\3\2\11"+
    "\1\60\6\3\1\21\1\3\1\61\4\3\1\62\24\63"+
    "\3\3\1\63\4\3\1\11\3\3\73\0\1\4\74\0"+
    "\1\64\1\0\2\64\11\0\1\64\5\0\24\64\3\0"+
    "\1\64\4\0\1\64\3\0\7\65\1\66\61\65\6\0"+
    "\1\64\1\0\2\64\11\0\1\67\5\0\24\64\3\0"+
    "\1\64\4\0\1\64\3\0\2\70\4\71\4\70\1\72"+
    "\56\70\20\0\1\73\65\0\1\74\71\0\1\75\65\0"+
    "\1\76\4\0\1\77\2\0\1\100\70\0\1\101\125\0"+
    "\1\102\27\0\1\103\1\0\1\104\1\0\1\105\5\0"+
    "\24\106\3\0\1\106\4\0\1\64\31\0\1\107\70\0"+
    "\1\110\1\111\67\0\1\112\42\0\30\62\1\113\40\62"+
    "\6\0\1\64\1\0\2\64\7\0\1\114\1\0\1\115"+
    "\5\0\24\116\3\0\1\116\4\0\1\64\11\0\1\64"+
    "\1\0\2\64\7\0\1\114\1\0\1\115\5\0\16\116"+
    "\1\117\1\116\1\120\3\116\3\0\1\116\4\0\1\64"+
    "\11\0\1\64\1\0\2\64\7\0\1\114\1\0\1\115"+
    "\5\0\7\116\1\121\14\116\3\0\1\116\4\0\1\64"+
    "\11\0\1\64\1\0\2\64\7\0\1\114\1\0\1\115"+
    "\5\0\16\116\1\122\5\116\3\0\1\116\4\0\1\64"+
    "\11\0\1\64\1\0\2\64\7\0\1\114\1\0\1\115"+
    "\5\0\13\116\1\123\10\116\3\0\1\116\4\0\1\64"+
    "\11\0\1\64\1\0\2\64\7\0\1\114\1\0\1\115"+
    "\5\0\1\124\12\116\1\125\2\116\1\126\4\116\1\127"+
    "\3\0\1\116\4\0\1\64\11\0\1\64\1\0\2\64"+
    "\7\0\1\114\1\0\1\115\5\0\5\116\1\130\7\116"+
    "\1\131\6\116\3\0\1\116\4\0\1\64\11\0\1\64"+
    "\1\0\2\64\7\0\1\114\1\0\1\115\5\0\16\116"+
    "\1\132\5\116\3\0\1\116\4\0\1\64\11\0\1\64"+
    "\1\0\2\64\7\0\1\114\1\0\1\115\5\0\1\133"+
    "\23\116\3\0\1\116\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\114\1\0\1\115\5\0\20\116\1\134"+
    "\3\116\3\0\1\116\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\114\1\0\1\115\5\0\4\116\1\135"+
    "\17\116\3\0\1\116\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\114\1\0\1\115\5\0\22\116\1\136"+
    "\1\116\3\0\1\116\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\114\1\0\1\115\5\0\20\116\1\137"+
    "\3\116\3\0\1\116\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\114\1\0\1\115\5\0\15\116\1\140"+
    "\6\116\3\0\1\116\4\0\1\64\41\0\1\141\7\0"+
    "\1\142\75\0\1\143\15\0\12\71\1\0\56\71\17\0"+
    "\1\103\1\0\1\144\1\0\1\145\5\0\24\106\3\0"+
    "\1\106\4\0\1\64\3\0\30\62\1\0\40\62\6\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\146\5\0"+
    "\24\147\3\0\1\147\4\0\1\64\3\0\12\71\1\150"+
    "\70\71\1\151\56\71\12\0\1\150\101\0\1\152\70\0"+
    "\1\100\70\0\1\101\11\0\1\153\33\0\15\154\1\0"+
    "\42\154\1\155\10\154\23\0\1\156\70\0\1\157\5\0"+
    "\24\160\3\0\1\160\27\0\1\103\1\0\1\161\1\0"+
    "\1\105\5\0\24\106\3\0\1\106\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\156\1\0\1\64\5\0"+
    "\24\106\3\0\1\106\4\0\1\64\3\0\2\113\4\0"+
    "\63\113\23\0\1\162\5\0\24\160\3\0\1\160\16\0"+
    "\1\64\1\0\2\64\7\0\1\103\1\0\1\163\5\0"+
    "\24\164\3\0\1\164\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\114\1\0\1\163\5\0\24\165\3\0"+
    "\1\165\4\0\1\64\11\0\1\64\1\0\2\64\7\0"+
    "\1\114\1\0\1\163\5\0\16\165\1\166\5\165\3\0"+
    "\1\165\4\0\1\64\11\0\1\64\1\0\2\64\7\0"+
    "\1\114\1\0\1\163\5\0\4\165\1\167\17\165\3\0"+
    "\1\165\4\0\1\64\11\0\1\64\1\0\2\64\7\0"+
    "\1\114\1\0\1\163\5\0\1\170\23\165\3\0\1\165"+
    "\4\0\1\64\11\0\1\64\1\0\2\64\7\0\1\114"+
    "\1\0\1\163\5\0\10\165\1\171\10\165\1\172\2\165"+
    "\3\0\1\165\4\0\1\64\1\173\1\174\7\0\1\64"+
    "\1\0\2\64\7\0\1\114\1\0\1\163\5\0\13\165"+
    "\1\175\10\165\3\0\1\165\4\0\1\64\11\0\1\64"+
    "\1\0\2\64\7\0\1\114\1\0\1\163\5\0\16\165"+
    "\1\176\5\165\3\0\1\165\4\0\1\64\11\0\1\64"+
    "\1\0\2\64\7\0\1\114\1\0\1\163\5\0\20\165"+
    "\1\177\3\165\3\0\1\165\4\0\1\64\11\0\1\64"+
    "\1\0\2\64\7\0\1\114\1\0\1\163\5\0\15\165"+
    "\1\200\6\165\3\0\1\165\4\0\1\64\11\0\1\64"+
    "\1\0\2\64\7\0\1\114\1\0\1\163\5\0\22\165"+
    "\1\201\1\165\3\0\1\165\4\0\1\64\11\0\1\64"+
    "\1\0\2\64\7\0\1\114\1\0\1\163\5\0\2\165"+
    "\1\202\21\165\3\0\1\165\4\0\1\64\11\0\1\64"+
    "\1\0\2\64\7\0\1\114\1\0\1\163\5\0\10\165"+
    "\1\203\13\165\3\0\1\165\4\0\1\64\1\204\10\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\163\5\0"+
    "\10\165\1\205\13\165\3\0\1\165\4\0\1\64\1\206"+
    "\10\0\1\64\1\0\2\64\7\0\1\114\1\0\1\163"+
    "\5\0\1\207\21\165\1\210\1\165\3\0\1\165\4\0"+
    "\1\64\11\0\1\64\1\0\2\64\7\0\1\114\1\0"+
    "\1\163\5\0\20\165\1\211\3\165\3\0\1\165\4\0"+
    "\1\64\11\0\1\64\1\0\2\64\7\0\1\114\1\0"+
    "\1\163\5\0\23\165\1\212\3\0\1\165\4\0\1\64"+
    "\11\0\1\64\1\0\2\64\7\0\1\114\1\0\1\163"+
    "\5\0\22\165\1\213\1\165\3\0\1\165\4\0\1\64"+
    "\56\0\1\214\66\0\1\215\42\0\1\216\5\0\24\160"+
    "\3\0\1\160\16\0\1\64\1\0\2\64\7\0\1\103"+
    "\1\0\1\146\5\0\24\64\3\0\1\64\4\0\1\64"+
    "\17\0\1\217\6\0\1\152\65\0\1\156\2\0\1\156"+
    "\45\0\60\154\1\220\32\154\1\221\35\154\1\220\10\154"+
    "\21\0\1\222\1\0\1\157\5\0\4\223\1\224\17\223"+
    "\3\0\1\223\33\0\1\156\5\0\24\160\3\0\1\160"+
    "\33\0\1\225\5\0\24\160\3\0\1\160\33\0\1\162"+
    "\5\0\24\223\3\0\1\223\16\0\1\64\1\0\2\64"+
    "\7\0\1\103\1\0\1\226\5\0\24\227\3\0\1\227"+
    "\4\0\1\64\11\0\1\64\1\0\2\64\11\0\1\227"+
    "\5\0\24\227\3\0\1\227\4\0\1\64\11\0\1\64"+
    "\1\0\2\64\7\0\1\114\1\0\1\226\5\0\24\230"+
    "\3\0\1\230\4\0\1\64\11\0\1\64\1\0\2\64"+
    "\7\0\1\114\1\0\1\226\5\0\13\230\1\231\10\230"+
    "\3\0\1\230\4\0\1\64\11\0\1\64\1\0\2\64"+
    "\7\0\1\114\1\0\1\226\5\0\1\232\23\230\3\0"+
    "\1\230\4\0\1\64\11\0\1\64\1\0\2\64\7\0"+
    "\1\114\1\0\1\226\5\0\20\230\1\233\3\230\3\0"+
    "\1\230\4\0\1\64\11\0\1\64\1\0\2\64\7\0"+
    "\1\114\1\0\1\226\5\0\5\230\1\234\16\230\3\0"+
    "\1\230\4\0\1\64\11\0\1\64\1\0\2\64\7\0"+
    "\1\114\1\0\1\226\5\0\4\230\1\235\17\230\3\0"+
    "\1\230\4\0\1\64\41\0\1\236\67\0\1\237\41\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\226\5\0"+
    "\21\230\1\240\2\230\3\0\1\230\4\0\1\64\1\0"+
    "\1\241\7\0\1\64\1\0\2\64\7\0\1\114\1\0"+
    "\1\226\5\0\1\242\23\230\3\0\1\230\4\0\1\64"+
    "\11\0\1\64\1\0\2\64\7\0\1\114\1\0\1\226"+
    "\5\0\2\230\1\243\21\230\3\0\1\230\4\0\1\64"+
    "\11\0\1\64\1\0\2\64\7\0\1\114\1\0\1\226"+
    "\5\0\1\244\23\230\3\0\1\230\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\226\5\0"+
    "\15\230\1\245\6\230\3\0\1\230\4\0\1\64\51\0"+
    "\1\246\30\0\1\64\1\0\2\64\7\0\1\114\1\0"+
    "\1\226\5\0\15\230\1\247\6\230\3\0\1\230\4\0"+
    "\1\64\51\0\1\250\30\0\1\64\1\0\2\64\7\0"+
    "\1\114\1\0\1\226\5\0\3\230\1\251\20\230\3\0"+
    "\1\230\4\0\1\64\11\0\1\64\1\0\2\64\7\0"+
    "\1\114\1\0\1\226\5\0\23\230\1\252\3\0\1\230"+
    "\4\0\1\64\11\0\1\64\1\0\2\64\7\0\1\114"+
    "\1\0\1\226\5\0\10\230\1\253\13\230\3\0\1\230"+
    "\4\0\1\64\1\254\10\0\1\64\1\0\2\64\7\0"+
    "\1\114\1\0\1\226\5\0\4\230\1\255\17\230\3\0"+
    "\1\230\4\0\1\64\11\0\1\64\1\0\2\64\7\0"+
    "\1\114\1\0\1\226\5\0\10\230\1\256\13\230\3\0"+
    "\1\230\4\0\1\64\1\257\43\0\1\254\24\0\1\254"+
    "\23\0\1\222\1\0\1\216\5\0\4\223\1\260\17\223"+
    "\3\0\1\223\10\0\22\154\1\4\35\154\1\220\10\154"+
    "\21\0\1\222\1\0\1\222\76\0\24\223\3\0\1\223"+
    "\30\0\1\261\1\262\1\0\1\263\5\0\24\223\3\0"+
    "\1\223\31\0\1\222\1\0\1\225\5\0\4\223\1\260"+
    "\17\223\3\0\1\223\16\0\1\64\1\0\2\64\7\0"+
    "\1\103\1\0\1\264\5\0\24\265\3\0\1\265\4\0"+
    "\1\64\11\0\1\64\1\0\2\64\11\0\1\265\5\0"+
    "\24\265\3\0\1\265\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\114\1\0\1\264\5\0\24\266\3\0"+
    "\1\266\4\0\1\64\11\0\1\64\1\0\2\64\7\0"+
    "\1\114\1\0\1\264\5\0\4\266\1\267\17\266\3\0"+
    "\1\266\4\0\1\64\11\0\1\64\1\0\2\64\7\0"+
    "\1\114\1\0\1\264\5\0\12\266\1\270\11\266\3\0"+
    "\1\266\4\0\1\64\2\0\1\271\6\0\1\64\1\0"+
    "\2\64\7\0\1\114\1\0\1\264\5\0\4\266\1\272"+
    "\17\266\3\0\1\266\4\0\1\64\40\0\1\273\41\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\264\5\0"+
    "\22\266\1\274\1\266\3\0\1\266\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\264\5\0"+
    "\22\266\1\275\1\266\3\0\1\266\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\264\5\0"+
    "\13\266\1\276\10\266\3\0\1\266\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\264\5\0"+
    "\22\266\1\277\1\266\3\0\1\266\4\0\1\64\56\0"+
    "\1\300\23\0\1\64\1\0\2\64\7\0\1\114\1\0"+
    "\1\264\5\0\20\266\1\301\3\266\3\0\1\266\4\0"+
    "\1\64\11\0\1\64\1\0\2\64\7\0\1\114\1\0"+
    "\1\264\5\0\15\266\1\302\6\266\3\0\1\266\4\0"+
    "\1\64\51\0\1\303\30\0\1\64\1\0\2\64\7\0"+
    "\1\114\1\0\1\264\5\0\13\266\1\304\10\266\3\0"+
    "\1\266\4\0\1\64\47\0\1\305\44\0\1\306\1\262"+
    "\1\0\1\306\5\0\24\223\3\0\1\223\31\0\1\262"+
    "\1\0\1\263\70\0\1\307\53\0\1\64\1\0\2\64"+
    "\7\0\1\103\1\0\1\310\5\0\24\311\3\0\1\311"+
    "\4\0\1\64\11\0\1\64\1\0\2\64\11\0\1\311"+
    "\5\0\24\311\3\0\1\311\4\0\1\64\11\0\1\64"+
    "\1\0\2\64\7\0\1\114\1\0\1\310\5\0\24\312"+
    "\3\0\1\312\4\0\1\64\11\0\1\64\1\0\2\64"+
    "\7\0\1\114\1\0\1\310\5\0\1\313\23\312\3\0"+
    "\1\312\4\0\1\64\11\0\1\64\1\0\2\64\7\0"+
    "\1\114\1\0\1\310\5\0\10\312\1\314\13\312\3\0"+
    "\1\312\4\0\1\64\1\315\10\0\1\64\1\0\2\64"+
    "\7\0\1\114\1\0\1\310\5\0\15\312\1\316\6\312"+
    "\3\0\1\312\4\0\1\64\11\0\1\64\1\0\2\64"+
    "\7\0\1\114\1\0\1\310\5\0\6\312\1\317\15\312"+
    "\3\0\1\312\4\0\1\64\42\0\1\320\52\0\1\262"+
    "\1\0\1\306\66\0\1\321\1\0\1\307\53\0\1\64"+
    "\1\0\2\64\7\0\1\103\1\0\1\322\5\0\24\323"+
    "\3\0\1\323\4\0\1\64\11\0\1\64\1\0\2\64"+
    "\11\0\1\323\5\0\24\323\3\0\1\323\4\0\1\64"+
    "\11\0\1\64\1\0\2\64\7\0\1\114\1\0\1\322"+
    "\5\0\24\324\3\0\1\324\4\0\1\64\11\0\1\64"+
    "\1\0\2\64\7\0\1\114\1\0\1\322\5\0\15\324"+
    "\1\325\6\324\3\0\1\324\4\0\1\64\11\0\1\64"+
    "\1\0\2\64\7\0\1\114\1\0\1\322\5\0\16\324"+
    "\1\326\5\324\3\0\1\324\4\0\1\64\52\0\1\327"+
    "\44\0\1\330\53\0\1\64\1\0\2\64\7\0\1\103"+
    "\1\0\1\331\5\0\24\332\3\0\1\332\4\0\1\64"+
    "\11\0\1\64\1\0\2\64\11\0\1\332\5\0\24\332"+
    "\3\0\1\332\4\0\1\64\11\0\1\64\1\0\2\64"+
    "\7\0\1\114\1\0\1\331\5\0\24\333\3\0\1\333"+
    "\4\0\1\64\11\0\1\64\1\0\2\64\7\0\1\114"+
    "\1\0\1\331\5\0\15\333\1\334\6\333\3\0\1\333"+
    "\4\0\1\64\51\0\1\335\45\0\1\330\11\0\1\336"+
    "\41\0\1\64\1\0\2\64\7\0\1\103\1\0\1\337"+
    "\5\0\24\340\3\0\1\340\4\0\1\64\11\0\1\64"+
    "\1\0\2\64\11\0\1\340\5\0\24\340\3\0\1\340"+
    "\4\0\1\64\11\0\1\64\1\0\2\64\7\0\1\114"+
    "\1\0\1\337\5\0\24\341\3\0\1\341\4\0\1\64"+
    "\23\0\1\306\1\262\1\0\1\306\53\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\342\5\0\24\343\3\0"+
    "\1\343\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\343\5\0\24\343\3\0\1\343\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\342\5\0"+
    "\24\344\3\0\1\344\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\345\5\0\24\346\3\0"+
    "\1\346\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\346\5\0\24\346\3\0\1\346\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\345\5\0"+
    "\24\347\3\0\1\347\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\350\5\0\24\351\3\0"+
    "\1\351\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\351\5\0\24\351\3\0\1\351\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\350\5\0"+
    "\24\352\3\0\1\352\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\353\5\0\24\354\3\0"+
    "\1\354\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\354\5\0\24\354\3\0\1\354\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\353\5\0"+
    "\24\355\3\0\1\355\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\356\5\0\24\357\3\0"+
    "\1\357\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\357\5\0\24\357\3\0\1\357\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\356\5\0"+
    "\24\360\3\0\1\360\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\361\5\0\24\362\3\0"+
    "\1\362\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\362\5\0\24\362\3\0\1\362\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\361\5\0"+
    "\24\363\3\0\1\363\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\364\5\0\24\365\3\0"+
    "\1\365\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\365\5\0\24\365\3\0\1\365\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\364\5\0"+
    "\24\366\3\0\1\366\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\367\5\0\24\370\3\0"+
    "\1\370\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\370\5\0\24\370\3\0\1\370\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\367\5\0"+
    "\24\371\3\0\1\371\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\372\5\0\24\373\3\0"+
    "\1\373\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\373\5\0\24\373\3\0\1\373\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\372\5\0"+
    "\24\374\3\0\1\374\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\375\5\0\24\376\3\0"+
    "\1\376\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\376\5\0\24\376\3\0\1\376\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\375\5\0"+
    "\24\377\3\0\1\377\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0100\5\0\24\u0101\3\0"+
    "\1\u0101\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0101\5\0\24\u0101\3\0\1\u0101\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0100\5\0"+
    "\24\u0102\3\0\1\u0102\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0103\5\0\24\u0104\3\0"+
    "\1\u0104\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0104\5\0\24\u0104\3\0\1\u0104\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0103\5\0"+
    "\24\u0105\3\0\1\u0105\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0106\5\0\24\u0107\3\0"+
    "\1\u0107\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0107\5\0\24\u0107\3\0\1\u0107\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0106\5\0"+
    "\24\u0108\3\0\1\u0108\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0109\5\0\24\u010a\3\0"+
    "\1\u010a\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u010a\5\0\24\u010a\3\0\1\u010a\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0109\5\0"+
    "\24\u010b\3\0\1\u010b\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u010c\5\0\24\u010d\3\0"+
    "\1\u010d\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u010d\5\0\24\u010d\3\0\1\u010d\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u010c\5\0"+
    "\24\u010e\3\0\1\u010e\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u010f\5\0\24\u0110\3\0"+
    "\1\u0110\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0110\5\0\24\u0110\3\0\1\u0110\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u010f\5\0"+
    "\24\u0111\3\0\1\u0111\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0112\5\0\24\u0113\3\0"+
    "\1\u0113\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0113\5\0\24\u0113\3\0\1\u0113\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0112\5\0"+
    "\24\u0114\3\0\1\u0114\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0115\5\0\24\u0116\3\0"+
    "\1\u0116\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0116\5\0\24\u0116\3\0\1\u0116\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0115\5\0"+
    "\24\u0117\3\0\1\u0117\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0118\5\0\24\u0119\3\0"+
    "\1\u0119\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0119\5\0\24\u0119\3\0\1\u0119\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0118\5\0"+
    "\24\u011a\3\0\1\u011a\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u011b\5\0\24\u011c\3\0"+
    "\1\u011c\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u011c\5\0\24\u011c\3\0\1\u011c\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u011b\5\0"+
    "\24\u011d\3\0\1\u011d\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u011e\5\0\24\u011f\3\0"+
    "\1\u011f\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u011f\5\0\24\u011f\3\0\1\u011f\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u011e\5\0"+
    "\24\u0120\3\0\1\u0120\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0121\5\0\24\u0122\3\0"+
    "\1\u0122\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0122\5\0\24\u0122\3\0\1\u0122\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0121\5\0"+
    "\24\u0123\3\0\1\u0123\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0124\5\0\24\u0125\3\0"+
    "\1\u0125\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0125\5\0\24\u0125\3\0\1\u0125\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0124\5\0"+
    "\24\u0126\3\0\1\u0126\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0127\5\0\24\u0128\3\0"+
    "\1\u0128\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0128\5\0\24\u0128\3\0\1\u0128\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0127\5\0"+
    "\24\u0129\3\0\1\u0129\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u012a\5\0\24\u012b\3\0"+
    "\1\u012b\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u012b\5\0\24\u012b\3\0\1\u012b\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u012a\5\0"+
    "\24\u012c\3\0\1\u012c\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u012d\5\0\24\u012e\3\0"+
    "\1\u012e\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u012e\5\0\24\u012e\3\0\1\u012e\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u012d\5\0"+
    "\24\u012f\3\0\1\u012f\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0130\5\0\24\u0131\3\0"+
    "\1\u0131\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0131\5\0\24\u0131\3\0\1\u0131\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0130\5\0"+
    "\24\u0132\3\0\1\u0132\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0133\5\0\24\u0134\3\0"+
    "\1\u0134\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0134\5\0\24\u0134\3\0\1\u0134\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0133\5\0"+
    "\24\u0135\3\0\1\u0135\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0136\5\0\24\u0137\3\0"+
    "\1\u0137\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0137\5\0\24\u0137\3\0\1\u0137\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0136\5\0"+
    "\24\u0138\3\0\1\u0138\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0139\5\0\24\u013a\3\0"+
    "\1\u013a\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u013a\5\0\24\u013a\3\0\1\u013a\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0139\5\0"+
    "\24\u013b\3\0\1\u013b\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u013c\5\0\24\u013d\3\0"+
    "\1\u013d\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u013d\5\0\24\u013d\3\0\1\u013d\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u013c\5\0"+
    "\24\u013e\3\0\1\u013e\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u013f\5\0\24\u0140\3\0"+
    "\1\u0140\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0140\5\0\24\u0140\3\0\1\u0140\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u013f\5\0"+
    "\24\u0141\3\0\1\u0141\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0142\5\0\24\u0143\3\0"+
    "\1\u0143\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0143\5\0\24\u0143\3\0\1\u0143\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0142\5\0"+
    "\24\u0144\3\0\1\u0144\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0145\5\0\24\u0146\3\0"+
    "\1\u0146\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0146\5\0\24\u0146\3\0\1\u0146\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0145\5\0"+
    "\24\u0147\3\0\1\u0147\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0148\5\0\24\u0149\3\0"+
    "\1\u0149\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0149\5\0\24\u0149\3\0\1\u0149\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0148\5\0"+
    "\24\u014a\3\0\1\u014a\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u014b\5\0\24\u014c\3\0"+
    "\1\u014c\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u014c\5\0\24\u014c\3\0\1\u014c\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u014b\5\0"+
    "\24\u014d\3\0\1\u014d\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u014e\5\0\24\u014f\3\0"+
    "\1\u014f\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u014f\5\0\24\u014f\3\0\1\u014f\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u014e\5\0"+
    "\24\u0150\3\0\1\u0150\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0151\5\0\24\u0152\3\0"+
    "\1\u0152\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0152\5\0\24\u0152\3\0\1\u0152\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0151\5\0"+
    "\24\u0153\3\0\1\u0153\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0154\5\0\24\u0155\3\0"+
    "\1\u0155\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0155\5\0\24\u0155\3\0\1\u0155\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0154\5\0"+
    "\24\u0156\3\0\1\u0156\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0157\5\0\24\u0158\3\0"+
    "\1\u0158\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0158\5\0\24\u0158\3\0\1\u0158\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0157\5\0"+
    "\24\u0159\3\0\1\u0159\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u015a\5\0\24\u015b\3\0"+
    "\1\u015b\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u015b\5\0\24\u015b\3\0\1\u015b\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u015a\5\0"+
    "\24\u015c\3\0\1\u015c\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u015d\5\0\24\u015e\3\0"+
    "\1\u015e\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u015e\5\0\24\u015e\3\0\1\u015e\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u015d\5\0"+
    "\24\u015f\3\0\1\u015f\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0160\5\0\24\u0161\3\0"+
    "\1\u0161\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0161\5\0\24\u0161\3\0\1\u0161\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0160\5\0"+
    "\24\u0162\3\0\1\u0162\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0163\5\0\24\u0164\3\0"+
    "\1\u0164\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0164\5\0\24\u0164\3\0\1\u0164\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0163\5\0"+
    "\24\u0165\3\0\1\u0165\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0166\5\0\24\u0167\3\0"+
    "\1\u0167\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0167\5\0\24\u0167\3\0\1\u0167\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0166\5\0"+
    "\24\u0168\3\0\1\u0168\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0169\5\0\24\u016a\3\0"+
    "\1\u016a\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u016a\5\0\24\u016a\3\0\1\u016a\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0169\5\0"+
    "\24\u016b\3\0\1\u016b\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u016c\5\0\24\u016d\3\0"+
    "\1\u016d\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u016d\5\0\24\u016d\3\0\1\u016d\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u016c\5\0"+
    "\24\u016e\3\0\1\u016e\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u016f\5\0\24\u0170\3\0"+
    "\1\u0170\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0170\5\0\24\u0170\3\0\1\u0170\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u016f\5\0"+
    "\24\u0171\3\0\1\u0171\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0172\5\0\24\u0173\3\0"+
    "\1\u0173\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0173\5\0\24\u0173\3\0\1\u0173\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0172\5\0"+
    "\24\u0174\3\0\1\u0174\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0175\5\0\24\u0176\3\0"+
    "\1\u0176\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0176\5\0\24\u0176\3\0\1\u0176\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0175\5\0"+
    "\24\u0177\3\0\1\u0177\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0178\5\0\24\u0179\3\0"+
    "\1\u0179\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0179\5\0\24\u0179\3\0\1\u0179\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0178\5\0"+
    "\24\u017a\3\0\1\u017a\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u017b\5\0\24\u017c\3\0"+
    "\1\u017c\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u017c\5\0\24\u017c\3\0\1\u017c\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u017b\5\0"+
    "\24\u017d\3\0\1\u017d\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u017e\5\0\24\u017f\3\0"+
    "\1\u017f\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u017f\5\0\24\u017f\3\0\1\u017f\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u017e\5\0"+
    "\24\u0180\3\0\1\u0180\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0181\5\0\24\u0182\3\0"+
    "\1\u0182\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0182\5\0\24\u0182\3\0\1\u0182\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0181\5\0"+
    "\24\u0183\3\0\1\u0183\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0184\5\0\24\u0185\3\0"+
    "\1\u0185\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0185\5\0\24\u0185\3\0\1\u0185\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0184\5\0"+
    "\24\u0186\3\0\1\u0186\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0187\5\0\24\u0188\3\0"+
    "\1\u0188\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0188\5\0\24\u0188\3\0\1\u0188\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0187\5\0"+
    "\24\u0189\3\0\1\u0189\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u018a\5\0\24\u018b\3\0"+
    "\1\u018b\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u018b\5\0\24\u018b\3\0\1\u018b\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u018a\5\0"+
    "\24\u018c\3\0\1\u018c\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u018d\5\0\24\u018e\3\0"+
    "\1\u018e\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u018e\5\0\24\u018e\3\0\1\u018e\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u018d\5\0"+
    "\24\u018f\3\0\1\u018f\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0190\5\0\24\u0191\3\0"+
    "\1\u0191\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0191\5\0\24\u0191\3\0\1\u0191\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0190\5\0"+
    "\24\u0192\3\0\1\u0192\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0193\5\0\24\u0194\3\0"+
    "\1\u0194\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0194\5\0\24\u0194\3\0\1\u0194\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0193\5\0"+
    "\24\u0195\3\0\1\u0195\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0196\5\0\24\u0197\3\0"+
    "\1\u0197\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0197\5\0\24\u0197\3\0\1\u0197\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0196\5\0"+
    "\24\u0198\3\0\1\u0198\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0199\5\0\24\u019a\3\0"+
    "\1\u019a\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u019a\5\0\24\u019a\3\0\1\u019a\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0199\5\0"+
    "\24\u019b\3\0\1\u019b\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u019c\5\0\24\u019d\3\0"+
    "\1\u019d\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u019d\5\0\24\u019d\3\0\1\u019d\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u019c\5\0"+
    "\24\u019e\3\0\1\u019e\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u019f\5\0\24\u01a0\3\0"+
    "\1\u01a0\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01a0\5\0\24\u01a0\3\0\1\u01a0\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u019f\5\0"+
    "\24\u01a1\3\0\1\u01a1\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01a2\5\0\24\u01a3\3\0"+
    "\1\u01a3\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01a3\5\0\24\u01a3\3\0\1\u01a3\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01a2\5\0"+
    "\24\u01a4\3\0\1\u01a4\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01a5\5\0\24\u01a6\3\0"+
    "\1\u01a6\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01a6\5\0\24\u01a6\3\0\1\u01a6\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01a5\5\0"+
    "\24\u01a7\3\0\1\u01a7\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01a8\5\0\24\u01a9\3\0"+
    "\1\u01a9\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01a9\5\0\24\u01a9\3\0\1\u01a9\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01a8\5\0"+
    "\24\u01aa\3\0\1\u01aa\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01ab\5\0\24\u01ac\3\0"+
    "\1\u01ac\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01ac\5\0\24\u01ac\3\0\1\u01ac\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01ab\5\0"+
    "\24\u01ad\3\0\1\u01ad\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01ae\5\0\24\u01af\3\0"+
    "\1\u01af\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01af\5\0\24\u01af\3\0\1\u01af\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01ae\5\0"+
    "\24\u01b0\3\0\1\u01b0\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01b1\5\0\24\u01b2\3\0"+
    "\1\u01b2\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01b2\5\0\24\u01b2\3\0\1\u01b2\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01b1\5\0"+
    "\24\u01b3\3\0\1\u01b3\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01b4\5\0\24\u01b5\3\0"+
    "\1\u01b5\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01b5\5\0\24\u01b5\3\0\1\u01b5\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01b4\5\0"+
    "\24\u01b6\3\0\1\u01b6\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01b7\5\0\24\u01b8\3\0"+
    "\1\u01b8\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01b8\5\0\24\u01b8\3\0\1\u01b8\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01b7\5\0"+
    "\24\u01b9\3\0\1\u01b9\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01ba\5\0\24\u01bb\3\0"+
    "\1\u01bb\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01bb\5\0\24\u01bb\3\0\1\u01bb\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01ba\5\0"+
    "\24\u01bc\3\0\1\u01bc\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01bd\5\0\24\u01be\3\0"+
    "\1\u01be\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01be\5\0\24\u01be\3\0\1\u01be\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01bd\5\0"+
    "\24\u01bf\3\0\1\u01bf\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01c0\5\0\24\u01c1\3\0"+
    "\1\u01c1\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01c1\5\0\24\u01c1\3\0\1\u01c1\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01c0\5\0"+
    "\24\u01c2\3\0\1\u01c2\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01c3\5\0\24\u01c4\3\0"+
    "\1\u01c4\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01c4\5\0\24\u01c4\3\0\1\u01c4\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01c3\5\0"+
    "\24\u01c5\3\0\1\u01c5\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01c6\5\0\24\u01c7\3\0"+
    "\1\u01c7\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01c7\5\0\24\u01c7\3\0\1\u01c7\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01c6\5\0"+
    "\24\u01c8\3\0\1\u01c8\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01c9\5\0\24\u01ca\3\0"+
    "\1\u01ca\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01ca\5\0\24\u01ca\3\0\1\u01ca\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01c9\5\0"+
    "\24\u01cb\3\0\1\u01cb\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01cc\5\0\24\u01cd\3\0"+
    "\1\u01cd\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01cd\5\0\24\u01cd\3\0\1\u01cd\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01cc\5\0"+
    "\24\u01ce\3\0\1\u01ce\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01cf\5\0\24\u01d0\3\0"+
    "\1\u01d0\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01d0\5\0\24\u01d0\3\0\1\u01d0\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01cf\5\0"+
    "\24\u01d1\3\0\1\u01d1\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01d2\5\0\24\u01d3\3\0"+
    "\1\u01d3\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01d3\5\0\24\u01d3\3\0\1\u01d3\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01d2\5\0"+
    "\24\u01d4\3\0\1\u01d4\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01d5\5\0\24\u01d6\3\0"+
    "\1\u01d6\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01d6\5\0\24\u01d6\3\0\1\u01d6\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01d5\5\0"+
    "\24\u01d7\3\0\1\u01d7\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01d8\5\0\24\u01d9\3\0"+
    "\1\u01d9\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01d9\5\0\24\u01d9\3\0\1\u01d9\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01d8\5\0"+
    "\24\u01da\3\0\1\u01da\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01db\5\0\24\u01dc\3\0"+
    "\1\u01dc\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01dc\5\0\24\u01dc\3\0\1\u01dc\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01db\5\0"+
    "\24\u01dd\3\0\1\u01dd\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01de\5\0\24\u01df\3\0"+
    "\1\u01df\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01df\5\0\24\u01df\3\0\1\u01df\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01de\5\0"+
    "\24\u01e0\3\0\1\u01e0\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01e1\5\0\24\u01e2\3\0"+
    "\1\u01e2\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01e2\5\0\24\u01e2\3\0\1\u01e2\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01e1\5\0"+
    "\24\u01e3\3\0\1\u01e3\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01e4\5\0\24\u01e5\3\0"+
    "\1\u01e5\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01e5\5\0\24\u01e5\3\0\1\u01e5\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01e4\5\0"+
    "\24\u01e6\3\0\1\u01e6\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01e7\5\0\24\u01e8\3\0"+
    "\1\u01e8\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01e8\5\0\24\u01e8\3\0\1\u01e8\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01e7\5\0"+
    "\24\u01e9\3\0\1\u01e9\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01ea\5\0\24\u01eb\3\0"+
    "\1\u01eb\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01eb\5\0\24\u01eb\3\0\1\u01eb\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01ea\5\0"+
    "\24\u01ec\3\0\1\u01ec\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01ed\5\0\24\u01ee\3\0"+
    "\1\u01ee\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01ee\5\0\24\u01ee\3\0\1\u01ee\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01ed\5\0"+
    "\24\u01ef\3\0\1\u01ef\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01f0\5\0\24\u01f1\3\0"+
    "\1\u01f1\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01f1\5\0\24\u01f1\3\0\1\u01f1\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01f0\5\0"+
    "\24\u01f2\3\0\1\u01f2\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01f3\5\0\24\u01f4\3\0"+
    "\1\u01f4\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01f4\5\0\24\u01f4\3\0\1\u01f4\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01f3\5\0"+
    "\24\u01f5\3\0\1\u01f5\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01f6\5\0\24\u01f7\3\0"+
    "\1\u01f7\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01f7\5\0\24\u01f7\3\0\1\u01f7\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01f6\5\0"+
    "\24\u01f8\3\0\1\u01f8\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01f9\5\0\24\u01fa\3\0"+
    "\1\u01fa\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01fa\5\0\24\u01fa\3\0\1\u01fa\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01f9\5\0"+
    "\24\u01fb\3\0\1\u01fb\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01fc\5\0\24\u01fd\3\0"+
    "\1\u01fd\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u01fd\5\0\24\u01fd\3\0\1\u01fd\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01fc\5\0"+
    "\24\u01fe\3\0\1\u01fe\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u01ff\5\0\24\u0200\3\0"+
    "\1\u0200\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0200\5\0\24\u0200\3\0\1\u0200\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u01ff\5\0"+
    "\24\u0201\3\0\1\u0201\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0202\5\0\24\u0203\3\0"+
    "\1\u0203\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0203\5\0\24\u0203\3\0\1\u0203\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0202\5\0"+
    "\24\u0204\3\0\1\u0204\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0205\5\0\24\u0206\3\0"+
    "\1\u0206\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0206\5\0\24\u0206\3\0\1\u0206\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0205\5\0"+
    "\24\u0207\3\0\1\u0207\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0208\5\0\24\u0209\3\0"+
    "\1\u0209\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0209\5\0\24\u0209\3\0\1\u0209\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0208\5\0"+
    "\24\u020a\3\0\1\u020a\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u020b\5\0\24\u020c\3\0"+
    "\1\u020c\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u020c\5\0\24\u020c\3\0\1\u020c\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u020b\5\0"+
    "\24\u020d\3\0\1\u020d\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u020e\5\0\24\u020f\3\0"+
    "\1\u020f\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u020f\5\0\24\u020f\3\0\1\u020f\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u020e\5\0"+
    "\24\u0210\3\0\1\u0210\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0211\5\0\24\u0212\3\0"+
    "\1\u0212\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0212\5\0\24\u0212\3\0\1\u0212\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0211\5\0"+
    "\24\u0213\3\0\1\u0213\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0214\5\0\24\u0215\3\0"+
    "\1\u0215\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0215\5\0\24\u0215\3\0\1\u0215\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0214\5\0"+
    "\24\u0216\3\0\1\u0216\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0217\5\0\24\u0218\3\0"+
    "\1\u0218\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0218\5\0\24\u0218\3\0\1\u0218\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0217\5\0"+
    "\24\u0219\3\0\1\u0219\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u021a\5\0\24\u021b\3\0"+
    "\1\u021b\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u021b\5\0\24\u021b\3\0\1\u021b\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u021a\5\0"+
    "\24\u021c\3\0\1\u021c\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u021d\5\0\24\u021e\3\0"+
    "\1\u021e\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u021e\5\0\24\u021e\3\0\1\u021e\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u021d\5\0"+
    "\24\u021f\3\0\1\u021f\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0220\5\0\24\u0221\3\0"+
    "\1\u0221\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0221\5\0\24\u0221\3\0\1\u0221\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0220\5\0"+
    "\24\u0222\3\0\1\u0222\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0223\5\0\24\u0224\3\0"+
    "\1\u0224\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0224\5\0\24\u0224\3\0\1\u0224\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0223\5\0"+
    "\24\u0225\3\0\1\u0225\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0226\5\0\24\u0227\3\0"+
    "\1\u0227\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0227\5\0\24\u0227\3\0\1\u0227\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0226\5\0"+
    "\24\u0228\3\0\1\u0228\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0229\5\0\24\u022a\3\0"+
    "\1\u022a\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u022a\5\0\24\u022a\3\0\1\u022a\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0229\5\0"+
    "\24\u022b\3\0\1\u022b\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u022c\5\0\24\u022d\3\0"+
    "\1\u022d\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u022d\5\0\24\u022d\3\0\1\u022d\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u022c\5\0"+
    "\24\u022e\3\0\1\u022e\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u022f\5\0\24\u0230\3\0"+
    "\1\u0230\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0230\5\0\24\u0230\3\0\1\u0230\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u022f\5\0"+
    "\24\u0231\3\0\1\u0231\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0232\5\0\24\u0233\3\0"+
    "\1\u0233\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0233\5\0\24\u0233\3\0\1\u0233\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0232\5\0"+
    "\24\u0234\3\0\1\u0234\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0235\5\0\24\u0236\3\0"+
    "\1\u0236\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0236\5\0\24\u0236\3\0\1\u0236\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0235\5\0"+
    "\24\u0237\3\0\1\u0237\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0238\5\0\24\u0239\3\0"+
    "\1\u0239\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0239\5\0\24\u0239\3\0\1\u0239\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0238\5\0"+
    "\24\u023a\3\0\1\u023a\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u023b\5\0\24\u023c\3\0"+
    "\1\u023c\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u023c\5\0\24\u023c\3\0\1\u023c\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u023b\5\0"+
    "\24\u023d\3\0\1\u023d\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u023e\5\0\24\u023f\3\0"+
    "\1\u023f\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u023f\5\0\24\u023f\3\0\1\u023f\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u023e\5\0"+
    "\24\u0240\3\0\1\u0240\4\0\1\64\11\0\1\64\1\0"+
    "\2\64\7\0\1\103\1\0\1\u0241\5\0\24\u0242\3\0"+
    "\1\u0242\4\0\1\64\11\0\1\64\1\0\2\64\11\0"+
    "\1\u0242\5\0\24\u0242\3\0\1\u0242\4\0\1\64\11\0"+
    "\1\64\1\0\2\64\7\0\1\114\1\0\1\u0241\5\0"+
    "\24\u0243\3\0\1\u0243\4\0\1\64\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[29241];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\2\11\7\1\1\11\2\1\1\11\6\1\1\11"+
    "\20\1\7\11\7\1\1\0\1\11\1\1\2\0\1\1"+
    "\1\0\2\11\1\0\1\11\2\1\2\0\3\1\4\11"+
    "\1\1\1\0\24\1\1\11\2\0\1\1\1\0\2\1"+
    "\2\11\1\0\1\1\2\0\2\1\1\0\1\1\1\0"+
    "\10\1\2\0\7\1\1\0\1\1\1\0\5\1\1\11"+
    "\2\0\1\11\1\0\15\1\2\11\1\1\1\0\4\1"+
    "\1\11\1\1\1\0\3\1\1\0\2\1\1\0\1\1"+
    "\1\0\7\1\1\11\1\1\1\11\4\1\1\11\2\1"+
    "\1\0\1\1\1\11\1\0\6\1\1\0\2\1\1\11"+
    "\1\0\5\1\2\0\4\1\1\11\1\0\u0165\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[579];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn, yytext());
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CodeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 57: break;
          case 2:
            { return symbol(sym.error);
            }
          // fall through
          case 58: break;
          case 3:
            { /* ignore */
            }
          // fall through
          case 59: break;
          case 4:
            { return symbol(sym.BALTASAR);
            }
          // fall through
          case 60: break;
          case 5:
            { return symbol(sym.GASPAR);
            }
          // fall through
          case 61: break;
          case 6:
            { return symbol(sym.ABRECUENTO);
            }
          // fall through
          case 62: break;
          case 7:
            { return symbol(sym.CIERRECUENTO);
            }
          // fall through
          case 63: break;
          case 8:
            { return symbol(sym.COMET);
            }
          // fall through
          case 64: break;
          case 9:
            { return symbol(sym.RUDOLPH);
            }
          // fall through
          case 65: break;
          case 10:
            { return symbol(sym.COMA);
            }
          // fall through
          case 66: break;
          case 11:
            { return symbol(sym.DASHER);
            }
          // fall through
          case 67: break;
          case 12:
            { return symbol(sym.VIXEN);
            }
          // fall through
          case 68: break;
          case 13:
            { return symbol(sym.L_PAPA_NOEL);
            }
          // fall through
          case 69: break;
          case 14:
            { return symbol(sym.DOS_PUNTOS);
            }
          // fall through
          case 70: break;
          case 15:
            { return symbol(sym.ZWARTE_PIET);
            }
          // fall through
          case 71: break;
          case 16:
            { return symbol(sym.PEPPER_MINSTIX);
            }
          // fall through
          case 72: break;
          case 17:
            { return symbol(sym.KRAMPUS);
            }
          // fall through
          case 73: break;
          case 18:
            { return new Symbol(sym.error, yyline, yycolumn, yytext());
            }
          // fall through
          case 74: break;
          case 19:
            { return new Symbol(sym.PERSONA, yyline, yycolumn, yytext());
            }
          // fall through
          case 75: break;
          case 20:
            { return symbol(sym.ABREEMPAQUE);
            }
          // fall through
          case 76: break;
          case 21:
            { return symbol(sym.CIERRAEMPAQUE);
            }
          // fall through
          case 77: break;
          case 22:
            { return symbol(sym.MELCHOR);
            }
          // fall through
          case 78: break;
          case 23:
            { return symbol(sym.ABREREGALO);
            }
          // fall through
          case 79: break;
          case 24:
            { return symbol(sym.FIN_REGALO);
            }
          // fall through
          case 80: break;
          case 25:
            { return symbol(sym.CIERRAREGALO);
            }
          // fall through
          case 81: break;
          case 26:
            { return symbol(sym.TOTIN);
            }
          // fall through
          case 82: break;
          case 27:
            { return new Symbol(sym.ERROR_IDENTIFICADOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 83: break;
          case 28:
            { return symbol(sym.L_SAN_NICOLAS);
            }
          // fall through
          case 84: break;
          case 29:
            { return symbol(sym.L_NINO_JESUS);
            }
          // fall through
          case 85: break;
          case 30:
            { return symbol(sym.RENILLO);
            }
          // fall through
          case 86: break;
          case 31:
            { return symbol(sym.GRINCH);
            }
          // fall through
          case 87: break;
          case 32:
            { return symbol(sym.QUIEN);
            }
          // fall through
          case 88: break;
          case 33:
            { return symbol(sym.ENTREGA);
            }
          // fall through
          case 89: break;
          case 34:
            { return symbol(sym.BELSNICKEL);
            }
          // fall through
          case 90: break;
          case 35:
            { return symbol(sym.SNOWBALL_ALABASTRO);
            }
          // fall through
          case 91: break;
          case 36:
            { return symbol(sym.KNECHT_RUPRECHT);
            }
          // fall through
          case 92: break;
          case 37:
            { return symbol(sym.HACE);
            }
          // fall through
          case 93: break;
          case 38:
            { return symbol(sym.ELFO);
            }
          // fall through
          case 94: break;
          case 39:
            { return symbol(sym.L_COLACHO);
            }
          // fall through
          case 95: break;
          case 40:
            { return symbol(sym.ENVUELVE);
            }
          // fall through
          case 96: break;
          case 41:
            { return symbol(sym.PAPA_NOEL);
            }
          // fall through
          case 97: break;
          case 42:
            { return symbol(sym.NINO_JESUS);
            }
          // fall through
          case 98: break;
          case 43:
            { return symbol(sym.HADA);
            }
          // fall through
          case 99: break;
          case 44:
            { return symbol(sym.DUENDE);
            }
          // fall through
          case 100: break;
          case 45:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 101: break;
          case 46:
            { return symbol(sym.ESCUCHA);
            }
          // fall through
          case 102: break;
          case 47:
            { return symbol(sym.L_SANTA_CLAUS);
            }
          // fall through
          case 103: break;
          case 48:
            { return symbol(sym.CORTA);
            }
          // fall through
          case 104: break;
          case 49:
            { return symbol(sym.COLACHO);
            }
          // fall through
          case 105: break;
          case 50:
            { return symbol(sym.LOCAL);
            }
          // fall through
          case 106: break;
          case 51:
            { return symbol(sym.NARRA);
            }
          // fall through
          case 107: break;
          case 52:
            { return symbol(sym.REVISA);
            }
          // fall through
          case 108: break;
          case 53:
            { return symbol(sym.ENVIA);
            }
          // fall through
          case 109: break;
          case 54:
            { return symbol(sym.SAN_NICOLAS);
            }
          // fall through
          case 110: break;
          case 55:
            { return symbol(sym.SANTA_CLAUS);
            }
          // fall through
          case 111: break;
          case 56:
            { return symbol(sym.FUNCTION);
            }
          // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
