// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexical/lexer.jflex

package lexical;

import syntaxis.sym;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class CodeLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\37\u0200\1\u0300\u10de\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\3\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\22\1\0"+
    "\1\23\1\24\1\25\1\7\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\40\1\47\1\50"+
    "\1\51\1\52\3\40\1\53\1\40\1\54\1\0\1\55"+
    "\1\56\1\40\1\0\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\40\1\47\1\50\1\51\1\52"+
    "\3\40\1\53\1\40\1\57\1\60\1\61\1\62\42\0"+
    "\1\7\37\0\1\63\7\0\1\63\3\0\1\63\3\0"+
    "\1\63\1\0\1\63\6\0\1\63\6\0\1\63\7\0"+
    "\1\63\3\0\1\63\3\0\1\63\1\0\1\63\6\0"+
    "\1\63\65\0\2\64\115\0\1\65\u01aa\0\1\66\325\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\2\3\1\4\1\2\1\5\2\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\2\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\16\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\4\2\1\33\1\0"+
    "\2\34\2\0\1\35\1\36\1\37\1\1\1\0\1\3"+
    "\1\0\1\1\1\15\1\33\1\40\1\41\1\42\1\43"+
    "\1\0\6\23\1\44\4\23\1\45\7\23\1\45\2\0"+
    "\1\1\1\0\2\33\1\1\1\0\1\1\2\0\1\1"+
    "\1\46\1\0\1\1\1\0\11\23\2\0\1\23\1\47"+
    "\1\23\1\50\2\23\1\0\1\23\1\0\4\23\1\50"+
    "\2\0\1\15\1\0\1\3\3\1\1\46\6\23\1\51"+
    "\1\52\1\53\1\52\1\53\3\23\2\54\1\23\1\0"+
    "\1\55\2\23\1\0\1\23\1\0\1\1\1\0\1\1"+
    "\1\46\3\23\1\56\1\23\2\57\1\60\1\23\1\61"+
    "\2\62\2\23\1\0\2\63\1\0\1\1\5\23\1\0"+
    "\1\64\2\65\1\0\3\23\1\66\1\23\2\0\3\23"+
    "\2\67\1\0\u0165\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[567];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\156\0\245\0\334\0\u0113\0\u014a"+
    "\0\334\0\u0181\0\u01b8\0\156\0\u01ef\0\u0226\0\156\0\u025d"+
    "\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\156\0\u03a7\0\u03de"+
    "\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596"+
    "\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\156\0\156"+
    "\0\156\0\156\0\156\0\156\0\156\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\334\0\u0113\0\156\0\u014a\0\u07f3\0\u082a\0\156"+
    "\0\156\0\156\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974"+
    "\0\u09ab\0\156\0\156\0\156\0\156\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0a50\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0a50\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\156\0\u0dc0\0\u0df7\0\u0e2e\0\u0785\0\u0e65\0\u07bc"+
    "\0\156\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0906\0\u0f78\0\u0faf"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167"+
    "\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\u10c2\0\u12e8"+
    "\0\u10c2\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\u1469"+
    "\0\u14a0\0\u14d7\0\156\0\u150e\0\u1545\0\156\0\u157c\0\u0f0a"+
    "\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734"+
    "\0\u176b\0\u17a2\0\u16fd\0\u16fd\0\u16fd\0\156\0\156\0\u17d9"+
    "\0\u1810\0\u1847\0\u16fd\0\156\0\u187e\0\u18b5\0\u16fd\0\u18ec"+
    "\0\u1923\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1a36"+
    "\0\u1aa4\0\u1adb\0\u1b12\0\u1b12\0\u1b49\0\u1b12\0\156\0\u1b12"+
    "\0\u1b80\0\u1b12\0\u1b12\0\156\0\u1bb7\0\u1bee\0\u1c25\0\u1b12"+
    "\0\156\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6"+
    "\0\u1ddd\0\u1d38\0\u1d38\0\156\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9"+
    "\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u2003"+
    "\0\156\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184"+
    "\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c"+
    "\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4"+
    "\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac"+
    "\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864"+
    "\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c"+
    "\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4"+
    "\0\u2c0b\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c"+
    "\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44"+
    "\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc"+
    "\0\u3133\0\u316a\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4"+
    "\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c"+
    "\0\u34a3\0\u34da\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624"+
    "\0\u365b\0\u3692\0\u36c9\0\u3700\0\u3737\0\u376e\0\u37a5\0\u37dc"+
    "\0\u3813\0\u384a\0\u3881\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994"+
    "\0\u39cb\0\u3a02\0\u3a39\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c"+
    "\0\u3b83\0\u3bba\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04"+
    "\0\u3d3b\0\u3d72\0\u3da9\0\u3de0\0\u3e17\0\u3e4e\0\u3e85\0\u3ebc"+
    "\0\u3ef3\0\u3f2a\0\u3f61\0\u3f98\0\u3fcf\0\u4006\0\u403d\0\u4074"+
    "\0\u40ab\0\u40e2\0\u4119\0\u4150\0\u4187\0\u41be\0\u41f5\0\u422c"+
    "\0\u4263\0\u429a\0\u42d1\0\u4308\0\u433f\0\u4376\0\u43ad\0\u43e4"+
    "\0\u441b\0\u4452\0\u4489\0\u44c0\0\u44f7\0\u452e\0\u4565\0\u459c"+
    "\0\u45d3\0\u460a\0\u4641\0\u4678\0\u46af\0\u46e6\0\u471d\0\u4754"+
    "\0\u478b\0\u47c2\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5\0\u490c"+
    "\0\u4943\0\u497a\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d\0\u4ac4"+
    "\0\u4afb\0\u4b32\0\u4b69\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45\0\u4c7c"+
    "\0\u4cb3\0\u4cea\0\u4d21\0\u4d58\0\u4d8f\0\u4dc6\0\u4dfd\0\u4e34"+
    "\0\u4e6b\0\u4ea2\0\u4ed9\0\u4f10\0\u4f47\0\u4f7e\0\u4fb5\0\u4fec"+
    "\0\u5023\0\u505a\0\u5091\0\u50c8\0\u50ff\0\u5136\0\u516d\0\u51a4"+
    "\0\u51db\0\u5212\0\u5249\0\u5280\0\u52b7\0\u52ee\0\u5325\0\u535c"+
    "\0\u5393\0\u53ca\0\u5401\0\u5438\0\u546f\0\u54a6\0\u54dd\0\u5514"+
    "\0\u554b\0\u5582\0\u55b9\0\u55f0\0\u5627\0\u565e\0\u5695\0\u56cc"+
    "\0\u5703\0\u573a\0\u5771\0\u57a8\0\u57df\0\u5816\0\u584d\0\u5884"+
    "\0\u58bb\0\u58f2\0\u5929\0\u5960\0\u5997\0\u59ce\0\u5a05\0\u5a3c"+
    "\0\u5a73\0\u5aaa\0\u5ae1\0\u5b18\0\u5b4f\0\u5b86\0\u5bbd\0\u5bf4"+
    "\0\u5c2b\0\u5c62\0\u5c99\0\u5cd0\0\u5d07\0\u5d3e\0\u5d75\0\u5dac"+
    "\0\u5de3\0\u5e1a\0\u5e51\0\u5e88\0\u5ebf\0\u5ef6\0\u5f2d\0\u5f64"+
    "\0\u5f9b\0\u5fd2\0\u6009\0\u6040\0\u6077\0\u60ae\0\u60e5\0\u611c"+
    "\0\u6153\0\u618a\0\u61c1\0\u61f8\0\u622f\0\u6266\0\u629d\0\u62d4"+
    "\0\u630b\0\u6342\0\u6379\0\u63b0\0\u63e7\0\u641e\0\u6455\0\u648c"+
    "\0\u64c3\0\u64fa\0\u6531\0\u6568\0\u659f\0\u65d6\0\u660d\0\u6644"+
    "\0\u667b\0\u66b2\0\u66e9\0\u6720\0\u6757\0\u678e\0\u67c5\0\u67fc"+
    "\0\u6833\0\u686a\0\u68a1\0\u68d8\0\u690f\0\u6946\0\u697d\0\u69b4"+
    "\0\u69eb\0\u6a22\0\u6a59\0\u6a90\0\u6ac7\0\u6afe\0\u6b35\0\u6b6c"+
    "\0\u6ba3\0\u6bda\0\u6c11\0\u6c48\0\u0e65\0\334\0\u07bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[567];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\37\1\40\2\37\1\41"+
    "\1\42\2\37\1\43\1\44\1\45\1\37\1\46\1\37"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\11"+
    "\1\56\1\57\5\3\1\11\1\3\2\11\1\12\6\3"+
    "\1\21\1\3\1\60\4\3\1\30\25\61\7\3\1\11"+
    "\3\3\71\0\1\4\70\0\1\62\1\0\2\62\11\0"+
    "\1\62\5\0\25\62\7\0\1\62\3\0\5\63\1\64"+
    "\61\63\4\0\1\62\1\0\2\62\11\0\1\65\5\0"+
    "\25\62\7\0\1\62\3\0\10\66\1\0\56\66\16\0"+
    "\1\67\63\0\1\70\67\0\1\71\70\0\1\72\71\0"+
    "\1\73\60\0\1\74\4\0\1\75\63\0\1\76\1\0"+
    "\1\77\1\0\1\100\5\0\25\101\7\0\1\62\27\0"+
    "\1\102\66\0\1\103\1\104\65\0\1\105\42\0\26\30"+
    "\1\0\40\30\4\0\1\62\1\0\2\62\7\0\1\106"+
    "\1\0\1\107\5\0\20\110\1\111\4\110\7\0\1\62"+
    "\7\0\1\62\1\0\2\62\7\0\1\106\1\0\1\107"+
    "\5\0\16\110\1\112\1\110\1\113\4\110\7\0\1\62"+
    "\7\0\1\62\1\0\2\62\7\0\1\106\1\0\1\107"+
    "\5\0\7\110\1\114\15\110\7\0\1\62\7\0\1\62"+
    "\1\0\2\62\7\0\1\106\1\0\1\107\5\0\16\110"+
    "\1\115\6\110\7\0\1\62\7\0\1\62\1\0\2\62"+
    "\7\0\1\106\1\0\1\107\5\0\13\110\1\116\11\110"+
    "\7\0\1\62\7\0\1\62\1\0\2\62\7\0\1\106"+
    "\1\0\1\107\5\0\13\110\1\117\2\110\1\120\4\110"+
    "\1\121\1\110\7\0\1\62\7\0\1\62\1\0\2\62"+
    "\7\0\1\106\1\0\1\107\5\0\25\110\7\0\1\62"+
    "\7\0\1\62\1\0\2\62\7\0\1\106\1\0\1\107"+
    "\5\0\5\110\1\122\7\110\1\123\7\110\7\0\1\62"+
    "\7\0\1\62\1\0\2\62\7\0\1\106\1\0\1\107"+
    "\5\0\16\110\1\124\6\110\7\0\1\62\7\0\1\62"+
    "\1\0\2\62\7\0\1\106\1\0\1\107\5\0\1\125"+
    "\24\110\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\107\5\0\20\110\1\126\4\110\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\107\5\0\4\110\1\127\20\110\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\107\5\0"+
    "\22\110\1\130\2\110\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\107\5\0\15\110\1\131"+
    "\7\110\7\0\1\62\37\0\1\132\7\0\1\133\73\0"+
    "\1\134\32\0\1\76\1\0\1\135\1\0\1\136\5\0"+
    "\25\101\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\137\5\0\25\140\7\0\1\62\3\0"+
    "\10\66\1\141\56\66\21\0\1\142\66\0\1\73\11\0"+
    "\1\143\33\0\13\144\1\145\53\144\2\75\1\4\1\5"+
    "\63\75\21\0\1\146\66\0\1\147\5\0\25\150\30\0"+
    "\1\76\1\0\1\151\1\0\1\100\5\0\25\101\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\146\1\0"+
    "\1\62\5\0\25\101\7\0\1\62\24\0\1\152\5\0"+
    "\25\150\17\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\153\5\0\25\154\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\153\5\0\25\155\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\153\5\0\20\155\1\156\4\155\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\153\5\0"+
    "\16\155\1\157\6\155\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\153\5\0\4\155\1\160"+
    "\20\155\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\153\5\0\1\161\24\155\7\0\1\62"+
    "\7\0\1\62\1\0\2\62\7\0\1\106\1\0\1\153"+
    "\5\0\10\155\1\162\10\155\1\163\3\155\7\0\1\62"+
    "\1\164\1\165\5\0\1\62\1\0\2\62\7\0\1\106"+
    "\1\0\1\153\5\0\16\155\1\166\6\155\7\0\1\62"+
    "\7\0\1\62\1\0\2\62\7\0\1\106\1\0\1\153"+
    "\5\0\20\155\1\167\4\155\7\0\1\62\7\0\1\62"+
    "\1\0\2\62\7\0\1\106\1\0\1\153\5\0\15\155"+
    "\1\170\7\155\7\0\1\62\7\0\1\62\1\0\2\62"+
    "\7\0\1\106\1\0\1\153\5\0\22\155\1\171\2\155"+
    "\7\0\1\62\7\0\1\62\1\0\2\62\7\0\1\106"+
    "\1\0\1\153\5\0\2\155\1\172\22\155\7\0\1\62"+
    "\7\0\1\62\1\0\2\62\7\0\1\106\1\0\1\153"+
    "\5\0\10\155\1\173\14\155\7\0\1\62\1\174\6\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\153\5\0"+
    "\10\155\1\175\14\155\7\0\1\62\1\176\6\0\1\62"+
    "\1\0\2\62\7\0\1\106\1\0\1\153\5\0\1\177"+
    "\21\155\1\200\2\155\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\153\5\0\20\155\1\201"+
    "\4\155\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\153\5\0\22\155\1\202\2\155\7\0"+
    "\1\62\54\0\1\203\64\0\1\204\40\0\1\205\5\0"+
    "\25\150\17\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\137\5\0\25\62\7\0\1\62\15\0\1\206\6\0"+
    "\1\142\63\0\1\146\2\0\1\146\45\0\13\144\1\207"+
    "\66\144\1\207\4\144\1\210\46\144\17\0\1\211\1\0"+
    "\1\147\5\0\4\212\1\213\20\212\34\0\1\146\5\0"+
    "\25\150\34\0\1\214\5\0\25\150\34\0\1\152\5\0"+
    "\25\212\17\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\215\5\0\25\216\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\216\5\0\25\216\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\215\5\0"+
    "\25\217\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\215\5\0\1\220\24\217\7\0\1\62"+
    "\7\0\1\62\1\0\2\62\7\0\1\106\1\0\1\215"+
    "\5\0\13\217\1\221\11\217\7\0\1\62\7\0\1\62"+
    "\1\0\2\62\7\0\1\106\1\0\1\215\5\0\1\222"+
    "\24\217\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\215\5\0\20\217\1\223\4\217\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\215\5\0\5\217\1\224\17\217\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\215\5\0"+
    "\4\217\1\225\20\217\7\0\1\62\37\0\1\226\65\0"+
    "\1\227\37\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\215\5\0\1\230\24\217\7\0\1\62\7\0\1\62"+
    "\1\0\2\62\7\0\1\106\1\0\1\215\5\0\2\217"+
    "\1\231\22\217\7\0\1\62\7\0\1\62\1\0\2\62"+
    "\7\0\1\106\1\0\1\215\5\0\1\232\24\217\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\215\5\0\15\217\1\233\7\217\7\0\1\62\47\0"+
    "\1\234\26\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\215\5\0\15\217\1\235\7\217\7\0\1\62\47\0"+
    "\1\236\26\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\215\5\0\3\217\1\237\21\217\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\215\5\0"+
    "\23\217\1\240\1\217\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\215\5\0\10\217\1\241"+
    "\14\217\7\0\1\62\1\242\6\0\1\62\1\0\2\62"+
    "\7\0\1\106\1\0\1\215\5\0\10\217\1\243\14\217"+
    "\7\0\1\62\1\244\41\0\1\242\24\0\1\242\21\0"+
    "\1\211\1\0\1\205\5\0\4\212\1\245\20\212\13\0"+
    "\13\144\1\207\4\144\1\4\46\144\17\0\1\211\1\0"+
    "\1\211\74\0\25\212\31\0\1\246\1\247\1\0\1\250"+
    "\5\0\25\212\32\0\1\211\1\0\1\214\5\0\4\212"+
    "\1\245\20\212\17\0\1\62\1\0\2\62\7\0\1\76"+
    "\1\0\1\251\5\0\25\252\7\0\1\62\7\0\1\62"+
    "\1\0\2\62\11\0\1\252\5\0\25\252\7\0\1\62"+
    "\7\0\1\62\1\0\2\62\7\0\1\106\1\0\1\251"+
    "\5\0\25\253\7\0\1\62\7\0\1\62\1\0\2\62"+
    "\7\0\1\106\1\0\1\251\5\0\24\253\1\254\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\251\5\0\4\253\1\255\20\253\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\251\5\0"+
    "\12\253\1\256\12\253\7\0\1\62\2\0\1\257\4\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\251\5\0"+
    "\22\253\1\260\2\253\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\251\5\0\22\253\1\261"+
    "\2\253\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\251\5\0\13\253\1\262\11\253\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\251\5\0\22\253\1\263\2\253\7\0\1\62\54\0"+
    "\1\264\21\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\251\5\0\20\253\1\265\4\253\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\251\5\0"+
    "\15\253\1\266\7\253\7\0\1\62\47\0\1\267\26\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\251\5\0"+
    "\13\253\1\270\11\253\7\0\1\62\45\0\1\271\42\0"+
    "\1\272\1\247\1\0\1\272\5\0\25\212\32\0\1\247"+
    "\1\0\1\250\66\0\1\273\51\0\1\62\1\0\2\62"+
    "\7\0\1\76\1\0\1\274\5\0\25\275\7\0\1\62"+
    "\7\0\1\62\1\0\2\62\11\0\1\275\5\0\25\275"+
    "\7\0\1\62\7\0\1\62\1\0\2\62\7\0\1\106"+
    "\1\0\1\274\5\0\25\276\7\0\1\62\7\0\1\62"+
    "\1\0\2\62\7\0\1\106\1\0\1\274\5\0\1\277"+
    "\24\276\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\274\5\0\10\276\1\300\14\276\7\0"+
    "\1\62\1\301\6\0\1\62\1\0\2\62\7\0\1\106"+
    "\1\0\1\274\5\0\15\276\1\302\7\276\7\0\1\62"+
    "\7\0\1\62\1\0\2\62\7\0\1\106\1\0\1\274"+
    "\5\0\6\276\1\303\16\276\7\0\1\62\40\0\1\304"+
    "\50\0\1\247\1\0\1\272\64\0\1\305\1\0\1\273"+
    "\51\0\1\62\1\0\2\62\7\0\1\76\1\0\1\306"+
    "\5\0\25\307\7\0\1\62\7\0\1\62\1\0\2\62"+
    "\11\0\1\307\5\0\25\307\7\0\1\62\7\0\1\62"+
    "\1\0\2\62\7\0\1\106\1\0\1\306\5\0\25\310"+
    "\7\0\1\62\7\0\1\62\1\0\2\62\7\0\1\106"+
    "\1\0\1\306\5\0\15\310\1\311\7\310\7\0\1\62"+
    "\7\0\1\62\1\0\2\62\7\0\1\106\1\0\1\306"+
    "\5\0\16\310\1\312\6\310\7\0\1\62\50\0\1\313"+
    "\42\0\1\314\51\0\1\62\1\0\2\62\7\0\1\76"+
    "\1\0\1\315\5\0\25\316\7\0\1\62\7\0\1\62"+
    "\1\0\2\62\11\0\1\316\5\0\25\316\7\0\1\62"+
    "\7\0\1\62\1\0\2\62\7\0\1\106\1\0\1\315"+
    "\5\0\25\317\7\0\1\62\7\0\1\62\1\0\2\62"+
    "\7\0\1\106\1\0\1\315\5\0\15\317\1\320\7\317"+
    "\7\0\1\62\47\0\1\321\43\0\1\314\11\0\1\322"+
    "\37\0\1\62\1\0\2\62\7\0\1\76\1\0\1\323"+
    "\5\0\25\324\7\0\1\62\7\0\1\62\1\0\2\62"+
    "\11\0\1\324\5\0\25\324\7\0\1\62\7\0\1\62"+
    "\1\0\2\62\7\0\1\106\1\0\1\323\5\0\25\325"+
    "\7\0\1\62\21\0\1\272\1\247\1\0\1\272\51\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\326\5\0"+
    "\25\327\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\327\5\0\25\327\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\326\5\0\25\330\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\331\5\0\25\332\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\332\5\0\25\332\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\331\5\0"+
    "\25\333\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\334\5\0\25\335\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\335\5\0\25\335\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\334\5\0\25\336\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\337\5\0\25\340\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\340\5\0"+
    "\25\340\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\337\5\0\25\341\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\342\5\0"+
    "\25\343\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\343\5\0\25\343\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\342\5\0\25\344\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\345\5\0\25\346\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\346\5\0\25\346\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\345\5\0"+
    "\25\347\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\350\5\0\25\351\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\351\5\0\25\351\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\350\5\0\25\352\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\353\5\0\25\354\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\354\5\0"+
    "\25\354\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\353\5\0\25\355\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\356\5\0"+
    "\25\357\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\357\5\0\25\357\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\356\5\0\25\360\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\361\5\0\25\362\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\362\5\0\25\362\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\361\5\0"+
    "\25\363\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\364\5\0\25\365\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\365\5\0\25\365\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\364\5\0\25\366\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\367\5\0\25\370\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\370\5\0"+
    "\25\370\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\367\5\0\25\371\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\372\5\0"+
    "\25\373\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\373\5\0\25\373\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\372\5\0\25\374\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\375\5\0\25\376\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\376\5\0\25\376\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\375\5\0"+
    "\25\377\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u0100\5\0\25\u0101\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u0101\5\0\25\u0101\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u0100\5\0\25\u0102\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u0103\5\0\25\u0104\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u0104\5\0"+
    "\25\u0104\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u0103\5\0\25\u0105\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u0106\5\0"+
    "\25\u0107\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u0107\5\0\25\u0107\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u0106\5\0\25\u0108\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u0109\5\0\25\u010a\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u010a\5\0\25\u010a\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u0109\5\0"+
    "\25\u010b\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u010c\5\0\25\u010d\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u010d\5\0\25\u010d\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u010c\5\0\25\u010e\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u010f\5\0\25\u0110\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u0110\5\0"+
    "\25\u0110\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u010f\5\0\25\u0111\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u0112\5\0"+
    "\25\u0113\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u0113\5\0\25\u0113\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u0112\5\0\25\u0114\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u0115\5\0\25\u0116\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u0116\5\0\25\u0116\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u0115\5\0"+
    "\25\u0117\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u0118\5\0\25\u0119\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u0119\5\0\25\u0119\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u0118\5\0\25\u011a\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u011b\5\0\25\u011c\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u011c\5\0"+
    "\25\u011c\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u011b\5\0\25\u011d\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u011e\5\0"+
    "\25\u011f\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u011f\5\0\25\u011f\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u011e\5\0\25\u0120\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u0121\5\0\25\u0122\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u0122\5\0\25\u0122\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u0121\5\0"+
    "\25\u0123\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u0124\5\0\25\u0125\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u0125\5\0\25\u0125\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u0124\5\0\25\u0126\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u0127\5\0\25\u0128\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u0128\5\0"+
    "\25\u0128\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u0127\5\0\25\u0129\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u012a\5\0"+
    "\25\u012b\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u012b\5\0\25\u012b\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u012a\5\0\25\u012c\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u012d\5\0\25\u012e\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u012e\5\0\25\u012e\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u012d\5\0"+
    "\25\u012f\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u0130\5\0\25\u0131\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u0131\5\0\25\u0131\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u0130\5\0\25\u0132\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u0133\5\0\25\u0134\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u0134\5\0"+
    "\25\u0134\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u0133\5\0\25\u0135\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u0136\5\0"+
    "\25\u0137\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u0137\5\0\25\u0137\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u0136\5\0\25\u0138\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u0139\5\0\25\u013a\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u013a\5\0\25\u013a\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u0139\5\0"+
    "\25\u013b\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u013c\5\0\25\u013d\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u013d\5\0\25\u013d\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u013c\5\0\25\u013e\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u013f\5\0\25\u0140\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u0140\5\0"+
    "\25\u0140\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u013f\5\0\25\u0141\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u0142\5\0"+
    "\25\u0143\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u0143\5\0\25\u0143\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u0142\5\0\25\u0144\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u0145\5\0\25\u0146\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u0146\5\0\25\u0146\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u0145\5\0"+
    "\25\u0147\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u0148\5\0\25\u0149\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u0149\5\0\25\u0149\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u0148\5\0\25\u014a\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u014b\5\0\25\u014c\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u014c\5\0"+
    "\25\u014c\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u014b\5\0\25\u014d\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u014e\5\0"+
    "\25\u014f\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u014f\5\0\25\u014f\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u014e\5\0\25\u0150\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u0151\5\0\25\u0152\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u0152\5\0\25\u0152\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u0151\5\0"+
    "\25\u0153\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u0154\5\0\25\u0155\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u0155\5\0\25\u0155\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u0154\5\0\25\u0156\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u0157\5\0\25\u0158\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u0158\5\0"+
    "\25\u0158\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u0157\5\0\25\u0159\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u015a\5\0"+
    "\25\u015b\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u015b\5\0\25\u015b\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u015a\5\0\25\u015c\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u015d\5\0\25\u015e\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u015e\5\0\25\u015e\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u015d\5\0"+
    "\25\u015f\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u0160\5\0\25\u0161\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u0161\5\0\25\u0161\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u0160\5\0\25\u0162\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u0163\5\0\25\u0164\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u0164\5\0"+
    "\25\u0164\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u0163\5\0\25\u0165\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u0166\5\0"+
    "\25\u0167\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u0167\5\0\25\u0167\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u0166\5\0\25\u0168\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u0169\5\0\25\u016a\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u016a\5\0\25\u016a\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u0169\5\0"+
    "\25\u016b\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u016c\5\0\25\u016d\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u016d\5\0\25\u016d\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u016c\5\0\25\u016e\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u016f\5\0\25\u0170\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u0170\5\0"+
    "\25\u0170\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u016f\5\0\25\u0171\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u0172\5\0"+
    "\25\u0173\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u0173\5\0\25\u0173\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u0172\5\0\25\u0174\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u0175\5\0\25\u0176\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u0176\5\0\25\u0176\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u0175\5\0"+
    "\25\u0177\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u0178\5\0\25\u0179\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u0179\5\0\25\u0179\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u0178\5\0\25\u017a\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u017b\5\0\25\u017c\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u017c\5\0"+
    "\25\u017c\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u017b\5\0\25\u017d\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u017e\5\0"+
    "\25\u017f\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u017f\5\0\25\u017f\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u017e\5\0\25\u0180\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u0181\5\0\25\u0182\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u0182\5\0\25\u0182\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u0181\5\0"+
    "\25\u0183\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u0184\5\0\25\u0185\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u0185\5\0\25\u0185\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u0184\5\0\25\u0186\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u0187\5\0\25\u0188\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u0188\5\0"+
    "\25\u0188\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u0187\5\0\25\u0189\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u018a\5\0"+
    "\25\u018b\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u018b\5\0\25\u018b\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u018a\5\0\25\u018c\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u018d\5\0\25\u018e\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u018e\5\0\25\u018e\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u018d\5\0"+
    "\25\u018f\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u0190\5\0\25\u0191\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u0191\5\0\25\u0191\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u0190\5\0\25\u0192\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u0193\5\0\25\u0194\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u0194\5\0"+
    "\25\u0194\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u0193\5\0\25\u0195\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u0196\5\0"+
    "\25\u0197\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u0197\5\0\25\u0197\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u0196\5\0\25\u0198\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u0199\5\0\25\u019a\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u019a\5\0\25\u019a\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u0199\5\0"+
    "\25\u019b\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u019c\5\0\25\u019d\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u019d\5\0\25\u019d\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u019c\5\0\25\u019e\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u019f\5\0\25\u01a0\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u01a0\5\0"+
    "\25\u01a0\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u019f\5\0\25\u01a1\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u01a2\5\0"+
    "\25\u01a3\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u01a3\5\0\25\u01a3\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u01a2\5\0\25\u01a4\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u01a5\5\0\25\u01a6\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u01a6\5\0\25\u01a6\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u01a5\5\0"+
    "\25\u01a7\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u01a8\5\0\25\u01a9\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u01a9\5\0\25\u01a9\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u01a8\5\0\25\u01aa\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u01ab\5\0\25\u01ac\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u01ac\5\0"+
    "\25\u01ac\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u01ab\5\0\25\u01ad\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u01ae\5\0"+
    "\25\u01af\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u01af\5\0\25\u01af\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u01ae\5\0\25\u01b0\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u01b1\5\0\25\u01b2\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u01b2\5\0\25\u01b2\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u01b1\5\0"+
    "\25\u01b3\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u01b4\5\0\25\u01b5\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u01b5\5\0\25\u01b5\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u01b4\5\0\25\u01b6\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u01b7\5\0\25\u01b8\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u01b8\5\0"+
    "\25\u01b8\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u01b7\5\0\25\u01b9\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u01ba\5\0"+
    "\25\u01bb\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u01bb\5\0\25\u01bb\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u01ba\5\0\25\u01bc\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u01bd\5\0\25\u01be\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u01be\5\0\25\u01be\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u01bd\5\0"+
    "\25\u01bf\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u01c0\5\0\25\u01c1\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u01c1\5\0\25\u01c1\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u01c0\5\0\25\u01c2\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u01c3\5\0\25\u01c4\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u01c4\5\0"+
    "\25\u01c4\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u01c3\5\0\25\u01c5\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u01c6\5\0"+
    "\25\u01c7\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u01c7\5\0\25\u01c7\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u01c6\5\0\25\u01c8\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u01c9\5\0\25\u01ca\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u01ca\5\0\25\u01ca\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u01c9\5\0"+
    "\25\u01cb\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u01cc\5\0\25\u01cd\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u01cd\5\0\25\u01cd\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u01cc\5\0\25\u01ce\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u01cf\5\0\25\u01d0\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u01d0\5\0"+
    "\25\u01d0\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u01cf\5\0\25\u01d1\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u01d2\5\0"+
    "\25\u01d3\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u01d3\5\0\25\u01d3\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u01d2\5\0\25\u01d4\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u01d5\5\0\25\u01d6\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u01d6\5\0\25\u01d6\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u01d5\5\0"+
    "\25\u01d7\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u01d8\5\0\25\u01d9\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u01d9\5\0\25\u01d9\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u01d8\5\0\25\u01da\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u01db\5\0\25\u01dc\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u01dc\5\0"+
    "\25\u01dc\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u01db\5\0\25\u01dd\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u01de\5\0"+
    "\25\u01df\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u01df\5\0\25\u01df\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u01de\5\0\25\u01e0\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u01e1\5\0\25\u01e2\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u01e2\5\0\25\u01e2\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u01e1\5\0"+
    "\25\u01e3\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u01e4\5\0\25\u01e5\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u01e5\5\0\25\u01e5\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u01e4\5\0\25\u01e6\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u01e7\5\0\25\u01e8\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u01e8\5\0"+
    "\25\u01e8\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u01e7\5\0\25\u01e9\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u01ea\5\0"+
    "\25\u01eb\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u01eb\5\0\25\u01eb\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u01ea\5\0\25\u01ec\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u01ed\5\0\25\u01ee\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u01ee\5\0\25\u01ee\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u01ed\5\0"+
    "\25\u01ef\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u01f0\5\0\25\u01f1\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u01f1\5\0\25\u01f1\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u01f0\5\0\25\u01f2\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u01f3\5\0\25\u01f4\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u01f4\5\0"+
    "\25\u01f4\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u01f3\5\0\25\u01f5\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u01f6\5\0"+
    "\25\u01f7\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u01f7\5\0\25\u01f7\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u01f6\5\0\25\u01f8\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u01f9\5\0\25\u01fa\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u01fa\5\0\25\u01fa\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u01f9\5\0"+
    "\25\u01fb\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u01fc\5\0\25\u01fd\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u01fd\5\0\25\u01fd\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u01fc\5\0\25\u01fe\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u01ff\5\0\25\u0200\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u0200\5\0"+
    "\25\u0200\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u01ff\5\0\25\u0201\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u0202\5\0"+
    "\25\u0203\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u0203\5\0\25\u0203\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u0202\5\0\25\u0204\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u0205\5\0\25\u0206\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u0206\5\0\25\u0206\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u0205\5\0"+
    "\25\u0207\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u0208\5\0\25\u0209\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u0209\5\0\25\u0209\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u0208\5\0\25\u020a\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u020b\5\0\25\u020c\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u020c\5\0"+
    "\25\u020c\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u020b\5\0\25\u020d\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u020e\5\0"+
    "\25\u020f\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u020f\5\0\25\u020f\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u020e\5\0\25\u0210\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u0211\5\0\25\u0212\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u0212\5\0\25\u0212\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u0211\5\0"+
    "\25\u0213\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u0214\5\0\25\u0215\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u0215\5\0\25\u0215\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u0214\5\0\25\u0216\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u0217\5\0\25\u0218\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u0218\5\0"+
    "\25\u0218\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u0217\5\0\25\u0219\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u021a\5\0"+
    "\25\u021b\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u021b\5\0\25\u021b\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u021a\5\0\25\u021c\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u021d\5\0\25\u021e\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u021e\5\0\25\u021e\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u021d\5\0"+
    "\25\u021f\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u0220\5\0\25\u0221\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u0221\5\0\25\u0221\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u0220\5\0\25\u0222\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u0223\5\0\25\u0224\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u0224\5\0"+
    "\25\u0224\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u0223\5\0\25\u0225\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u0226\5\0"+
    "\25\u0227\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u0227\5\0\25\u0227\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u0226\5\0\25\u0228\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u0229\5\0\25\u022a\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u022a\5\0\25\u022a\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u0229\5\0"+
    "\25\u022b\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\76\1\0\1\u022c\5\0\25\u022d\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\11\0\1\u022d\5\0\25\u022d\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\106\1\0"+
    "\1\u022c\5\0\25\u022e\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\76\1\0\1\u022f\5\0\25\u0230\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\11\0\1\u0230\5\0"+
    "\25\u0230\7\0\1\62\7\0\1\62\1\0\2\62\7\0"+
    "\1\106\1\0\1\u022f\5\0\25\u0231\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\76\1\0\1\u0232\5\0"+
    "\25\u0233\7\0\1\62\7\0\1\62\1\0\2\62\11\0"+
    "\1\u0233\5\0\25\u0233\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\7\0\1\106\1\0\1\u0232\5\0\25\u0234\7\0"+
    "\1\62\7\0\1\62\1\0\2\62\7\0\1\76\1\0"+
    "\1\u0235\5\0\25\u0236\7\0\1\62\7\0\1\62\1\0"+
    "\2\62\11\0\1\u0236\5\0\25\u0236\7\0\1\62\7\0"+
    "\1\62\1\0\2\62\7\0\1\106\1\0\1\u0235\5\0"+
    "\25\u0237\7\0\1\62\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[27775];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\2\11\7\1\1\11\2\1\1\11\6\1\1\11"+
    "\20\1\7\11\5\1\1\0\1\11\1\1\2\0\3\11"+
    "\1\1\1\0\1\1\1\0\3\1\4\11\1\0\23\1"+
    "\1\11\2\0\1\1\1\0\2\1\1\11\1\0\1\1"+
    "\2\0\2\1\1\0\1\1\1\0\11\1\2\0\6\1"+
    "\1\0\1\1\1\0\4\1\1\11\2\0\1\11\1\0"+
    "\16\1\2\11\4\1\1\11\1\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\1\0\10\1\1\11\4\1\1\11"+
    "\2\1\1\0\1\1\1\11\1\0\6\1\1\0\2\1"+
    "\1\11\1\0\5\1\2\0\4\1\1\11\1\0\u0165\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[567];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn, yytext());
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CodeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 56: break;
          case 2:
            { return symbol(sym.error);
            }
          // fall through
          case 57: break;
          case 3:
            { /* ignore */
            }
          // fall through
          case 58: break;
          case 4:
            { return symbol(sym.BALTASAR);
            }
          // fall through
          case 59: break;
          case 5:
            { return symbol(sym.GASPAR);
            }
          // fall through
          case 60: break;
          case 6:
            { return symbol(sym.ABRECUENTO);
            }
          // fall through
          case 61: break;
          case 7:
            { return symbol(sym.CIERRECUENTO);
            }
          // fall through
          case 62: break;
          case 8:
            { return symbol(sym.COMET);
            }
          // fall through
          case 63: break;
          case 9:
            { return symbol(sym.RUDOLPH);
            }
          // fall through
          case 64: break;
          case 10:
            { return symbol(sym.COMA);
            }
          // fall through
          case 65: break;
          case 11:
            { return symbol(sym.DASHER);
            }
          // fall through
          case 66: break;
          case 12:
            { return symbol(sym.VIXEN);
            }
          // fall through
          case 67: break;
          case 13:
            { return symbol(sym.L_PAPA_NOEL);
            }
          // fall through
          case 68: break;
          case 14:
            { return symbol(sym.DOS_PUNTOS);
            }
          // fall through
          case 69: break;
          case 15:
            { return symbol(sym.ZWARTE_PIET);
            }
          // fall through
          case 70: break;
          case 16:
            { return symbol(sym.PEPPER_MINSTIX);
            }
          // fall through
          case 71: break;
          case 17:
            { return symbol(sym.KRAMPUS);
            }
          // fall through
          case 72: break;
          case 18:
            { return new Symbol(sym.error, yyline, yycolumn, yytext());
            }
          // fall through
          case 73: break;
          case 19:
            { return new Symbol(sym.PERSONA, yyline, yycolumn, yytext());
            }
          // fall through
          case 74: break;
          case 20:
            { return symbol(sym.ABREEMPAQUE);
            }
          // fall through
          case 75: break;
          case 21:
            { return symbol(sym.CIERRAEMPAQUE);
            }
          // fall through
          case 76: break;
          case 22:
            { return symbol(sym.MELCHOR);
            }
          // fall through
          case 77: break;
          case 23:
            { return symbol(sym.ABREREGALO);
            }
          // fall through
          case 78: break;
          case 24:
            { return symbol(sym.FIN_REGALO);
            }
          // fall through
          case 79: break;
          case 25:
            { return symbol(sym.CIERRAREGALO);
            }
          // fall through
          case 80: break;
          case 26:
            { return symbol(sym.TOTIN);
            }
          // fall through
          case 81: break;
          case 27:
            { return new Symbol(sym.ERROR_IDENTIFICADOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 82: break;
          case 28:
            { return symbol(sym.L_SAN_NICOLAS);
            }
          // fall through
          case 83: break;
          case 29:
            { return symbol(sym.RENILLO);
            }
          // fall through
          case 84: break;
          case 30:
            { return symbol(sym.GRINCH);
            }
          // fall through
          case 85: break;
          case 31:
            { return symbol(sym.QUIEN);
            }
          // fall through
          case 86: break;
          case 32:
            { return symbol(sym.ENTREGA);
            }
          // fall through
          case 87: break;
          case 33:
            { return symbol(sym.BELSNICKEL);
            }
          // fall through
          case 88: break;
          case 34:
            { return symbol(sym.SNOWBALL_ALABASTRO);
            }
          // fall through
          case 89: break;
          case 35:
            { return symbol(sym.KNECHT_RUPRECHT);
            }
          // fall through
          case 90: break;
          case 36:
            { return symbol(sym.HACE);
            }
          // fall through
          case 91: break;
          case 37:
            { return symbol(sym.ELFO);
            }
          // fall through
          case 92: break;
          case 38:
            { return symbol(sym.L_COLACHO);
            }
          // fall through
          case 93: break;
          case 39:
            { return symbol(sym.ENVUELVE);
            }
          // fall through
          case 94: break;
          case 40:
            { return symbol(sym.PAPA_NOEL);
            }
          // fall through
          case 95: break;
          case 41:
            { return symbol(sym.NINO_JESUS);
            }
          // fall through
          case 96: break;
          case 42:
            { return symbol(sym.HADA);
            }
          // fall through
          case 97: break;
          case 43:
            { return symbol(sym.DUENDE);
            }
          // fall through
          case 98: break;
          case 44:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 99: break;
          case 45:
            { return symbol(sym.ESCUCHA);
            }
          // fall through
          case 100: break;
          case 46:
            { return symbol(sym.SANTA);
            }
          // fall through
          case 101: break;
          case 47:
            { return symbol(sym.CORTA);
            }
          // fall through
          case 102: break;
          case 48:
            { return symbol(sym.COLACHO);
            }
          // fall through
          case 103: break;
          case 49:
            { return symbol(sym.LOCAL);
            }
          // fall through
          case 104: break;
          case 50:
            { return symbol(sym.NARRA);
            }
          // fall through
          case 105: break;
          case 51:
            { return symbol(sym.REVISA);
            }
          // fall through
          case 106: break;
          case 52:
            { return symbol(sym.ENVIA);
            }
          // fall through
          case 107: break;
          case 53:
            { return symbol(sym.SAN_NICOLAS);
            }
          // fall through
          case 108: break;
          case 54:
            { return symbol(sym.SANTA_CLAUS);
            }
          // fall through
          case 109: break;
          case 55:
            { return symbol(sym.FUNCTION);
            }
          // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
