// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexical/lexer.jflex

package lexical;

import syntaxis.sym;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class CodeLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\37\u0200\1\u0300\u10de\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\4\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\12\17\1\20\1\0\1\21"+
    "\1\22\1\23\2\0\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\35\1\44\1\45\1\46\1\47"+
    "\3\35\1\50\1\35\1\51\1\0\1\52\1\53\1\35"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\35\1\44\1\45\1\46\1\47\3\35\1\50"+
    "\1\35\1\54\1\55\1\56\1\57\261\0\2\60\115\0"+
    "\1\61\u01aa\0\1\62\325\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\16\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\2\1\1\0\2\31\1\0\1\32\1\33"+
    "\1\34\1\0\1\2\1\0\1\14\1\35\1\36\1\37"+
    "\1\40\5\21\1\41\4\21\1\42\7\21\1\42\5\0"+
    "\1\43\1\0\7\21\2\0\1\21\1\44\1\21\1\45"+
    "\2\21\1\0\1\21\1\0\4\21\1\45\1\0\1\14"+
    "\1\0\1\2\1\0\1\43\4\21\1\46\1\47\1\50"+
    "\1\47\1\50\3\21\2\51\1\21\1\0\1\52\2\21"+
    "\1\0\1\21\1\0\1\21\1\53\1\21\2\54\1\55"+
    "\1\21\1\56\2\57\2\21\1\0\2\60\3\21\1\0"+
    "\1\61\2\62\1\21\1\63\1\21\1\0\1\21\2\64"+
    "\167\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\146\0\231\0\146\0\314\0\377"+
    "\0\u0132\0\146\0\u0165\0\u0198\0\146\0\u01cb\0\u01fe\0\u0231"+
    "\0\u0264\0\u0297\0\146\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e"+
    "\0\u0561\0\u0594\0\146\0\146\0\146\0\146\0\146\0\146"+
    "\0\146\0\u05c7\0\u05fa\0\314\0\146\0\377\0\u062d\0\146"+
    "\0\146\0\146\0\u0660\0\u0693\0\u06c6\0\u06f9\0\146\0\146"+
    "\0\146\0\146\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u072c"+
    "\0\u082b\0\u085e\0\u0891\0\u08c4\0\u072c\0\u08f7\0\u092a\0\u095d"+
    "\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\146\0\u0a5c\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0bc1\0\u0dbf"+
    "\0\u0bc1\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24"+
    "\0\u0f57\0\u0f8a\0\146\0\u0fbd\0\146\0\u0ff0\0\u0af5\0\u1023"+
    "\0\u0b8e\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1056\0\u1056\0\u1056"+
    "\0\146\0\146\0\u1122\0\u1155\0\u1188\0\u1056\0\146\0\u11bb"+
    "\0\u11ee\0\u1056\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320"+
    "\0\u1320\0\u1353\0\u1320\0\146\0\u1320\0\u1386\0\u1320\0\u1320"+
    "\0\146\0\u13b9\0\u13ec\0\u141f\0\u1320\0\146\0\u1452\0\u1485"+
    "\0\u14b8\0\u14eb\0\u1452\0\u1452\0\146\0\u151e\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15b7\0\146\0\u15ea\0\u161d\0\u1650\0\u1683"+
    "\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b"+
    "\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3"+
    "\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b"+
    "\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3"+
    "\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b"+
    "\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013"+
    "\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145\0\u2178\0\u21ab"+
    "\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\u2343"+
    "\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8\0\u24db"+
    "\0\u250e\0\u2541\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673"+
    "\0\u26a6\0\u26d9\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b"+
    "\0\u283e\0\u2871\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\u29a3"+
    "\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\u2b08\0\u2b3b"+
    "\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d\0\u2ca0\0\u2cd3"+
    "\0\u2d06\0\u2d39\0\146";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\3\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\2\33\1\34\2\33\1\35\1\36\2\33\1\37"+
    "\1\40\1\41\1\33\1\42\1\33\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\64\3\65\0"+
    "\1\4\60\0\5\54\1\55\55\54\17\0\1\56\57\0"+
    "\1\57\57\0\1\60\63\0\1\61\64\0\1\62\57\0"+
    "\1\63\4\0\1\64\61\0\1\65\1\0\1\66\65\0"+
    "\1\67\62\0\1\70\1\71\61\0\1\72\57\0\1\73"+
    "\4\0\20\73\1\74\4\73\31\0\1\73\4\0\16\73"+
    "\1\75\1\73\1\76\4\73\31\0\1\73\4\0\7\73"+
    "\1\77\15\73\31\0\1\73\4\0\16\73\1\100\6\73"+
    "\31\0\1\73\4\0\13\73\1\101\11\73\31\0\1\73"+
    "\4\0\13\73\1\102\2\73\1\103\4\73\1\104\1\73"+
    "\31\0\1\73\4\0\25\73\31\0\1\73\4\0\5\73"+
    "\1\105\7\73\1\106\7\73\31\0\1\73\4\0\16\73"+
    "\1\107\6\73\31\0\1\73\4\0\1\110\24\73\31\0"+
    "\1\73\4\0\20\73\1\111\4\73\31\0\1\73\4\0"+
    "\4\73\1\112\20\73\31\0\1\73\4\0\22\73\1\113"+
    "\2\73\31\0\1\73\4\0\15\73\1\114\7\73\43\0"+
    "\1\115\7\0\1\116\67\0\1\117\33\0\1\120\43\0"+
    "\11\121\1\122\51\121\2\64\1\4\1\5\57\64\17\0"+
    "\1\123\60\0\1\124\1\0\1\66\62\0\1\125\4\0"+
    "\25\125\31\0\1\125\4\0\20\125\1\126\4\125\31\0"+
    "\1\125\4\0\16\125\1\127\6\125\31\0\1\125\4\0"+
    "\4\125\1\130\20\125\31\0\1\125\4\0\1\131\24\125"+
    "\31\0\1\125\4\0\10\125\1\132\10\125\1\133\3\125"+
    "\7\0\1\134\1\135\20\0\1\125\4\0\16\125\1\136"+
    "\6\125\31\0\1\125\4\0\20\125\1\137\4\125\31\0"+
    "\1\125\4\0\15\125\1\140\7\125\31\0\1\125\4\0"+
    "\22\125\1\141\2\125\31\0\1\125\4\0\2\125\1\142"+
    "\22\125\31\0\1\125\4\0\10\125\1\143\14\125\7\0"+
    "\1\144\21\0\1\125\4\0\10\125\1\145\14\125\7\0"+
    "\1\146\21\0\1\125\4\0\1\147\21\125\1\150\2\125"+
    "\31\0\1\125\4\0\20\125\1\151\4\125\31\0\1\125"+
    "\4\0\22\125\1\152\2\125\60\0\1\153\60\0\1\154"+
    "\26\0\1\155\6\0\1\120\43\0\11\121\1\156\62\121"+
    "\1\156\4\121\1\157\44\121\17\0\1\123\10\0\1\160"+
    "\51\0\1\161\62\0\1\162\4\0\25\162\31\0\1\162"+
    "\4\0\1\163\24\162\31\0\1\162\4\0\13\162\1\164"+
    "\11\162\31\0\1\162\4\0\1\165\24\162\31\0\1\162"+
    "\4\0\20\162\1\166\4\162\31\0\1\162\4\0\5\162"+
    "\1\167\17\162\31\0\1\162\4\0\4\162\1\170\20\162"+
    "\43\0\1\171\61\0\1\172\51\0\1\162\4\0\1\173"+
    "\24\162\31\0\1\162\4\0\2\162\1\174\22\162\31\0"+
    "\1\162\4\0\1\175\24\162\31\0\1\162\4\0\15\162"+
    "\1\176\7\162\53\0\1\177\40\0\1\162\4\0\15\162"+
    "\1\200\7\162\53\0\1\201\40\0\1\162\4\0\3\162"+
    "\1\202\21\162\31\0\1\162\4\0\23\162\1\203\1\162"+
    "\31\0\1\162\4\0\10\162\1\204\14\162\7\0\1\205"+
    "\21\0\1\162\4\0\10\162\1\206\14\162\7\0\1\207"+
    "\36\0\1\205\23\0\1\205\2\0\11\121\1\156\4\121"+
    "\1\4\44\121\14\0\1\124\2\0\1\161\62\0\1\210"+
    "\4\0\25\210\31\0\1\210\4\0\24\210\1\211\31\0"+
    "\1\210\4\0\4\210\1\212\20\210\31\0\1\210\4\0"+
    "\12\210\1\213\12\210\11\0\1\214\17\0\1\210\4\0"+
    "\22\210\1\215\2\210\31\0\1\210\4\0\22\210\1\216"+
    "\2\210\31\0\1\210\4\0\13\210\1\217\11\210\31\0"+
    "\1\210\4\0\22\210\1\220\2\210\60\0\1\221\33\0"+
    "\1\210\4\0\20\210\1\222\4\210\31\0\1\210\4\0"+
    "\15\210\1\223\7\210\53\0\1\224\40\0\1\210\4\0"+
    "\13\210\1\225\11\210\51\0\1\226\42\0\1\227\4\0"+
    "\25\227\31\0\1\227\4\0\1\230\24\227\31\0\1\227"+
    "\4\0\10\227\1\231\14\227\7\0\1\232\21\0\1\227"+
    "\4\0\15\227\1\233\7\227\31\0\1\227\4\0\6\227"+
    "\1\234\16\227\44\0\1\235\47\0\1\236\4\0\25\236"+
    "\31\0\1\236\4\0\15\236\1\237\7\236\31\0\1\236"+
    "\4\0\16\236\1\240\6\236\54\0\1\241\37\0\1\242"+
    "\4\0\25\242\31\0\1\242\4\0\15\242\1\243\7\242"+
    "\53\0\1\244\40\0\1\245\4\0\25\245\31\0\1\246"+
    "\4\0\25\246\31\0\1\247\4\0\25\247\31\0\1\250"+
    "\4\0\25\250\31\0\1\251\4\0\25\251\31\0\1\252"+
    "\4\0\25\252\31\0\1\253\4\0\25\253\31\0\1\254"+
    "\4\0\25\254\31\0\1\255\4\0\25\255\31\0\1\256"+
    "\4\0\25\256\31\0\1\257\4\0\25\257\31\0\1\260"+
    "\4\0\25\260\31\0\1\261\4\0\25\261\31\0\1\262"+
    "\4\0\25\262\31\0\1\263\4\0\25\263\31\0\1\264"+
    "\4\0\25\264\31\0\1\265\4\0\25\265\31\0\1\266"+
    "\4\0\25\266\31\0\1\267\4\0\25\267\31\0\1\270"+
    "\4\0\25\270\31\0\1\271\4\0\25\271\31\0\1\272"+
    "\4\0\25\272\31\0\1\273\4\0\25\273\31\0\1\274"+
    "\4\0\25\274\31\0\1\275\4\0\25\275\31\0\1\276"+
    "\4\0\25\276\31\0\1\277\4\0\25\277\31\0\1\300"+
    "\4\0\25\300\31\0\1\301\4\0\25\301\31\0\1\302"+
    "\4\0\25\302\31\0\1\303\4\0\25\303\31\0\1\304"+
    "\4\0\25\304\31\0\1\305\4\0\25\305\31\0\1\306"+
    "\4\0\25\306\31\0\1\307\4\0\25\307\31\0\1\310"+
    "\4\0\25\310\31\0\1\311\4\0\25\311\31\0\1\312"+
    "\4\0\25\312\31\0\1\313\4\0\25\313\31\0\1\314"+
    "\4\0\25\314\31\0\1\315\4\0\25\315\31\0\1\316"+
    "\4\0\25\316\31\0\1\317\4\0\25\317\31\0\1\320"+
    "\4\0\25\320\31\0\1\321\4\0\25\321\31\0\1\322"+
    "\4\0\25\322\31\0\1\323\4\0\25\323\31\0\1\324"+
    "\4\0\25\324\31\0\1\325\4\0\25\325\31\0\1\326"+
    "\4\0\25\326\31\0\1\327\4\0\25\327\31\0\1\330"+
    "\4\0\25\330\31\0\1\331\4\0\25\331\31\0\1\332"+
    "\4\0\25\332\31\0\1\333\4\0\25\333\31\0\1\334"+
    "\4\0\25\334\31\0\1\335\4\0\25\335\31\0\1\336"+
    "\4\0\25\336\31\0\1\337\4\0\25\337\31\0\1\340"+
    "\4\0\25\340\31\0\1\341\4\0\25\341\31\0\1\342"+
    "\4\0\25\342\31\0\1\343\4\0\25\343\31\0\1\344"+
    "\4\0\25\344\31\0\1\345\4\0\25\345\31\0\1\346"+
    "\4\0\25\346\31\0\1\347\4\0\25\347\31\0\1\350"+
    "\4\0\25\350\31\0\1\351\4\0\25\351\31\0\1\352"+
    "\4\0\25\352\31\0\1\353\4\0\25\353\31\0\1\354"+
    "\4\0\25\354\31\0\1\355\4\0\25\355\31\0\1\356"+
    "\4\0\25\356\31\0\1\357\4\0\25\357\31\0\1\360"+
    "\4\0\25\360\31\0\1\361\4\0\25\361\31\0\1\362"+
    "\4\0\25\362\31\0\1\363\4\0\25\363\31\0\1\364"+
    "\4\0\25\364\31\0\1\365\4\0\25\365\31\0\1\366"+
    "\4\0\25\366\31\0\1\367\4\0\25\367\31\0\1\370"+
    "\4\0\25\370\31\0\1\371\4\0\25\371\31\0\1\372"+
    "\4\0\25\372\31\0\1\373\4\0\25\373\31\0\1\374"+
    "\4\0\25\374\31\0\1\375\4\0\25\375\31\0\1\376"+
    "\4\0\25\376\31\0\1\377\4\0\25\377\31\0\1\u0100"+
    "\4\0\25\u0100\31\0\1\u0101\4\0\25\u0101\31\0\1\u0102"+
    "\4\0\25\u0102\31\0\1\u0103\4\0\25\u0103\31\0\1\u0104"+
    "\4\0\25\u0104\31\0\1\u0105\4\0\25\u0105\31\0\1\u0106"+
    "\4\0\25\u0106\31\0\1\u0107\4\0\25\u0107\31\0\1\u0108"+
    "\4\0\25\u0108\31\0\1\u0109\4\0\25\u0109\31\0\1\u010a"+
    "\4\0\25\u010a\31\0\1\u010b\4\0\25\u010b\31\0\1\u010c"+
    "\4\0\25\u010c\31\0\1\u010d\4\0\25\u010d\31\0\1\u010e"+
    "\4\0\25\u010e\31\0\1\u010f\4\0\25\u010f\31\0\1\u0110"+
    "\4\0\25\u0110\31\0\1\u0111\4\0\25\u0111\31\0\1\u0112"+
    "\4\0\25\u0112\31\0\1\u0113\4\0\25\u0113\31\0\1\u0114"+
    "\4\0\25\u0114\31\0\1\u0115\4\0\25\u0115\31\0\1\u0116"+
    "\4\0\25\u0116\31\0\1\u0117\4\0\25\u0117\31\0\1\u0118"+
    "\4\0\25\u0118\31\0\1\u0119\4\0\25\u0119\31\0\1\u011a"+
    "\4\0\25\u011a\31\0\1\u011b\4\0\25\u011b\12\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11628];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\3\1\1\11\2\1\1\11"+
    "\5\1\1\11\17\1\7\11\2\1\1\0\1\11\1\1"+
    "\1\0\3\11\1\0\1\1\1\0\1\1\4\11\22\1"+
    "\1\11\5\0\1\1\1\0\7\1\2\0\6\1\1\0"+
    "\1\1\1\0\4\1\1\11\1\0\1\11\1\0\1\1"+
    "\1\0\10\1\2\11\4\1\1\11\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\4\1\1\11\4\1\1\11\2\1"+
    "\1\0\1\1\1\11\3\1\1\0\2\1\1\11\3\1"+
    "\1\0\2\1\1\11\166\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn, yytext());
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CodeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(sym.error);
            }
          // fall through
          case 53: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 54: break;
          case 3:
            { return symbol(sym.BALTASAR);
            }
          // fall through
          case 55: break;
          case 4:
            { return symbol(sym.GASPAR);
            }
          // fall through
          case 56: break;
          case 5:
            { return symbol(sym.ABRECUENTO);
            }
          // fall through
          case 57: break;
          case 6:
            { return symbol(sym.CIERRECUENTO);
            }
          // fall through
          case 58: break;
          case 7:
            { return symbol(sym.COMET);
            }
          // fall through
          case 59: break;
          case 8:
            { return symbol(sym.RUDOLPH);
            }
          // fall through
          case 60: break;
          case 9:
            { return symbol(sym.COMA);
            }
          // fall through
          case 61: break;
          case 10:
            { return symbol(sym.DASHER);
            }
          // fall through
          case 62: break;
          case 11:
            { return symbol(sym.VIXEN);
            }
          // fall through
          case 63: break;
          case 12:
            { return symbol(sym.L_PAPA_NOEL);
            }
          // fall through
          case 64: break;
          case 13:
            { return symbol(sym.DOS_PUNTOS);
            }
          // fall through
          case 65: break;
          case 14:
            { return symbol(sym.ZWARTE_PIET);
            }
          // fall through
          case 66: break;
          case 15:
            { return symbol(sym.PEPPER_MINSTIX);
            }
          // fall through
          case 67: break;
          case 16:
            { return symbol(sym.KRAMPUS);
            }
          // fall through
          case 68: break;
          case 17:
            { return new Symbol(sym.PERSONA, yyline, yycolumn, yytext());
            }
          // fall through
          case 69: break;
          case 18:
            { return symbol(sym.ABREEMPAQUE);
            }
          // fall through
          case 70: break;
          case 19:
            { return symbol(sym.CIERRAEMPAQUE);
            }
          // fall through
          case 71: break;
          case 20:
            { return symbol(sym.MELCHOR);
            }
          // fall through
          case 72: break;
          case 21:
            { return symbol(sym.ABREREGALO);
            }
          // fall through
          case 73: break;
          case 22:
            { return symbol(sym.FIN_REGALO);
            }
          // fall through
          case 74: break;
          case 23:
            { return symbol(sym.CIERRAREGALO);
            }
          // fall through
          case 75: break;
          case 24:
            { return symbol(sym.TOTIN);
            }
          // fall through
          case 76: break;
          case 25:
            { return symbol(sym.L_SAN_NICOLAS);
            }
          // fall through
          case 77: break;
          case 26:
            { return symbol(sym.RENILLO);
            }
          // fall through
          case 78: break;
          case 27:
            { return symbol(sym.GRINCH);
            }
          // fall through
          case 79: break;
          case 28:
            { return symbol(sym.QUIEN);
            }
          // fall through
          case 80: break;
          case 29:
            { return symbol(sym.ENTREGA);
            }
          // fall through
          case 81: break;
          case 30:
            { return symbol(sym.BELSNICKEL);
            }
          // fall through
          case 82: break;
          case 31:
            { return symbol(sym.SNOWBALL_ALABASTRO);
            }
          // fall through
          case 83: break;
          case 32:
            { return symbol(sym.KNECHT_RUPRECHT);
            }
          // fall through
          case 84: break;
          case 33:
            { return symbol(sym.HACE);
            }
          // fall through
          case 85: break;
          case 34:
            { return symbol(sym.ELFO);
            }
          // fall through
          case 86: break;
          case 35:
            { return symbol(sym.L_COLACHO);
            }
          // fall through
          case 87: break;
          case 36:
            { return symbol(sym.ENVUELVE);
            }
          // fall through
          case 88: break;
          case 37:
            { return symbol(sym.PAPA_NOEL);
            }
          // fall through
          case 89: break;
          case 38:
            { return symbol(sym.NINO_JESUS);
            }
          // fall through
          case 90: break;
          case 39:
            { return symbol(sym.HADA);
            }
          // fall through
          case 91: break;
          case 40:
            { return symbol(sym.DUENDE);
            }
          // fall through
          case 92: break;
          case 41:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 93: break;
          case 42:
            { return symbol(sym.ESCUCHA);
            }
          // fall through
          case 94: break;
          case 43:
            { return symbol(sym.SANTA);
            }
          // fall through
          case 95: break;
          case 44:
            { return symbol(sym.CORTA);
            }
          // fall through
          case 96: break;
          case 45:
            { return symbol(sym.COLACHO);
            }
          // fall through
          case 97: break;
          case 46:
            { return symbol(sym.LOCAL);
            }
          // fall through
          case 98: break;
          case 47:
            { return symbol(sym.NARRA);
            }
          // fall through
          case 99: break;
          case 48:
            { return symbol(sym.REVISA);
            }
          // fall through
          case 100: break;
          case 49:
            { return symbol(sym.ENVIA);
            }
          // fall through
          case 101: break;
          case 50:
            { return symbol(sym.SAN_NICOLAS);
            }
          // fall through
          case 102: break;
          case 51:
            { return symbol(sym.SANTA_CLAUS);
            }
          // fall through
          case 103: break;
          case 52:
            { return symbol(sym.FUNCTION);
            }
          // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
