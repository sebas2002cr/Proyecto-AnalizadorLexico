// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexical/lexer.jflex

package lexical;

import syntaxis.sym;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public class CodeLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\37\u0200"+
    "\1\u0600\u1000\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\3\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\12\23\1\24\1\0"+
    "\1\25\1\26\1\27\1\11\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\42\1\51\1\52"+
    "\1\53\1\54\3\42\1\55\1\42\1\56\1\0\1\57"+
    "\1\60\1\61\1\0\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\42\1\51\1\52\1\53\1\54"+
    "\3\42\1\55\1\42\1\62\1\63\1\64\1\65\6\0"+
    "\1\3\33\0\1\66\7\0\1\66\3\0\1\66\3\0"+
    "\1\66\1\0\1\66\6\0\1\66\7\0\1\11\1\66"+
    "\154\0\2\67\57\0\1\66\35\0\1\70\u0198\0\1\66"+
    "\3\0\1\66\13\0\2\3\6\0\1\66\371\0\1\71"+
    "\325\0\u0100\3\375\0\1\66\2\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\2\3\1\4\1\2\1\5\2\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\2\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\17\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\4\2\1\22\1\2"+
    "\1\33\1\0\2\34\2\0\1\35\1\0\1\36\1\37"+
    "\1\0\1\40\1\15\1\1\2\0\1\1\1\15\1\33"+
    "\1\41\1\42\1\43\1\44\1\3\1\0\6\23\1\45"+
    "\5\23\1\46\10\23\1\46\2\0\1\1\1\0\2\33"+
    "\1\35\1\1\1\0\1\1\2\0\1\1\1\47\1\0"+
    "\1\1\1\0\11\23\2\0\2\23\1\50\1\23\1\51"+
    "\2\23\1\0\1\23\1\0\5\23\1\51\2\0\1\15"+
    "\1\0\1\3\3\1\1\47\6\23\1\52\1\53\1\54"+
    "\1\53\1\54\1\23\1\0\3\23\2\55\1\23\1\0"+
    "\1\56\2\23\1\0\1\57\1\23\1\0\1\1\1\0"+
    "\1\1\1\47\3\23\1\60\1\23\2\61\2\57\1\62"+
    "\1\23\1\63\2\64\2\23\1\0\2\65\1\0\1\1"+
    "\5\23\1\0\1\66\2\67\1\0\3\23\1\70\1\23"+
    "\2\0\3\23\2\71\1\0\u0165\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[584];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\164\0\256\0\350\0\u0122\0\u015c"+
    "\0\350\0\u0196\0\u01d0\0\164\0\u020a\0\u0244\0\164\0\u027e"+
    "\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\164\0\u03da\0\u0414"+
    "\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4"+
    "\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a\0\164"+
    "\0\164\0\164\0\164\0\164\0\164\0\164\0\u07b4\0\u07ee"+
    "\0\u0828\0\u0862\0\u089c\0\u08d6\0\350\0\u0122\0\164\0\u015c"+
    "\0\u0910\0\u094a\0\u0984\0\u09be\0\164\0\164\0\u01d0\0\164"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\164"+
    "\0\164\0\164\0\164\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76"+
    "\0\u0cb0\0\u0cea\0\u0d24\0\u0c3c\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u0c3c\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2"+
    "\0\u0fdc\0\u1016\0\164\0\u1050\0\u108a\0\u10c4\0\u0862\0\u10fe"+
    "\0\u08d6\0\164\0\164\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u0aa6"+
    "\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6"+
    "\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586"+
    "\0\u15c0\0\u137c\0\u15fa\0\u137c\0\u1634\0\u166e\0\u16a8\0\u16e2"+
    "\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\164\0\u1878"+
    "\0\u18b2\0\164\0\u18ec\0\u11ac\0\u1926\0\u1960\0\u199a\0\u19d4"+
    "\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1a82\0\u1a82"+
    "\0\u1a82\0\164\0\164\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1a82\0\164\0\u1c8c\0\u1cc6\0\u1a82\0\u1d00\0\u1d3a\0\u1d74"+
    "\0\u1a82\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1e5c\0\u1ed0"+
    "\0\u1f0a\0\u1f44\0\u1f44\0\u1f7e\0\u1f44\0\164\0\u1f44\0\164"+
    "\0\u1f44\0\u1fb8\0\u1f44\0\u1f44\0\164\0\u1ff2\0\u202c\0\u2066"+
    "\0\u1f44\0\164\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2"+
    "\0\u21fc\0\u2236\0\u2188\0\u2188\0\164\0\u2270\0\u22aa\0\u22e4"+
    "\0\u231e\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a"+
    "\0\u247a\0\164\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6"+
    "\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6"+
    "\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976"+
    "\0\u29b0\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46"+
    "\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16"+
    "\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\u2ee6"+
    "\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c\0\u30b6"+
    "\0\u30f0\0\u312a\0\u3164\0\u319e\0\u31d8\0\u3212\0\u324c\0\u3286"+
    "\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c\0\u3456"+
    "\0\u3490\0\u34ca\0\u3504\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626"+
    "\0\u3660\0\u369a\0\u36d4\0\u370e\0\u3748\0\u3782\0\u37bc\0\u37f6"+
    "\0\u3830\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c\0\u39c6"+
    "\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\u3b22\0\u3b5c\0\u3b96"+
    "\0\u3bd0\0\u3c0a\0\u3c44\0\u3c7e\0\u3cb8\0\u3cf2\0\u3d2c\0\u3d66"+
    "\0\u3da0\0\u3dda\0\u3e14\0\u3e4e\0\u3e88\0\u3ec2\0\u3efc\0\u3f36"+
    "\0\u3f70\0\u3faa\0\u3fe4\0\u401e\0\u4058\0\u4092\0\u40cc\0\u4106"+
    "\0\u4140\0\u417a\0\u41b4\0\u41ee\0\u4228\0\u4262\0\u429c\0\u42d6"+
    "\0\u4310\0\u434a\0\u4384\0\u43be\0\u43f8\0\u4432\0\u446c\0\u44a6"+
    "\0\u44e0\0\u451a\0\u4554\0\u458e\0\u45c8\0\u4602\0\u463c\0\u4676"+
    "\0\u46b0\0\u46ea\0\u4724\0\u475e\0\u4798\0\u47d2\0\u480c\0\u4846"+
    "\0\u4880\0\u48ba\0\u48f4\0\u492e\0\u4968\0\u49a2\0\u49dc\0\u4a16"+
    "\0\u4a50\0\u4a8a\0\u4ac4\0\u4afe\0\u4b38\0\u4b72\0\u4bac\0\u4be6"+
    "\0\u4c20\0\u4c5a\0\u4c94\0\u4cce\0\u4d08\0\u4d42\0\u4d7c\0\u4db6"+
    "\0\u4df0\0\u4e2a\0\u4e64\0\u4e9e\0\u4ed8\0\u4f12\0\u4f4c\0\u4f86"+
    "\0\u4fc0\0\u4ffa\0\u5034\0\u506e\0\u50a8\0\u50e2\0\u511c\0\u5156"+
    "\0\u5190\0\u51ca\0\u5204\0\u523e\0\u5278\0\u52b2\0\u52ec\0\u5326"+
    "\0\u5360\0\u539a\0\u53d4\0\u540e\0\u5448\0\u5482\0\u54bc\0\u54f6"+
    "\0\u5530\0\u556a\0\u55a4\0\u55de\0\u5618\0\u5652\0\u568c\0\u56c6"+
    "\0\u5700\0\u573a\0\u5774\0\u57ae\0\u57e8\0\u5822\0\u585c\0\u5896"+
    "\0\u58d0\0\u590a\0\u5944\0\u597e\0\u59b8\0\u59f2\0\u5a2c\0\u5a66"+
    "\0\u5aa0\0\u5ada\0\u5b14\0\u5b4e\0\u5b88\0\u5bc2\0\u5bfc\0\u5c36"+
    "\0\u5c70\0\u5caa\0\u5ce4\0\u5d1e\0\u5d58\0\u5d92\0\u5dcc\0\u5e06"+
    "\0\u5e40\0\u5e7a\0\u5eb4\0\u5eee\0\u5f28\0\u5f62\0\u5f9c\0\u5fd6"+
    "\0\u6010\0\u604a\0\u6084\0\u60be\0\u60f8\0\u6132\0\u616c\0\u61a6"+
    "\0\u61e0\0\u621a\0\u6254\0\u628e\0\u62c8\0\u6302\0\u633c\0\u6376"+
    "\0\u63b0\0\u63ea\0\u6424\0\u645e\0\u6498\0\u64d2\0\u650c\0\u6546"+
    "\0\u6580\0\u65ba\0\u65f4\0\u662e\0\u6668\0\u66a2\0\u66dc\0\u6716"+
    "\0\u6750\0\u678a\0\u67c4\0\u67fe\0\u6838\0\u6872\0\u68ac\0\u68e6"+
    "\0\u6920\0\u695a\0\u6994\0\u69ce\0\u6a08\0\u6a42\0\u6a7c\0\u6ab6"+
    "\0\u6af0\0\u6b2a\0\u6b64\0\u6b9e\0\u6bd8\0\u6c12\0\u6c4c\0\u6c86"+
    "\0\u6cc0\0\u6cfa\0\u6d34\0\u6d6e\0\u6da8\0\u6de2\0\u6e1c\0\u6e56"+
    "\0\u6e90\0\u6eca\0\u6f04\0\u6f3e\0\u6f78\0\u6fb2\0\u6fec\0\u7026"+
    "\0\u7060\0\u709a\0\u70d4\0\u710e\0\u7148\0\u7182\0\u71bc\0\u71f6"+
    "\0\u7230\0\u726a\0\u72a4\0\u72de\0\u7318\0\u7352\0\u738c\0\u73c6"+
    "\0\u7400\0\u743a\0\u7474\0\u74ae\0\u74e8\0\u10fe\0\350\0\u08d6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[584];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\2\37\1\40"+
    "\2\37\1\41\1\42\2\37\1\43\1\44\1\45\1\46"+
    "\1\47\1\37\1\50\1\51\1\52\1\37\1\53\1\54"+
    "\1\55\1\56\1\11\1\57\1\60\7\3\1\11\1\3"+
    "\2\11\1\61\6\3\1\21\1\3\1\62\4\3\1\63"+
    "\25\64\3\3\1\64\4\3\1\11\3\3\74\0\1\4"+
    "\75\0\1\65\1\0\2\65\11\0\1\65\5\0\25\65"+
    "\3\0\1\65\4\0\1\65\3\0\7\66\1\67\62\66"+
    "\6\0\1\65\1\0\2\65\11\0\1\70\5\0\25\65"+
    "\3\0\1\65\4\0\1\65\3\0\2\71\4\72\4\71"+
    "\1\73\57\71\20\0\1\74\66\0\1\75\72\0\1\76"+
    "\66\0\1\77\4\0\1\100\2\0\1\101\71\0\1\102"+
    "\127\0\1\103\27\0\1\104\1\0\1\105\1\0\1\106"+
    "\5\0\25\107\3\0\1\107\4\0\1\65\31\0\1\110"+
    "\71\0\1\111\1\112\70\0\1\113\43\0\30\63\1\114"+
    "\41\63\6\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\116\5\0\20\117\1\120\4\117\3\0\1\117\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\116\5\0\16\117\1\121\1\117\1\122\4\117\3\0"+
    "\1\117\4\0\1\65\11\0\1\65\1\0\2\65\7\0"+
    "\1\115\1\0\1\116\5\0\7\117\1\123\15\117\3\0"+
    "\1\117\4\0\1\65\11\0\1\65\1\0\2\65\7\0"+
    "\1\115\1\0\1\116\5\0\16\117\1\124\6\117\3\0"+
    "\1\117\4\0\1\65\11\0\1\65\1\0\2\65\7\0"+
    "\1\115\1\0\1\116\5\0\13\117\1\125\11\117\3\0"+
    "\1\117\4\0\1\65\11\0\1\65\1\0\2\65\7\0"+
    "\1\115\1\0\1\116\5\0\1\126\12\117\1\127\2\117"+
    "\1\130\4\117\1\131\1\117\3\0\1\117\4\0\1\65"+
    "\11\0\1\65\1\0\2\65\7\0\1\115\1\0\1\116"+
    "\5\0\25\117\3\0\1\117\4\0\1\65\11\0\1\65"+
    "\1\0\2\65\7\0\1\115\1\0\1\116\5\0\5\117"+
    "\1\132\7\117\1\133\7\117\3\0\1\117\4\0\1\65"+
    "\11\0\1\65\1\0\2\65\7\0\1\115\1\0\1\116"+
    "\5\0\16\117\1\134\6\117\3\0\1\117\4\0\1\65"+
    "\11\0\1\65\1\0\2\65\7\0\1\115\1\0\1\116"+
    "\5\0\1\135\24\117\3\0\1\117\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\115\1\0\1\116\5\0"+
    "\20\117\1\136\4\117\3\0\1\117\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\115\1\0\1\116\5\0"+
    "\4\117\1\137\20\117\3\0\1\117\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\115\1\0\1\116\5\0"+
    "\22\117\1\140\2\117\3\0\1\117\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\115\1\0\1\116\5\0"+
    "\20\117\1\141\4\117\3\0\1\117\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\115\1\0\1\116\5\0"+
    "\15\117\1\142\7\117\3\0\1\117\4\0\1\65\41\0"+
    "\1\143\7\0\1\144\76\0\1\145\16\0\12\72\1\0"+
    "\57\72\17\0\1\104\1\0\1\146\1\0\1\147\5\0"+
    "\25\107\3\0\1\107\4\0\1\65\3\0\30\63\1\0"+
    "\41\63\6\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\150\5\0\25\151\3\0\1\151\4\0\1\65\3\0"+
    "\12\72\1\152\71\72\1\153\57\72\12\0\1\152\102\0"+
    "\1\154\71\0\1\101\71\0\1\102\11\0\1\155\34\0"+
    "\15\156\1\0\43\156\1\157\10\156\23\0\1\160\71\0"+
    "\1\161\5\0\25\162\3\0\1\162\27\0\1\104\1\0"+
    "\1\163\1\0\1\106\5\0\25\107\3\0\1\107\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\160\1\0"+
    "\1\65\5\0\25\107\3\0\1\107\4\0\1\65\3\0"+
    "\2\114\4\0\64\114\23\0\1\164\5\0\25\162\3\0"+
    "\1\162\16\0\1\65\1\0\2\65\7\0\1\104\1\0"+
    "\1\165\5\0\25\166\3\0\1\166\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\115\1\0\1\165\5\0"+
    "\25\167\3\0\1\167\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\7\0\1\115\1\0\1\165\5\0\20\167\1\170"+
    "\4\167\3\0\1\167\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\7\0\1\115\1\0\1\165\5\0\16\167\1\171"+
    "\6\167\3\0\1\167\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\7\0\1\115\1\0\1\165\5\0\4\167\1\172"+
    "\20\167\3\0\1\167\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\7\0\1\115\1\0\1\165\5\0\1\173\24\167"+
    "\3\0\1\167\4\0\1\65\11\0\1\65\1\0\2\65"+
    "\7\0\1\115\1\0\1\165\5\0\10\167\1\174\10\167"+
    "\1\175\3\167\3\0\1\167\4\0\1\65\1\176\1\177"+
    "\7\0\1\65\1\0\2\65\7\0\1\115\1\0\1\165"+
    "\5\0\13\167\1\200\11\167\3\0\1\167\4\0\1\65"+
    "\11\0\1\65\1\0\2\65\7\0\1\115\1\0\1\165"+
    "\5\0\16\167\1\201\6\167\3\0\1\167\4\0\1\65"+
    "\11\0\1\65\1\0\2\65\7\0\1\115\1\0\1\165"+
    "\5\0\20\167\1\202\4\167\3\0\1\167\4\0\1\65"+
    "\11\0\1\65\1\0\2\65\7\0\1\115\1\0\1\165"+
    "\5\0\15\167\1\203\7\167\3\0\1\167\4\0\1\65"+
    "\11\0\1\65\1\0\2\65\7\0\1\115\1\0\1\165"+
    "\5\0\22\167\1\204\2\167\3\0\1\167\4\0\1\65"+
    "\11\0\1\65\1\0\2\65\7\0\1\115\1\0\1\165"+
    "\5\0\2\167\1\205\22\167\3\0\1\167\4\0\1\65"+
    "\11\0\1\65\1\0\2\65\7\0\1\115\1\0\1\165"+
    "\5\0\10\167\1\206\14\167\3\0\1\167\4\0\1\65"+
    "\1\207\10\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\165\5\0\10\167\1\210\14\167\3\0\1\167\4\0"+
    "\1\65\1\211\10\0\1\65\1\0\2\65\7\0\1\115"+
    "\1\0\1\165\5\0\1\212\21\167\1\213\2\167\3\0"+
    "\1\167\4\0\1\65\11\0\1\65\1\0\2\65\7\0"+
    "\1\115\1\0\1\165\5\0\20\167\1\214\4\167\3\0"+
    "\1\167\4\0\1\65\11\0\1\65\1\0\2\65\7\0"+
    "\1\115\1\0\1\165\5\0\23\167\1\215\1\167\3\0"+
    "\1\167\4\0\1\65\11\0\1\65\1\0\2\65\7\0"+
    "\1\115\1\0\1\165\5\0\22\167\1\216\2\167\3\0"+
    "\1\167\4\0\1\65\56\0\1\217\67\0\1\220\43\0"+
    "\1\221\5\0\25\162\3\0\1\162\16\0\1\65\1\0"+
    "\2\65\7\0\1\104\1\0\1\150\5\0\25\65\3\0"+
    "\1\65\4\0\1\65\17\0\1\222\6\0\1\154\66\0"+
    "\1\160\2\0\1\160\46\0\61\156\1\223\32\156\1\224"+
    "\36\156\1\223\10\156\21\0\1\225\1\0\1\161\5\0"+
    "\4\226\1\227\20\226\3\0\1\226\33\0\1\160\5\0"+
    "\25\162\3\0\1\162\33\0\1\230\5\0\25\162\3\0"+
    "\1\162\33\0\1\164\5\0\25\226\3\0\1\226\16\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\231\5\0"+
    "\25\232\3\0\1\232\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\232\5\0\25\232\3\0\1\232\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\231\5\0\25\233\3\0\1\233\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\115\1\0\1\231\5\0"+
    "\1\234\24\233\3\0\1\233\4\0\1\65\11\0\1\65"+
    "\1\0\2\65\7\0\1\115\1\0\1\231\5\0\13\233"+
    "\1\235\11\233\3\0\1\233\4\0\1\65\11\0\1\65"+
    "\1\0\2\65\7\0\1\115\1\0\1\231\5\0\1\236"+
    "\24\233\3\0\1\233\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\7\0\1\115\1\0\1\231\5\0\20\233\1\237"+
    "\4\233\3\0\1\233\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\7\0\1\115\1\0\1\231\5\0\5\233\1\240"+
    "\17\233\3\0\1\233\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\7\0\1\115\1\0\1\231\5\0\4\233\1\241"+
    "\20\233\3\0\1\233\4\0\1\65\41\0\1\242\70\0"+
    "\1\243\42\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\231\5\0\21\233\1\244\3\233\3\0\1\233\4\0"+
    "\1\65\1\0\1\245\7\0\1\65\1\0\2\65\7\0"+
    "\1\115\1\0\1\231\5\0\1\246\24\233\3\0\1\233"+
    "\4\0\1\65\11\0\1\65\1\0\2\65\7\0\1\115"+
    "\1\0\1\231\5\0\2\233\1\247\22\233\3\0\1\233"+
    "\4\0\1\65\11\0\1\65\1\0\2\65\7\0\1\115"+
    "\1\0\1\231\5\0\1\250\24\233\3\0\1\233\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\231\5\0\15\233\1\251\7\233\3\0\1\233\4\0"+
    "\1\65\51\0\1\252\31\0\1\65\1\0\2\65\7\0"+
    "\1\115\1\0\1\231\5\0\15\233\1\253\7\233\3\0"+
    "\1\233\4\0\1\65\51\0\1\254\31\0\1\65\1\0"+
    "\2\65\7\0\1\115\1\0\1\231\5\0\3\233\1\255"+
    "\21\233\3\0\1\233\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\7\0\1\115\1\0\1\231\5\0\23\233\1\256"+
    "\1\233\3\0\1\233\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\7\0\1\115\1\0\1\231\5\0\10\233\1\257"+
    "\14\233\3\0\1\233\4\0\1\65\1\260\10\0\1\65"+
    "\1\0\2\65\7\0\1\115\1\0\1\231\5\0\4\233"+
    "\1\261\20\233\3\0\1\233\4\0\1\65\11\0\1\65"+
    "\1\0\2\65\7\0\1\115\1\0\1\231\5\0\10\233"+
    "\1\262\14\233\3\0\1\233\4\0\1\65\1\263\43\0"+
    "\1\260\25\0\1\260\23\0\1\225\1\0\1\221\5\0"+
    "\4\226\1\264\20\226\3\0\1\226\10\0\22\156\1\4"+
    "\36\156\1\223\10\156\21\0\1\225\1\0\1\225\77\0"+
    "\25\226\3\0\1\226\30\0\1\265\1\266\1\0\1\267"+
    "\5\0\25\226\3\0\1\226\31\0\1\225\1\0\1\230"+
    "\5\0\4\226\1\264\20\226\3\0\1\226\16\0\1\65"+
    "\1\0\2\65\7\0\1\104\1\0\1\270\5\0\25\271"+
    "\3\0\1\271\4\0\1\65\11\0\1\65\1\0\2\65"+
    "\11\0\1\271\5\0\25\271\3\0\1\271\4\0\1\65"+
    "\11\0\1\65\1\0\2\65\7\0\1\115\1\0\1\270"+
    "\5\0\25\272\3\0\1\272\4\0\1\65\11\0\1\65"+
    "\1\0\2\65\7\0\1\115\1\0\1\270\5\0\24\272"+
    "\1\273\3\0\1\272\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\7\0\1\115\1\0\1\270\5\0\4\272\1\274"+
    "\20\272\3\0\1\272\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\7\0\1\115\1\0\1\270\5\0\12\272\1\275"+
    "\12\272\3\0\1\272\4\0\1\65\2\0\1\276\6\0"+
    "\1\65\1\0\2\65\7\0\1\115\1\0\1\270\5\0"+
    "\4\272\1\277\20\272\3\0\1\272\4\0\1\65\40\0"+
    "\1\300\42\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\270\5\0\22\272\1\301\2\272\3\0\1\272\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\270\5\0\22\272\1\302\2\272\3\0\1\272\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\270\5\0\13\272\1\303\11\272\3\0\1\272\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\270\5\0\22\272\1\304\2\272\3\0\1\272\4\0"+
    "\1\65\56\0\1\305\24\0\1\65\1\0\2\65\7\0"+
    "\1\115\1\0\1\270\5\0\20\272\1\306\4\272\3\0"+
    "\1\272\4\0\1\65\11\0\1\65\1\0\2\65\7\0"+
    "\1\115\1\0\1\270\5\0\15\272\1\307\7\272\3\0"+
    "\1\272\4\0\1\65\51\0\1\310\31\0\1\65\1\0"+
    "\2\65\7\0\1\115\1\0\1\270\5\0\13\272\1\311"+
    "\11\272\3\0\1\272\4\0\1\65\47\0\1\312\45\0"+
    "\1\313\1\266\1\0\1\313\5\0\25\226\3\0\1\226"+
    "\31\0\1\266\1\0\1\267\71\0\1\314\54\0\1\65"+
    "\1\0\2\65\7\0\1\104\1\0\1\315\5\0\25\316"+
    "\3\0\1\316\4\0\1\65\11\0\1\65\1\0\2\65"+
    "\11\0\1\316\5\0\25\316\3\0\1\316\4\0\1\65"+
    "\11\0\1\65\1\0\2\65\7\0\1\115\1\0\1\315"+
    "\5\0\25\317\3\0\1\317\4\0\1\65\11\0\1\65"+
    "\1\0\2\65\7\0\1\115\1\0\1\315\5\0\1\320"+
    "\24\317\3\0\1\317\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\7\0\1\115\1\0\1\315\5\0\10\317\1\321"+
    "\14\317\3\0\1\317\4\0\1\65\1\322\10\0\1\65"+
    "\1\0\2\65\7\0\1\115\1\0\1\315\5\0\15\317"+
    "\1\323\7\317\3\0\1\317\4\0\1\65\11\0\1\65"+
    "\1\0\2\65\7\0\1\115\1\0\1\315\5\0\6\317"+
    "\1\324\16\317\3\0\1\317\4\0\1\65\42\0\1\325"+
    "\53\0\1\266\1\0\1\313\67\0\1\326\1\0\1\314"+
    "\54\0\1\65\1\0\2\65\7\0\1\104\1\0\1\327"+
    "\5\0\25\330\3\0\1\330\4\0\1\65\11\0\1\65"+
    "\1\0\2\65\11\0\1\330\5\0\25\330\3\0\1\330"+
    "\4\0\1\65\11\0\1\65\1\0\2\65\7\0\1\115"+
    "\1\0\1\327\5\0\25\331\3\0\1\331\4\0\1\65"+
    "\11\0\1\65\1\0\2\65\7\0\1\115\1\0\1\327"+
    "\5\0\15\331\1\332\7\331\3\0\1\331\4\0\1\65"+
    "\11\0\1\65\1\0\2\65\7\0\1\115\1\0\1\327"+
    "\5\0\16\331\1\333\6\331\3\0\1\331\4\0\1\65"+
    "\52\0\1\334\45\0\1\335\54\0\1\65\1\0\2\65"+
    "\7\0\1\104\1\0\1\336\5\0\25\337\3\0\1\337"+
    "\4\0\1\65\11\0\1\65\1\0\2\65\11\0\1\337"+
    "\5\0\25\337\3\0\1\337\4\0\1\65\11\0\1\65"+
    "\1\0\2\65\7\0\1\115\1\0\1\336\5\0\25\340"+
    "\3\0\1\340\4\0\1\65\11\0\1\65\1\0\2\65"+
    "\7\0\1\115\1\0\1\336\5\0\15\340\1\341\7\340"+
    "\3\0\1\340\4\0\1\65\51\0\1\342\46\0\1\335"+
    "\11\0\1\343\42\0\1\65\1\0\2\65\7\0\1\104"+
    "\1\0\1\344\5\0\25\345\3\0\1\345\4\0\1\65"+
    "\11\0\1\65\1\0\2\65\11\0\1\345\5\0\25\345"+
    "\3\0\1\345\4\0\1\65\11\0\1\65\1\0\2\65"+
    "\7\0\1\115\1\0\1\344\5\0\25\346\3\0\1\346"+
    "\4\0\1\65\23\0\1\313\1\266\1\0\1\313\54\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\347\5\0"+
    "\25\350\3\0\1\350\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\350\5\0\25\350\3\0\1\350\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\347\5\0\25\351\3\0\1\351\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\352\5\0"+
    "\25\353\3\0\1\353\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\353\5\0\25\353\3\0\1\353\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\352\5\0\25\354\3\0\1\354\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\355\5\0"+
    "\25\356\3\0\1\356\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\356\5\0\25\356\3\0\1\356\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\355\5\0\25\357\3\0\1\357\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\360\5\0"+
    "\25\361\3\0\1\361\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\361\5\0\25\361\3\0\1\361\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\360\5\0\25\362\3\0\1\362\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\363\5\0"+
    "\25\364\3\0\1\364\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\364\5\0\25\364\3\0\1\364\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\363\5\0\25\365\3\0\1\365\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\366\5\0"+
    "\25\367\3\0\1\367\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\367\5\0\25\367\3\0\1\367\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\366\5\0\25\370\3\0\1\370\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\371\5\0"+
    "\25\372\3\0\1\372\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\372\5\0\25\372\3\0\1\372\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\371\5\0\25\373\3\0\1\373\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\374\5\0"+
    "\25\375\3\0\1\375\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\375\5\0\25\375\3\0\1\375\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\374\5\0\25\376\3\0\1\376\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\377\5\0"+
    "\25\u0100\3\0\1\u0100\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0100\5\0\25\u0100\3\0\1\u0100\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\377\5\0\25\u0101\3\0\1\u0101\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0102\5\0"+
    "\25\u0103\3\0\1\u0103\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0103\5\0\25\u0103\3\0\1\u0103\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0102\5\0\25\u0104\3\0\1\u0104\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0105\5\0"+
    "\25\u0106\3\0\1\u0106\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0106\5\0\25\u0106\3\0\1\u0106\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0105\5\0\25\u0107\3\0\1\u0107\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0108\5\0"+
    "\25\u0109\3\0\1\u0109\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0109\5\0\25\u0109\3\0\1\u0109\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0108\5\0\25\u010a\3\0\1\u010a\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u010b\5\0"+
    "\25\u010c\3\0\1\u010c\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u010c\5\0\25\u010c\3\0\1\u010c\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u010b\5\0\25\u010d\3\0\1\u010d\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u010e\5\0"+
    "\25\u010f\3\0\1\u010f\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u010f\5\0\25\u010f\3\0\1\u010f\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u010e\5\0\25\u0110\3\0\1\u0110\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0111\5\0"+
    "\25\u0112\3\0\1\u0112\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0112\5\0\25\u0112\3\0\1\u0112\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0111\5\0\25\u0113\3\0\1\u0113\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0114\5\0"+
    "\25\u0115\3\0\1\u0115\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0115\5\0\25\u0115\3\0\1\u0115\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0114\5\0\25\u0116\3\0\1\u0116\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0117\5\0"+
    "\25\u0118\3\0\1\u0118\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0118\5\0\25\u0118\3\0\1\u0118\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0117\5\0\25\u0119\3\0\1\u0119\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u011a\5\0"+
    "\25\u011b\3\0\1\u011b\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u011b\5\0\25\u011b\3\0\1\u011b\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u011a\5\0\25\u011c\3\0\1\u011c\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u011d\5\0"+
    "\25\u011e\3\0\1\u011e\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u011e\5\0\25\u011e\3\0\1\u011e\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u011d\5\0\25\u011f\3\0\1\u011f\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0120\5\0"+
    "\25\u0121\3\0\1\u0121\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0121\5\0\25\u0121\3\0\1\u0121\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0120\5\0\25\u0122\3\0\1\u0122\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0123\5\0"+
    "\25\u0124\3\0\1\u0124\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0124\5\0\25\u0124\3\0\1\u0124\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0123\5\0\25\u0125\3\0\1\u0125\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0126\5\0"+
    "\25\u0127\3\0\1\u0127\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0127\5\0\25\u0127\3\0\1\u0127\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0126\5\0\25\u0128\3\0\1\u0128\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0129\5\0"+
    "\25\u012a\3\0\1\u012a\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u012a\5\0\25\u012a\3\0\1\u012a\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0129\5\0\25\u012b\3\0\1\u012b\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u012c\5\0"+
    "\25\u012d\3\0\1\u012d\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u012d\5\0\25\u012d\3\0\1\u012d\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u012c\5\0\25\u012e\3\0\1\u012e\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u012f\5\0"+
    "\25\u0130\3\0\1\u0130\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0130\5\0\25\u0130\3\0\1\u0130\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u012f\5\0\25\u0131\3\0\1\u0131\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0132\5\0"+
    "\25\u0133\3\0\1\u0133\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0133\5\0\25\u0133\3\0\1\u0133\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0132\5\0\25\u0134\3\0\1\u0134\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0135\5\0"+
    "\25\u0136\3\0\1\u0136\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0136\5\0\25\u0136\3\0\1\u0136\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0135\5\0\25\u0137\3\0\1\u0137\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0138\5\0"+
    "\25\u0139\3\0\1\u0139\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0139\5\0\25\u0139\3\0\1\u0139\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0138\5\0\25\u013a\3\0\1\u013a\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u013b\5\0"+
    "\25\u013c\3\0\1\u013c\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u013c\5\0\25\u013c\3\0\1\u013c\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u013b\5\0\25\u013d\3\0\1\u013d\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u013e\5\0"+
    "\25\u013f\3\0\1\u013f\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u013f\5\0\25\u013f\3\0\1\u013f\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u013e\5\0\25\u0140\3\0\1\u0140\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0141\5\0"+
    "\25\u0142\3\0\1\u0142\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0142\5\0\25\u0142\3\0\1\u0142\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0141\5\0\25\u0143\3\0\1\u0143\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0144\5\0"+
    "\25\u0145\3\0\1\u0145\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0145\5\0\25\u0145\3\0\1\u0145\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0144\5\0\25\u0146\3\0\1\u0146\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0147\5\0"+
    "\25\u0148\3\0\1\u0148\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0148\5\0\25\u0148\3\0\1\u0148\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0147\5\0\25\u0149\3\0\1\u0149\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u014a\5\0"+
    "\25\u014b\3\0\1\u014b\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u014b\5\0\25\u014b\3\0\1\u014b\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u014a\5\0\25\u014c\3\0\1\u014c\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u014d\5\0"+
    "\25\u014e\3\0\1\u014e\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u014e\5\0\25\u014e\3\0\1\u014e\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u014d\5\0\25\u014f\3\0\1\u014f\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0150\5\0"+
    "\25\u0151\3\0\1\u0151\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0151\5\0\25\u0151\3\0\1\u0151\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0150\5\0\25\u0152\3\0\1\u0152\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0153\5\0"+
    "\25\u0154\3\0\1\u0154\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0154\5\0\25\u0154\3\0\1\u0154\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0153\5\0\25\u0155\3\0\1\u0155\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0156\5\0"+
    "\25\u0157\3\0\1\u0157\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0157\5\0\25\u0157\3\0\1\u0157\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0156\5\0\25\u0158\3\0\1\u0158\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0159\5\0"+
    "\25\u015a\3\0\1\u015a\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u015a\5\0\25\u015a\3\0\1\u015a\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0159\5\0\25\u015b\3\0\1\u015b\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u015c\5\0"+
    "\25\u015d\3\0\1\u015d\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u015d\5\0\25\u015d\3\0\1\u015d\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u015c\5\0\25\u015e\3\0\1\u015e\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u015f\5\0"+
    "\25\u0160\3\0\1\u0160\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0160\5\0\25\u0160\3\0\1\u0160\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u015f\5\0\25\u0161\3\0\1\u0161\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0162\5\0"+
    "\25\u0163\3\0\1\u0163\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0163\5\0\25\u0163\3\0\1\u0163\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0162\5\0\25\u0164\3\0\1\u0164\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0165\5\0"+
    "\25\u0166\3\0\1\u0166\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0166\5\0\25\u0166\3\0\1\u0166\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0165\5\0\25\u0167\3\0\1\u0167\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0168\5\0"+
    "\25\u0169\3\0\1\u0169\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0169\5\0\25\u0169\3\0\1\u0169\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0168\5\0\25\u016a\3\0\1\u016a\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u016b\5\0"+
    "\25\u016c\3\0\1\u016c\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u016c\5\0\25\u016c\3\0\1\u016c\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u016b\5\0\25\u016d\3\0\1\u016d\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u016e\5\0"+
    "\25\u016f\3\0\1\u016f\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u016f\5\0\25\u016f\3\0\1\u016f\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u016e\5\0\25\u0170\3\0\1\u0170\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0171\5\0"+
    "\25\u0172\3\0\1\u0172\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0172\5\0\25\u0172\3\0\1\u0172\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0171\5\0\25\u0173\3\0\1\u0173\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0174\5\0"+
    "\25\u0175\3\0\1\u0175\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0175\5\0\25\u0175\3\0\1\u0175\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0174\5\0\25\u0176\3\0\1\u0176\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0177\5\0"+
    "\25\u0178\3\0\1\u0178\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0178\5\0\25\u0178\3\0\1\u0178\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0177\5\0\25\u0179\3\0\1\u0179\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u017a\5\0"+
    "\25\u017b\3\0\1\u017b\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u017b\5\0\25\u017b\3\0\1\u017b\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u017a\5\0\25\u017c\3\0\1\u017c\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u017d\5\0"+
    "\25\u017e\3\0\1\u017e\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u017e\5\0\25\u017e\3\0\1\u017e\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u017d\5\0\25\u017f\3\0\1\u017f\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0180\5\0"+
    "\25\u0181\3\0\1\u0181\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0181\5\0\25\u0181\3\0\1\u0181\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0180\5\0\25\u0182\3\0\1\u0182\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0183\5\0"+
    "\25\u0184\3\0\1\u0184\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0184\5\0\25\u0184\3\0\1\u0184\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0183\5\0\25\u0185\3\0\1\u0185\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0186\5\0"+
    "\25\u0187\3\0\1\u0187\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0187\5\0\25\u0187\3\0\1\u0187\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0186\5\0\25\u0188\3\0\1\u0188\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0189\5\0"+
    "\25\u018a\3\0\1\u018a\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u018a\5\0\25\u018a\3\0\1\u018a\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0189\5\0\25\u018b\3\0\1\u018b\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u018c\5\0"+
    "\25\u018d\3\0\1\u018d\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u018d\5\0\25\u018d\3\0\1\u018d\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u018c\5\0\25\u018e\3\0\1\u018e\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u018f\5\0"+
    "\25\u0190\3\0\1\u0190\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0190\5\0\25\u0190\3\0\1\u0190\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u018f\5\0\25\u0191\3\0\1\u0191\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0192\5\0"+
    "\25\u0193\3\0\1\u0193\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0193\5\0\25\u0193\3\0\1\u0193\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0192\5\0\25\u0194\3\0\1\u0194\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0195\5\0"+
    "\25\u0196\3\0\1\u0196\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0196\5\0\25\u0196\3\0\1\u0196\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0195\5\0\25\u0197\3\0\1\u0197\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0198\5\0"+
    "\25\u0199\3\0\1\u0199\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0199\5\0\25\u0199\3\0\1\u0199\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0198\5\0\25\u019a\3\0\1\u019a\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u019b\5\0"+
    "\25\u019c\3\0\1\u019c\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u019c\5\0\25\u019c\3\0\1\u019c\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u019b\5\0\25\u019d\3\0\1\u019d\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u019e\5\0"+
    "\25\u019f\3\0\1\u019f\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u019f\5\0\25\u019f\3\0\1\u019f\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u019e\5\0\25\u01a0\3\0\1\u01a0\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01a1\5\0"+
    "\25\u01a2\3\0\1\u01a2\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01a2\5\0\25\u01a2\3\0\1\u01a2\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01a1\5\0\25\u01a3\3\0\1\u01a3\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01a4\5\0"+
    "\25\u01a5\3\0\1\u01a5\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01a5\5\0\25\u01a5\3\0\1\u01a5\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01a4\5\0\25\u01a6\3\0\1\u01a6\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01a7\5\0"+
    "\25\u01a8\3\0\1\u01a8\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01a8\5\0\25\u01a8\3\0\1\u01a8\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01a7\5\0\25\u01a9\3\0\1\u01a9\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01aa\5\0"+
    "\25\u01ab\3\0\1\u01ab\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01ab\5\0\25\u01ab\3\0\1\u01ab\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01aa\5\0\25\u01ac\3\0\1\u01ac\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01ad\5\0"+
    "\25\u01ae\3\0\1\u01ae\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01ae\5\0\25\u01ae\3\0\1\u01ae\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01ad\5\0\25\u01af\3\0\1\u01af\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01b0\5\0"+
    "\25\u01b1\3\0\1\u01b1\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01b1\5\0\25\u01b1\3\0\1\u01b1\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01b0\5\0\25\u01b2\3\0\1\u01b2\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01b3\5\0"+
    "\25\u01b4\3\0\1\u01b4\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01b4\5\0\25\u01b4\3\0\1\u01b4\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01b3\5\0\25\u01b5\3\0\1\u01b5\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01b6\5\0"+
    "\25\u01b7\3\0\1\u01b7\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01b7\5\0\25\u01b7\3\0\1\u01b7\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01b6\5\0\25\u01b8\3\0\1\u01b8\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01b9\5\0"+
    "\25\u01ba\3\0\1\u01ba\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01ba\5\0\25\u01ba\3\0\1\u01ba\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01b9\5\0\25\u01bb\3\0\1\u01bb\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01bc\5\0"+
    "\25\u01bd\3\0\1\u01bd\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01bd\5\0\25\u01bd\3\0\1\u01bd\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01bc\5\0\25\u01be\3\0\1\u01be\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01bf\5\0"+
    "\25\u01c0\3\0\1\u01c0\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01c0\5\0\25\u01c0\3\0\1\u01c0\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01bf\5\0\25\u01c1\3\0\1\u01c1\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01c2\5\0"+
    "\25\u01c3\3\0\1\u01c3\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01c3\5\0\25\u01c3\3\0\1\u01c3\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01c2\5\0\25\u01c4\3\0\1\u01c4\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01c5\5\0"+
    "\25\u01c6\3\0\1\u01c6\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01c6\5\0\25\u01c6\3\0\1\u01c6\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01c5\5\0\25\u01c7\3\0\1\u01c7\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01c8\5\0"+
    "\25\u01c9\3\0\1\u01c9\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01c9\5\0\25\u01c9\3\0\1\u01c9\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01c8\5\0\25\u01ca\3\0\1\u01ca\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01cb\5\0"+
    "\25\u01cc\3\0\1\u01cc\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01cc\5\0\25\u01cc\3\0\1\u01cc\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01cb\5\0\25\u01cd\3\0\1\u01cd\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01ce\5\0"+
    "\25\u01cf\3\0\1\u01cf\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01cf\5\0\25\u01cf\3\0\1\u01cf\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01ce\5\0\25\u01d0\3\0\1\u01d0\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01d1\5\0"+
    "\25\u01d2\3\0\1\u01d2\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01d2\5\0\25\u01d2\3\0\1\u01d2\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01d1\5\0\25\u01d3\3\0\1\u01d3\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01d4\5\0"+
    "\25\u01d5\3\0\1\u01d5\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01d5\5\0\25\u01d5\3\0\1\u01d5\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01d4\5\0\25\u01d6\3\0\1\u01d6\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01d7\5\0"+
    "\25\u01d8\3\0\1\u01d8\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01d8\5\0\25\u01d8\3\0\1\u01d8\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01d7\5\0\25\u01d9\3\0\1\u01d9\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01da\5\0"+
    "\25\u01db\3\0\1\u01db\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01db\5\0\25\u01db\3\0\1\u01db\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01da\5\0\25\u01dc\3\0\1\u01dc\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01dd\5\0"+
    "\25\u01de\3\0\1\u01de\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01de\5\0\25\u01de\3\0\1\u01de\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01dd\5\0\25\u01df\3\0\1\u01df\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01e0\5\0"+
    "\25\u01e1\3\0\1\u01e1\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01e1\5\0\25\u01e1\3\0\1\u01e1\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01e0\5\0\25\u01e2\3\0\1\u01e2\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01e3\5\0"+
    "\25\u01e4\3\0\1\u01e4\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01e4\5\0\25\u01e4\3\0\1\u01e4\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01e3\5\0\25\u01e5\3\0\1\u01e5\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01e6\5\0"+
    "\25\u01e7\3\0\1\u01e7\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01e7\5\0\25\u01e7\3\0\1\u01e7\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01e6\5\0\25\u01e8\3\0\1\u01e8\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01e9\5\0"+
    "\25\u01ea\3\0\1\u01ea\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01ea\5\0\25\u01ea\3\0\1\u01ea\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01e9\5\0\25\u01eb\3\0\1\u01eb\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01ec\5\0"+
    "\25\u01ed\3\0\1\u01ed\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01ed\5\0\25\u01ed\3\0\1\u01ed\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01ec\5\0\25\u01ee\3\0\1\u01ee\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01ef\5\0"+
    "\25\u01f0\3\0\1\u01f0\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01f0\5\0\25\u01f0\3\0\1\u01f0\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01ef\5\0\25\u01f1\3\0\1\u01f1\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01f2\5\0"+
    "\25\u01f3\3\0\1\u01f3\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01f3\5\0\25\u01f3\3\0\1\u01f3\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01f2\5\0\25\u01f4\3\0\1\u01f4\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01f5\5\0"+
    "\25\u01f6\3\0\1\u01f6\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01f6\5\0\25\u01f6\3\0\1\u01f6\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01f5\5\0\25\u01f7\3\0\1\u01f7\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01f8\5\0"+
    "\25\u01f9\3\0\1\u01f9\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01f9\5\0\25\u01f9\3\0\1\u01f9\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01f8\5\0\25\u01fa\3\0\1\u01fa\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01fb\5\0"+
    "\25\u01fc\3\0\1\u01fc\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01fc\5\0\25\u01fc\3\0\1\u01fc\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01fb\5\0\25\u01fd\3\0\1\u01fd\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u01fe\5\0"+
    "\25\u01ff\3\0\1\u01ff\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u01ff\5\0\25\u01ff\3\0\1\u01ff\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u01fe\5\0\25\u0200\3\0\1\u0200\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0201\5\0"+
    "\25\u0202\3\0\1\u0202\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0202\5\0\25\u0202\3\0\1\u0202\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0201\5\0\25\u0203\3\0\1\u0203\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0204\5\0"+
    "\25\u0205\3\0\1\u0205\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0205\5\0\25\u0205\3\0\1\u0205\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0204\5\0\25\u0206\3\0\1\u0206\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0207\5\0"+
    "\25\u0208\3\0\1\u0208\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0208\5\0\25\u0208\3\0\1\u0208\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0207\5\0\25\u0209\3\0\1\u0209\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u020a\5\0"+
    "\25\u020b\3\0\1\u020b\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u020b\5\0\25\u020b\3\0\1\u020b\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u020a\5\0\25\u020c\3\0\1\u020c\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u020d\5\0"+
    "\25\u020e\3\0\1\u020e\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u020e\5\0\25\u020e\3\0\1\u020e\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u020d\5\0\25\u020f\3\0\1\u020f\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0210\5\0"+
    "\25\u0211\3\0\1\u0211\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0211\5\0\25\u0211\3\0\1\u0211\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0210\5\0\25\u0212\3\0\1\u0212\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0213\5\0"+
    "\25\u0214\3\0\1\u0214\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0214\5\0\25\u0214\3\0\1\u0214\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0213\5\0\25\u0215\3\0\1\u0215\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0216\5\0"+
    "\25\u0217\3\0\1\u0217\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0217\5\0\25\u0217\3\0\1\u0217\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0216\5\0\25\u0218\3\0\1\u0218\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0219\5\0"+
    "\25\u021a\3\0\1\u021a\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u021a\5\0\25\u021a\3\0\1\u021a\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0219\5\0\25\u021b\3\0\1\u021b\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u021c\5\0"+
    "\25\u021d\3\0\1\u021d\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u021d\5\0\25\u021d\3\0\1\u021d\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u021c\5\0\25\u021e\3\0\1\u021e\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u021f\5\0"+
    "\25\u0220\3\0\1\u0220\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0220\5\0\25\u0220\3\0\1\u0220\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u021f\5\0\25\u0221\3\0\1\u0221\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0222\5\0"+
    "\25\u0223\3\0\1\u0223\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0223\5\0\25\u0223\3\0\1\u0223\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0222\5\0\25\u0224\3\0\1\u0224\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0225\5\0"+
    "\25\u0226\3\0\1\u0226\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0226\5\0\25\u0226\3\0\1\u0226\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0225\5\0\25\u0227\3\0\1\u0227\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0228\5\0"+
    "\25\u0229\3\0\1\u0229\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0229\5\0\25\u0229\3\0\1\u0229\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0228\5\0\25\u022a\3\0\1\u022a\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u022b\5\0"+
    "\25\u022c\3\0\1\u022c\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u022c\5\0\25\u022c\3\0\1\u022c\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u022b\5\0\25\u022d\3\0\1\u022d\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u022e\5\0"+
    "\25\u022f\3\0\1\u022f\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u022f\5\0\25\u022f\3\0\1\u022f\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u022e\5\0\25\u0230\3\0\1\u0230\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0231\5\0"+
    "\25\u0232\3\0\1\u0232\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0232\5\0\25\u0232\3\0\1\u0232\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0231\5\0\25\u0233\3\0\1\u0233\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0234\5\0"+
    "\25\u0235\3\0\1\u0235\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0235\5\0\25\u0235\3\0\1\u0235\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0234\5\0\25\u0236\3\0\1\u0236\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0237\5\0"+
    "\25\u0238\3\0\1\u0238\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0238\5\0\25\u0238\3\0\1\u0238\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0237\5\0\25\u0239\3\0\1\u0239\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u023a\5\0"+
    "\25\u023b\3\0\1\u023b\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u023b\5\0\25\u023b\3\0\1\u023b\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u023a\5\0\25\u023c\3\0\1\u023c\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u023d\5\0"+
    "\25\u023e\3\0\1\u023e\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u023e\5\0\25\u023e\3\0\1\u023e\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u023d\5\0\25\u023f\3\0\1\u023f\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0240\5\0"+
    "\25\u0241\3\0\1\u0241\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0241\5\0\25\u0241\3\0\1\u0241\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0240\5\0\25\u0242\3\0\1\u0242\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0243\5\0"+
    "\25\u0244\3\0\1\u0244\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0244\5\0\25\u0244\3\0\1\u0244\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0243\5\0\25\u0245\3\0\1\u0245\4\0\1\65\11\0"+
    "\1\65\1\0\2\65\7\0\1\104\1\0\1\u0246\5\0"+
    "\25\u0247\3\0\1\u0247\4\0\1\65\11\0\1\65\1\0"+
    "\2\65\11\0\1\u0247\5\0\25\u0247\3\0\1\u0247\4\0"+
    "\1\65\11\0\1\65\1\0\2\65\7\0\1\115\1\0"+
    "\1\u0246\5\0\25\u0248\3\0\1\u0248\4\0\1\65\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[29986];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\2\11\7\1\1\11\2\1\1\11\6\1\1\11"+
    "\21\1\7\11\7\1\1\0\1\11\1\1\2\0\1\1"+
    "\1\0\2\11\1\0\1\11\2\1\2\0\3\1\4\11"+
    "\1\1\1\0\25\1\1\11\2\0\1\1\1\0\2\1"+
    "\2\11\1\0\1\1\2\0\2\1\1\0\1\1\1\0"+
    "\11\1\2\0\7\1\1\0\1\1\1\0\5\1\1\11"+
    "\2\0\1\11\1\0\16\1\2\11\1\1\1\0\4\1"+
    "\1\11\1\1\1\0\3\1\1\0\2\1\1\0\1\1"+
    "\1\0\10\1\1\11\1\1\1\11\4\1\1\11\2\1"+
    "\1\0\1\1\1\11\1\0\6\1\1\0\2\1\1\11"+
    "\1\0\5\1\2\0\4\1\1\11\1\0\u0165\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[584];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn, yytext());
	}
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CodeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(sym.ERROR_LITERAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 58: break;
          case 2:
            { return symbol(sym.error);
            }
          // fall through
          case 59: break;
          case 3:
            { /* ignore */
            }
          // fall through
          case 60: break;
          case 4:
            { return symbol(sym.BALTASAR);
            }
          // fall through
          case 61: break;
          case 5:
            { return symbol(sym.GASPAR);
            }
          // fall through
          case 62: break;
          case 6:
            { return symbol(sym.ABRECUENTO);
            }
          // fall through
          case 63: break;
          case 7:
            { return symbol(sym.CIERRECUENTO);
            }
          // fall through
          case 64: break;
          case 8:
            { return symbol(sym.COMET);
            }
          // fall through
          case 65: break;
          case 9:
            { return symbol(sym.RUDOLPH);
            }
          // fall through
          case 66: break;
          case 10:
            { return symbol(sym.COMA);
            }
          // fall through
          case 67: break;
          case 11:
            { return symbol(sym.DASHER);
            }
          // fall through
          case 68: break;
          case 12:
            { return symbol(sym.VIXEN);
            }
          // fall through
          case 69: break;
          case 13:
            { return symbol(sym.L_PAPA_NOEL);
            }
          // fall through
          case 70: break;
          case 14:
            { return symbol(sym.DOS_PUNTOS);
            }
          // fall through
          case 71: break;
          case 15:
            { return symbol(sym.ZWARTE_PIET);
            }
          // fall through
          case 72: break;
          case 16:
            { return symbol(sym.PEPPER_MINSTIX);
            }
          // fall through
          case 73: break;
          case 17:
            { return symbol(sym.KRAMPUS);
            }
          // fall through
          case 74: break;
          case 18:
            { return new Symbol(sym.error, yyline, yycolumn, yytext());
            }
          // fall through
          case 75: break;
          case 19:
            { return new Symbol(sym.PERSONA, yyline, yycolumn, yytext());
            }
          // fall through
          case 76: break;
          case 20:
            { return symbol(sym.ABREEMPAQUE);
            }
          // fall through
          case 77: break;
          case 21:
            { return symbol(sym.CIERRAEMPAQUE);
            }
          // fall through
          case 78: break;
          case 22:
            { return symbol(sym.MELCHOR);
            }
          // fall through
          case 79: break;
          case 23:
            { return symbol(sym.ABREREGALO);
            }
          // fall through
          case 80: break;
          case 24:
            { return symbol(sym.FIN_REGALO);
            }
          // fall through
          case 81: break;
          case 25:
            { return symbol(sym.CIERRAREGALO);
            }
          // fall through
          case 82: break;
          case 26:
            { return symbol(sym.TOTIN);
            }
          // fall through
          case 83: break;
          case 27:
            { return new Symbol(sym.ERROR_IDENTIFICADOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 84: break;
          case 28:
            { return symbol(sym.L_SAN_NICOLAS);
            }
          // fall through
          case 85: break;
          case 29:
            { return symbol(sym.L_NINO_JESUS);
            }
          // fall through
          case 86: break;
          case 30:
            { return symbol(sym.RENILLO);
            }
          // fall through
          case 87: break;
          case 31:
            { return symbol(sym.GRINCH);
            }
          // fall through
          case 88: break;
          case 32:
            { return symbol(sym.QUIEN);
            }
          // fall through
          case 89: break;
          case 33:
            { return symbol(sym.ENTREGA);
            }
          // fall through
          case 90: break;
          case 34:
            { return symbol(sym.BELSNICKEL);
            }
          // fall through
          case 91: break;
          case 35:
            { return symbol(sym.SNOWBALL_ALABASTRO);
            }
          // fall through
          case 92: break;
          case 36:
            { return symbol(sym.KNECHT_RUPRECHT);
            }
          // fall through
          case 93: break;
          case 37:
            { return symbol(sym.HACE);
            }
          // fall through
          case 94: break;
          case 38:
            { return symbol(sym.ELFO);
            }
          // fall through
          case 95: break;
          case 39:
            { return symbol(sym.L_COLACHO);
            }
          // fall through
          case 96: break;
          case 40:
            { return symbol(sym.ENVUELVE);
            }
          // fall through
          case 97: break;
          case 41:
            { return symbol(sym.PAPA_NOEL);
            }
          // fall through
          case 98: break;
          case 42:
            { return symbol(sym.NINO_JESUS);
            }
          // fall through
          case 99: break;
          case 43:
            { return symbol(sym.HADA);
            }
          // fall through
          case 100: break;
          case 44:
            { return symbol(sym.DUENDE);
            }
          // fall through
          case 101: break;
          case 45:
            { return symbol(sym.MAIN);
            }
          // fall through
          case 102: break;
          case 46:
            { return symbol(sym.ESCUCHA);
            }
          // fall through
          case 103: break;
          case 47:
            { return symbol(sym.L_SANTA_CLAUS);
            }
          // fall through
          case 104: break;
          case 48:
            { return symbol(sym.SANTA);
            }
          // fall through
          case 105: break;
          case 49:
            { return symbol(sym.CORTA);
            }
          // fall through
          case 106: break;
          case 50:
            { return symbol(sym.COLACHO);
            }
          // fall through
          case 107: break;
          case 51:
            { return symbol(sym.LOCAL);
            }
          // fall through
          case 108: break;
          case 52:
            { return symbol(sym.NARRA);
            }
          // fall through
          case 109: break;
          case 53:
            { return symbol(sym.REVISA);
            }
          // fall through
          case 110: break;
          case 54:
            { return symbol(sym.ENVIA);
            }
          // fall through
          case 111: break;
          case 55:
            { return symbol(sym.SAN_NICOLAS);
            }
          // fall through
          case 112: break;
          case 56:
            { return symbol(sym.SANTA_CLAUS);
            }
          // fall through
          case 113: break;
          case 57:
            { return symbol(sym.FUNCTION);
            }
          // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
